<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Weclome Back</title>
  
  <subtitle>Keithxodoy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-25T14:41:43.954Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Keithxodoy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python_Spider_xpath</title>
    <link href="http://yoursite.com/2018/07/25/Python/Python%E7%88%AC%E8%99%AB/xpath&amp;lxml/"/>
    <id>http://yoursite.com/2018/07/25/Python/Python爬虫/xpath&amp;lxml/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:41:43.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xpath-和-lxml"><a href="#xpath-和-lxml" class="headerlink" title="xpath 和 lxml"></a>xpath 和 lxml</h1><ul><li>xpath<ul><li>一门从html中提取数据的语言</li></ul></li></ul><a id="more"></a><ul><li><p>xpath语法</p><ul><li>xpath helper插件：帮助我们从<code>elements</code>中定位数据</li><li><ol><li>/ ：表示从根节点开始 选择节点(标签)</li></ol></li><li><ol start="2"><li>// ：表示从任意节点开始</li></ol></li><li><ol start="3"><li>@ ：定位具体元素的位置</li></ol><ul><li>例如：<code>//div[@class=&#39;feed-infinite-wrapper&#39;]/ur/li</code>,表示为选择@class=’feed-infinite-wrapper’的div下的ur下的li。</li><li>另外，<code>a/@href</code>:选择a的href的值</li></ul></li><li><ol start="4"><li>获取文本</li></ol><ul><li><code>a/text()</code>：获取a下的文本</li><li><code>a//text()</code>:获取a下的所有文本</li></ul></li><li>5.当前<ul><li><code>./a</code>表示当前节点下的a</li></ul></li></ul></li><li><p>lxml</p><ul><li>安装 pip install lxml</li><li>使用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="comment">#接收HTML字符串</span></span><br><span class="line">response = requests.get(url).content.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">element = etree.HTML(<span class="string">"html字符串"</span>)</span><br><span class="line"><span class="comment">#xpath提取数据</span></span><br><span class="line">element.xpath(<span class="string">""</span>)</span><br></pre></td></tr></table></figure></li></ul><p>以下代码中，a, b, c是什么参数？</p></li><li>1.&gt;&gt;&gt; “{a} love {b}.{c}”.format(a=”I”, b=”FishC”, c=”com”)</li><li>2.’I love FishC.com’<br>关键字参数       3. 以下代码中，{0}, {1}, {2}是什么参数？</li><li>1.&gt;&gt;&gt; “{0} love {1}.{2}”.format(“I”, “FishC”, “com”)</li><li>2.’I love FishC.com’</li></ul><p>位置参数       4. 如果想要显示Pi = 3.14，format前边的字符串应该怎么填写呢？<br> ‘{0}{1:.2f}’.format(‘Pi = ‘, 3.1415)</p><h1 id="写爬虫的结论"><a href="#写爬虫的结论" class="headerlink" title="写爬虫的结论"></a>写爬虫的结论</h1><ul><li><p>1.url</p><ul><li>知道url地址的规律和总页码数：构造url地址的列表</li><li>start_url (url地址有规律)</li></ul></li><li><p>2.发送请求，获取响应</p><ul><li>requests</li></ul></li><li>3.提取数据<ul><li>返回json字符串：json模块</li><li>返回html字符串：lxml模块配合xpath模块</li></ul></li><li>4.保存</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;xpath-和-lxml&quot;&gt;&lt;a href=&quot;#xpath-和-lxml&quot; class=&quot;headerlink&quot; title=&quot;xpath 和 lxml&quot;&gt;&lt;/a&gt;xpath 和 lxml&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;xpath&lt;ul&gt;
&lt;li&gt;一门从html中提取数据的语言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python_spider" scheme="http://yoursite.com/tags/Python-spider/"/>
    
  </entry>
  
  <entry>
    <title>Python_Basic_Distinguish</title>
    <link href="http://yoursite.com/2018/07/25/Python/Python%E7%90%86%E8%AE%BA/%E6%A6%82%E5%BF%B5%E8%BE%A8%E5%88%AB/"/>
    <id>http://yoursite.com/2018/07/25/Python/Python理论/概念辨别/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:51:42.793Z</updated>
    
    <content type="html"><![CDATA[<p>当一个类实例被创建时，<code>__init__()</code>方法会自动执行<br>目的为执行一些对象的必要的初始化工作</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, symbol)</span>:</span></span><br><span class="line">      self.name = name</span><br><span class="line">      self.symbol = symbol</span><br></pre></td></tr></table></figure><p>我们通过实现<strong>init</strong>()方法来<strong>初始化对象</strong>。当一个对象被创建，<br>Python首先创建一个空对象并为该新对象调用<code>__init__()</code>方法。<br>这个方法函数通常用来创建对象的实例变量并执行任何其他一次性处理。</p><p><strong>注意</strong>：</p><ol><li><code>__init__</code>只能返回None对象,<strong>不能返回任何实例化返回值</strong></li><li>在其他面向对象编程中通常使用 <strong>this</strong></li></ol><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">   ...</span><br><span class="line"><span class="comment"># 实例化</span></span><br><span class="line">myclass = MyClass(*args, **kwargs)</span><br></pre></td></tr></table></figure><p>第一个参数<code>cls</code>是当前正在实例化的类。<br>如果要得到当前类的实例，应当在当前类中的<code>new()</code>方法语句中调用当前类的父类 的<code>new()</code>方法。</p><p>例如，如果当前类是直接继承自<code>object</code>，那当前类的new()方法返回的对象应该为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">return</span> object.__new__(cls)</span><br></pre></td></tr></table></figure></p><hr><h2 id="new-与-init-的区别"><a href="#new-与-init-的区别" class="headerlink" title="_new_()与_init_()的区别"></a><code>_new_()</code>与<code>_init_()</code>的区别</h2><ul><li><ol><li><code>_new_</code>作用于<code>_init_</code>之前。前者可以决定是否调用后者，或者说可以决定调用哪的<em>init</em>方法。<br>Python 中的 <code>_new_</code> 方法负责创建一个实例对象，<code>_init_</code> 方法负责将该实例对象进行初始化</li></ol></li><li><p>2.<code>__init__</code>是在类实例创建之后调用，而<code>__new__</code>方法正是创建这个类实例的方法,<code>__new__</code>产生的实例也就是<code>__init__</code>里面的<strong>self</strong></p><ul><li><code>__new__(cls[,...})</code> <strong>class</strong> 参数会原封不动地传给<strong>init</strong></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当一个类实例被创建时，&lt;code&gt;__init__()&lt;/code&gt;方法会自动执行&lt;br&gt;目的为执行一些对象的必要的初始化工作&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python_terms</title>
    <link href="http://yoursite.com/2018/07/25/Python/Python%E7%90%86%E8%AE%BA/definition-py/"/>
    <id>http://yoursite.com/2018/07/25/Python/Python理论/definition-py/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:46:51.011Z</updated>
    
    <content type="html"><![CDATA[<ul><li>1.多态：可以对不同类的对象使用相同的操作</li><li>2.<code>headers</code>=headers :反爬措施，防止浏览器以为是机器在工作</li><li>3.对象的状态由它的特性（比如名称）来描述</li><li>4.所有的对象都属于某一个类，称为类的<strong>实例</strong></li><li>5.self参数用于对象自身的引用，实例化对象将自己作为第一个参<br>  数传入函数中，例如 若 foo为Person的实例，则<code>foo.greet()</code>可以看作<code>Person.greet(foo)</code>的简写</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;1.多态：可以对不同类的对象使用相同的操作&lt;/li&gt;
&lt;li&gt;2.&lt;code&gt;headers&lt;/code&gt;=headers :反爬措施，防止浏览器以为是机器在工作&lt;/li&gt;
&lt;li&gt;3.对象的状态由它的特性（比如名称）来描述&lt;/li&gt;
&lt;li&gt;4.所有的对象都属
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python_terms" scheme="http://yoursite.com/tags/Python-terms/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="http://yoursite.com/2018/07/25/%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7/HEXO/"/>
    <id>http://yoursite.com/2018/07/25/博客工具/HEXO/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:57:00.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h1><p>主题的配置文件<code>_config.html</code></p><p>links</p><a id="more"></a><h1 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h1><p>  <code>source</code>– <code>_posts</code></p><p> 命令 ： <code>hexo n 文件名</code></p><h2 id="开启微信公众号订阅"><a href="#开启微信公众号订阅" class="headerlink" title="开启微信公众号订阅"></a>开启微信公众号订阅</h2><p> 主题设置文档</p><ul><li>搜索<code>wechat</code></li><li><code>wechat_subscriber</code><ul><li><code>qocde</code>  : 微信公众号的二维码图片</li><li><code>description</code> : 相关描述</li></ul></li></ul><h2 id="设置头像旋转"><a href="#设置头像旋转" class="headerlink" title="设置头像旋转"></a>设置头像旋转</h2><p>在主题的source文件中 <code>sidebar-author.styl</code>文件中修改<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transition</span>: <span class="number">2s</span> all;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.site-author-image</span>: <span class="selector-tag">hover</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="首页文章设置阅读全文"><a href="#首页文章设置阅读全文" class="headerlink" title="首页文章设置阅读全文"></a>首页文章设置阅读全文</h2><p>在blog文件需要添加阅读全文的位置加上<br><code>&lt;!--more--&gt;</code></p><h1 id="利用md修改博客"><a href="#利用md修改博客" class="headerlink" title="利用md修改博客"></a>利用md修改博客</h1><p> 设置博客的分类与标签</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  tags:</span><br><span class="line"><span class="code">    - xxx</span></span><br><span class="line"><span class="code">    - xxx</span></span><br><span class="line">  categories:  分类名</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">#  内容</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;友情链接&quot;&gt;&lt;a href=&quot;#友情链接&quot; class=&quot;headerlink&quot; title=&quot;友情链接&quot;&gt;&lt;/a&gt;友情链接&lt;/h1&gt;&lt;p&gt;主题的配置文件&lt;code&gt;_config.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;links&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客工具" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Python_Spider_Tools</title>
    <link href="http://yoursite.com/2018/07/25/Python/Python%E7%88%AC%E8%99%AB/Spider_00/"/>
    <id>http://yoursite.com/2018/07/25/Python/Python爬虫/Spider_00/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:39:49.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫的分类"><a href="#爬虫的分类" class="headerlink" title="爬虫的分类"></a>爬虫的分类</h1><ul><li>1.通用爬虫</li><li>2.聚焦网络爬虫</li><li>3.增量式网络爬虫</li><li>4.深层网络爬虫</li></ul><a id="more"></a><h1 id="了解url-统一资源定位符"><a href="#了解url-统一资源定位符" class="headerlink" title="了解url(统一资源定位符)"></a>了解url(统一资源定位符)</h1><ul><li>1.url的结构：<code>协议-域名（ip)-端口号-目录-文件名-参数-锚（位置）</code></li></ul><p>#Charles抓包工具S</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;爬虫的分类&quot;&gt;&lt;a href=&quot;#爬虫的分类&quot; class=&quot;headerlink&quot; title=&quot;爬虫的分类&quot;&gt;&lt;/a&gt;爬虫的分类&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.通用爬虫&lt;/li&gt;
&lt;li&gt;2.聚焦网络爬虫&lt;/li&gt;
&lt;li&gt;3.增量式网络爬虫&lt;/li&gt;
&lt;li&gt;4.深层网络爬虫&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python_spider" scheme="http://yoursite.com/tags/Python-spider/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="http://yoursite.com/2018/07/25/%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7/markdown/"/>
    <id>http://yoursite.com/2018/07/25/博客工具/markdown/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:57:36.091Z</updated>
    
    <content type="html"><![CDATA[<p>注释：<br><strong><em>加粗+斜体</em></strong><br><del>删除线</del></p><ul><li>为无序排列,也可以使用-</li></ul><a id="more"></a><h1 id="为强调-为高亮文字"><a href="#为强调-为高亮文字" class="headerlink" title="为强调 为高亮文字 "></a>为强调 <code></code>为高亮文字 <figure class="highlight python"><figcaption><span>使用代码块 **  **粗体文字</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  &gt;引用  多层嵌套&gt;&gt;</span><br><span class="line"><span class="comment">#### 插入图片</span></span><br><span class="line">  `![](./<span class="number">01.</span>png <span class="string">'描述'</span>)`</span><br><span class="line">  ![name][<span class="number">01</span>]</span><br><span class="line">  [<span class="number">01</span>]: ./<span class="number">01.</span>png <span class="string">'描述'</span></span><br><span class="line"><span class="comment">#### 插入图片带有链接</span></span><br><span class="line">`[![](./<span class="number">01.</span>png <span class="string">'百度'</span>)](http://www.baidu.com)`</span><br><span class="line">  ```代码框</span><br></pre></td></tr></table></figure></h1><ul><li><a href="url地址">内容标题</a></li></ul><h4 id="定义型列表"><a href="#定义型列表" class="headerlink" title="定义型列表"></a>定义型列表</h4><p>注：解释型定义<br>Markdown<br>:   轻量级文本标记语言，可以转换成html，pdf等格式  //  开头一个<code>:</code> + <code>Tab</code> 或 四个空格</p><h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><p>Markdown[^1]<br>[^1]: Markdown是一种纯文本标记语言（标记内容）</p><h4 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h4><ul><li style="list-style: none"><input type="checkbox" checked> 选项一</li><li style="list-style: none"><input type="checkbox"> 选项二</li><li style="list-style: none"><input type="checkbox"> [选项</li></ul><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><table><thead><tr><th style="text-align:center">a</th><th style="text-align:left">b</th><th style="text-align:right">c</th></tr></thead><tbody><tr><td style="text-align:center">居中</td><td style="text-align:left">左对齐</td><td style="text-align:right">右对齐</td></tr><tr><td style="text-align:center">=========</td><td style="text-align:left">=============</td><td style="text-align:right">============</td></tr></tbody></table><h4 id="自动邮箱链接"><a href="#自动邮箱链接" class="headerlink" title="自动邮箱链接"></a>自动邮箱链接</h4><p><a href="mailto:&#x78;&#120;&#120;&#64;&#x6f;&#117;&#x74;&#108;&#111;&#x6f;&#107;&#x2e;&#99;&#111;&#109;" target="_blank" rel="noopener">&#x78;&#120;&#120;&#64;&#x6f;&#117;&#x74;&#108;&#111;&#x6f;&#107;&#x2e;&#99;&#111;&#109;</a></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><figure class="highlight plain"><figcaption><span>流程</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始|past:&gt; http://www.baidu.com // 开始</span><br><span class="line">e=&gt;end: 结束              // 结束</span><br><span class="line">c1=&gt;condition: 条件1:&gt;http://www.baidu.com[_parent]   // 判断条件</span><br><span class="line">c2=&gt;condition: 条件2      // 判断条件</span><br><span class="line">c3=&gt;condition: 条件3      // 判断条件</span><br><span class="line">io=&gt;inputoutput: 输出     // 输出</span><br><span class="line">//----------------以上为定义参数-------------------------</span><br><span class="line"></span><br><span class="line">//----------------以下为连接参数-------------------------</span><br><span class="line">// 开始-&gt;判断条件1为no-&gt;判断条件2为no-&gt;判断条件3为no-&gt;输出-&gt;结束</span><br><span class="line">st-&gt;c1(yes,right)-&gt;c2(yes,right)-&gt;c3(yes,right)-&gt;io-&gt;e</span><br><span class="line">c1(no)-&gt;e                   // 条件1不满足-&gt;结束</span><br><span class="line">c2(no)-&gt;e                   // 条件2不满足-&gt;结束</span><br><span class="line">c3(no)-&gt;e                   // 条件3不满足-&gt;结束</span><br></pre></td></tr></table></figure><p><img src="/C:\Users\aiden\Downloads\6912209-972af6417eb7db1e.png" alt="" title="流程"></p><p>演示</p><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解*"></a>代码详解*</h2><p>流程图分为两个部分：<strong>定义参数 然后 连接参数</strong></p><p>定义示例：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tag=&gt;type: content:&gt;url         // 形参格式</span><br><span class="line">st=&gt;start: 开始:&gt;<span class="link">http://www.baidu.com</span>[<span class="string">blank</span>]  //实参格式</span><br><span class="line">注：** st=&gt;start: 开始 的：后面保持空格*<span class="strong">*</span></span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">形参</th><th style="text-align:center">实参</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">tag</td><td style="text-align:center">st</td><td style="text-align:center">标签  (可以自定义)</td></tr><tr><td style="text-align:center">=&gt;</td><td style="text-align:center">=&gt;</td><td style="text-align:center">赋值</td></tr><tr><td style="text-align:center">type</td><td style="text-align:center">start</td><td style="text-align:center">类型 (6种类型)</td></tr><tr><td style="text-align:center">content</td><td style="text-align:center">开始</td><td style="text-align:center">描述内容 (可以自定义)</td></tr><tr><td style="text-align:center">:&gt;url</td><td style="text-align:center"><a href="http://www.baidu.com[blank]" target="_blank" rel="noopener">http://www.baidu.com[blank]</a></td><td style="text-align:center">链接与跳转方式 兼容性很差</td></tr></tbody></table> <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">:---:</span> 居中</span><br><span class="line">:--- 左对齐</span><br><span class="line">---: 右对齐</span><br></pre></td></tr></table></figure><h4 id="6种类型-含义"><a href="#6种类型-含义" class="headerlink" title="6种类型    含义"></a>6种类型    含义</h4><blockquote><blockquote><p>start    启动<br>end    结束<br>operation    程序<br>subroutine    子程序<br>condition    条件<br>inputoutput    输出</p></blockquote></blockquote><p>连接示例：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">st-&gt;c1<span class="function"><span class="params">(<span class="literal">yes</span>,right)</span>-&gt;</span>c2<span class="function"><span class="params">(<span class="literal">yes</span>,right)</span>-&gt;</span>c3<span class="function"><span class="params">(<span class="literal">yes</span>,right)</span>-&gt;</span>io-&gt;e</span><br><span class="line">开始<span class="function">-&gt;</span>判断条件<span class="number">1</span>为<span class="literal">no</span>-&gt;判断条件<span class="number">2</span>为<span class="literal">no</span>-&gt;判断条件<span class="number">3</span>为<span class="literal">no</span>-&gt;输出<span class="function">-&gt;</span>结束</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">形参</th><th style="text-align:center">实参</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-&gt;</td><td style="text-align:center">-&gt;</td><td style="text-align:center">连接</td></tr><tr><td style="text-align:center">condition</td><td style="text-align:center">c1</td><td style="text-align:center">条件(布尔值,方向)    (yes,right)    </td></tr></tbody></table><blockquote><p> 如果满足向右连接，4种方向：right ，left，up ，down 默认为：down</p><blockquote><p>注：operation (程序); subroutine (子程序) ;condition (条件)，都可以<br>在括号里加入连接方向。</p></blockquote></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">operation</span><span class="params">(right)</span></span></span><br><span class="line"><span class="function"><span class="title">subroutine</span><span class="params">(left)</span></span></span><br><span class="line"><span class="function"><span class="title">condition</span><span class="params">(yes,right)</span></span>    <span class="comment">// 只有条件 才能加布尔值</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注释：&lt;br&gt;&lt;strong&gt;&lt;em&gt;加粗+斜体&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;del&gt;删除线&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为无序排列,也可以使用-&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客工具" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>JSON</title>
    <link href="http://yoursite.com/2018/07/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/json/"/>
    <id>http://yoursite.com/2018/07/25/数据结构/json/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:59:49.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识json"><a href="#认识json" class="headerlink" title="认识json"></a>认识json</h1><ul><li>1.全称：<code>JavaScript Object Notation</code><ul><li>另称：轻量级的传输文件</li></ul></li></ul><a id="more"></a><ul><li>2.Json是一个字符串！独立于语言，独立于平台。一种保存数据的格式<ul><li>作用：可以保存本地的json文件，也可以将json串进行传输</li><li>组成：{ } [ ] : ,</li></ul></li><li>3.Json使用了JS语法</li><li>4.Json用于交换数据</li><li><p>5.Json为纯字符串，字符串强制为双引号，Json的key只能为字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json.loads()  <span class="comment">#将json转化为字典</span></span><br><span class="line">response.json()</span><br><span class="line">json.dumps()  <span class="comment">#将字典转化为json</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读取本地的json文件</span></span><br><span class="line">path = <span class="string">r"C/dizhi/jsonfile.json"</span></span><br><span class="line"><span class="keyword">with</span> open(path,<span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="comment">#用load不用loads</span></span><br><span class="line">  data = json.load(f)</span><br><span class="line">  <span class="comment">#返回字典</span></span><br><span class="line">  <span class="keyword">print</span> (data)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#写本地json</span></span><br><span class="line">path = <span class="string">r"C/lujing/test.json"</span></span><br><span class="line">jsondata = &#123;</span><br><span class="line"><span class="string">" "</span>:<span class="string">" "</span>,</span><br><span class="line"><span class="string">" "</span>:<span class="string">" "</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">with</span> open(path , <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">  json.dump(jsondata,f)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line"><span class="keyword">with</span> open (<span class="string">'c.txt'</span>,<span class="string">'a'</span>,encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="comment"># 将文件的格式转换为中文，ensure_ascii=False</span></span><br><span class="line">  f.write(json.dumps(content, ensure_ascii=<span class="keyword">False</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;认识json&quot;&gt;&lt;a href=&quot;#认识json&quot; class=&quot;headerlink&quot; title=&quot;认识json&quot;&gt;&lt;/a&gt;认识json&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.全称：&lt;code&gt;JavaScript Object Notation&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;另称：轻量级的传输文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Data_struction" scheme="http://yoursite.com/categories/Data-struction/"/>
    
    
      <category term="data_struction" scheme="http://yoursite.com/tags/data-struction/"/>
    
  </entry>
  
  <entry>
    <title>Python_Web_Django</title>
    <link href="http://yoursite.com/2018/07/25/Python/Python_Web/Django/"/>
    <id>http://yoursite.com/2018/07/25/Python/Python_Web/Django/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:36:19.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Web"><a href="#Python-Web" class="headerlink" title="Python_Web"></a>Python_Web</h1><a id="more"></a><h2 id="知识内容"><a href="#知识内容" class="headerlink" title="知识内容"></a>知识内容</h2><h3 id="创建项目，并了解项目目录结构"><a href="#创建项目，并了解项目目录结构" class="headerlink" title="创建项目，并了解项目目录结构"></a>创建项目，并了解项目目录结构</h3><p>选好安置目录项目位置后，打开cmd，输入</p><pre><code>`Django-admin`</code></pre><p>输入</p><pre><code>`Django-admin  Startproject myblog`</code></pre><p>Dir查看目录，有无myblog项目</p><ul><li><strong>目录层级说明</strong><br>manage.py  一个命令行工具，可以让我们用多种方式对Django项目进行交互<br><strong>init</strong>.py 一个空文件，它告诉Python这个目录应该被看做一个包<br>settings.py 项目的配置文件（主要处理文件）<br>urls.py     项目的url声明 （主要处理文件）<br>wsgi.py     项目与WSGI兼容的Web服务器入口</li></ul><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><p><strong>Django</strong>默认使用<strong>SQLite</strong>数据库<br>在<strong>settings.py</strong>文件中通过<strong>DATABASES</strong>选项进行数据库配置</p><h3 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h3><p>Python3.x中安装的是<code>PyMySQL</code><br>在<code>__init__.py</code>文件中写入两行代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></p><ul><li>myAPP目录说明<ul><li>admin.py    进行站点配置</li><li>models.py   创建模型</li><li>views.py    创建视图</li></ul></li></ul><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><ul><li>在一个项目中可以创建多个应用，每个应用进行一种业务处理</li></ul><p>打开CMD,进入project<br>(目录激活应用  在settings.py文件中，<br>将myApp应用加入到INSTALLED_APPS选项中)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'myApp'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><blockquote><p>概述：有一个数据表就对应有一个模型</p></blockquote><p>在<code>models.py</code>文件中定义模型<br>  引入：<code>from django.db import models</code><br>模型类要继承<code>models.Model</code>类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grades</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    gname = models.CharField(max_length=<span class="number">20</span>)  <span class="comment"># 字符串类型</span></span><br><span class="line">    gdate = models.DateTimeField()    <span class="comment"># 时间类型</span></span><br><span class="line">    ggirlnum = models.IntegerField()  <span class="comment"># 整型类型</span></span><br><span class="line">    gboynum = models.IntegerField()</span><br><span class="line">    isDelete = models.BooleanField(default=<span class="keyword">False</span>) <span class="comment"># 布尔值类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在布尔值类型中可以添加默认属性default=False</span></span><br><span class="line"><span class="comment"># 关联外键 models.ForeignKey("Grades")</span></span><br><span class="line"><span class="comment">#说明：需要定义主键，在生成时自动添加，并且值为自动增加</span></span><br></pre></td></tr></table></figure></p><h3 id="在数据库中生成数据表"><a href="#在数据库中生成数据表" class="headerlink" title="在数据库中生成数据表"></a>在数据库中生成数据表</h3><ul><li>生成迁移文件<br>执行 <code>python manage.py makemigrations</code>   在migrations目录下生成一个迁移文件，此时数据库中还没有生成数据表</li><li>执行迁移<br>执行 <code>python manage.py migrate</code><br>相当于执行MySQL语句创建了数据表</li></ul><h3 id="测试数据操作"><a href="#测试数据操作" class="headerlink" title="测试数据操作"></a>测试数据操作</h3><ul><li>进入到python shell<ul><li>执行 <code>python manage.py shell</code></li></ul></li></ul><ul><li>引入包<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> myApp.models <span class="keyword">import</span> Grades, Students</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></li></ul><ul><li>查询所有数据<ul><li>类名.objects.all()</li><li>示例： Grades.objects.all()</li></ul></li><li><p>添加数据</p><ul><li>本质：创建一个模型类的对象实例</li><li>示例：CMD窗口下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grade1 = Grades()</span><br><span class="line">grade1.gname = <span class="string">"python04"</span></span><br><span class="line">grade1.gdate = datetime(year=<span class="number">2017</span>, month=<span class="number">7</span>, day=<span class="number">17</span>)</span><br><span class="line">grade1.ggirlnum = <span class="number">3</span></span><br><span class="line">grade1.gboynum = <span class="number">70</span></span><br><span class="line">grade1.save()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看某个对象</p><ul><li>类名.objects(pk=索引号)</li><li>示例：<ul><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Grades.objects.get(pk=<span class="number">2</span>)  <span class="comment"># 查找单个对象,pk=2 --查找第二个</span></span><br><span class="line">Grades.objects.all()</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>修改某个数据</p><ul><li>模型对象属性 = 新值</li><li>示例：<ul><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grade2.gboynum = <span class="number">60</span></span><br><span class="line">grade2.save() <span class="comment"># 保存修改至数据库</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>删除数据</p><ul><li>模型对象.delete()</li><li><code>grade2.delete()</code><br><b><font color="orange">注意：这是物理删除，数据库中的相应数据被永久删除<font></font></font></b></li></ul></li></ul><p><br></p><ul><li><p>关联对象</p><ul><li><p>示例：</p><ul><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stu = Students()</span><br><span class="line">stu.sname = <span class="string">"Xue Yanmei"</span></span><br><span class="line">stu.sgender = <span class="keyword">False</span></span><br><span class="line">stu.sage = <span class="number">20</span></span><br><span class="line">stu.scontend = <span class="string">"I am Xue Yanmei"</span></span><br><span class="line">stu.sgrade = grade1</span><br><span class="line">stu.save()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>获得关联对象的集合</p><ul><li>需求：猎取python04班级的所有学生<ul><li>对象名.关联的类名小写_set.all()</li><li>示例：<code>grade1.students_set.all()</code></li></ul></li><li><p>需求:创建曾志伟，属于python04班级</p><ul><li><p>示例：</p><ul><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu3 = grade1.students_set.create(</span><br><span class="line">sname=<span class="string">u'Zhen Zhiwei'</span>,sgender=<span class="keyword">True</span>,</span><br><span class="line">scontend=<span class="string">u"I am Zhen Zhiwei"</span>,sage=<span class="number">45</span>)</span><br></pre></td></tr></table></figure></li></ul><p><b><font color="orange ">  注意：这样创建的数据直接被添加到了数据库当中。</font></b></p></li></ul></li></ul></li></ul></li></ul><p><hr></p><h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p><code>request.GET[&#39;a&#39;]</code></p><blockquote><p>Get看做是在<code>request</code>下的一个数组，而‘a’是一个键，则<code>request.GET[&#39;a&#39;]</code>对于的就是通过Get方式发送的a的值</p></blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/1085861E957B4A128D59FE5BB875BB90?method=download&amp;shareKey=c6e33f06e63634ca1b5c95106558d975" alt="img"></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th>命令</th><th></th></tr></thead><tbody><tr><td>  启动命令</td><td>python manage.py runserver 端口号</td><td></td></tr></tbody></table><h2 id="常见问题处理"><a href="#常见问题处理" class="headerlink" title="常见问题处理"></a>常见问题处理</h2><ul><li>CSRF问题处理<blockquote><p>当用post提交数据的时候，django会去检查是否有一个csrf的随机字符串，如果没有就会报错</p></blockquote></li></ul><blockquote><p>当用户访问login页面的时候，会生成一个csrf的随机字符串，，并且cookie中也存放了这个随机字符串，当用户再次提交数据的时候会带着这个随机字符串提交，如果没有这个随机字符串则无法提交成功</p></blockquote><p><code>from django.views.decorators.csrf import csrf_exempt</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">firstPageAdd</span><span class="params">(request)</span></span></span><br><span class="line"><span class="function">  <span class="title">return</span> <span class="title">render</span><span class="params">(request,<span class="string">"firstclass_01.html"</span>,locals<span class="params">()</span>)</span></span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-Web&quot;&gt;&lt;a href=&quot;#Python-Web&quot; class=&quot;headerlink&quot; title=&quot;Python_Web&quot;&gt;&lt;/a&gt;Python_Web&lt;/h1&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python_web" scheme="http://yoursite.com/tags/Python-web/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://yoursite.com/2018/07/25/%E6%95%B0%E6%8D%AE%E5%BA%93/Mongodb/"/>
    <id>http://yoursite.com/2018/07/25/数据库/Mongodb/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:58:32.229Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>数据库（database）</li><li>集合（collection）</li><li>文档（document）<ul><li>数据库和集合在MongoDB中不需要手动创建<ul><li>当创建文档时，如果文档所在集合或数据库不存在会自动创建数据库和集合</li></ul></li></ul></li></ul><a id="more"></a><h3 id="Mongodb的windows服务安装和卸载"><a href="#Mongodb的windows服务安装和卸载" class="headerlink" title="Mongodb的windows服务安装和卸载"></a>Mongodb的windows服务安装和卸载</h3><p>安装<br>: <code>mongod --dbpath &quot;C:\mongodb\db&quot; --logpath &quot;C:\mongodb\log.txt&quot; --install --serviceName &quot;MongoDB&quot;</code></p><p>卸载<br>: <code>mongod.exe --remove --serviceName &quot;MongoDB&quot;</code></p><h3 id="1、了解Mongodb"><a href="#1、了解Mongodb" class="headerlink" title="1、了解Mongodb"></a>1、了解Mongodb</h3><p>MongoDB数据库中存的是各种各样的JSON(BSON)</p><h4 id="2、更换MongoDB的database文件夹"><a href="#2、更换MongoDB的database文件夹" class="headerlink" title="2、更换MongoDB的database文件夹"></a>2、更换MongoDB的database文件夹</h4><p><code>mongod --dbpath 文件夹地址</code></p><h4 id="3、运行MongoDB"><a href="#3、运行MongoDB" class="headerlink" title="3、运行MongoDB"></a>3、运行MongoDB</h4><p>#####命令行下运行 MongoDB 服务器<br>为了从命令提示符下运行 MongoDB 服务器，你必须从 MongoDB 目录的 bin 目录中执行 mongod.exe 文件。<br><code>C:\mongodb\bin\mongod --dbpath c:\data\db</code></p><h4 id="4、重新设置端口"><a href="#4、重新设置端口" class="headerlink" title="4、重新设置端口"></a>4、重新设置端口</h4><p><code>C:\mongodb\bin\mongod 数据库路径 --port 123456</code></p><p><strong>注意</strong><br>: 端口数最大不能超过65535</p><h4 id="5、连接MongoDB"><a href="#5、连接MongoDB" class="headerlink" title="5、连接MongoDB"></a>5、连接MongoDB</h4><p>我们可以在命令窗口中运行 mongo.exe 命令即可连接上 MongoDB，执行如下命令：<br><code>C:\mongodb\bin\mongo.exe</code></p><p><br></p><h4 id="6、启动MongoDB"><a href="#6、启动MongoDB" class="headerlink" title="6、启动MongoDB"></a>6、启动MongoDB</h4><p>要启动 MongoDB，请运行 mongod.exe 。<br> 例如，从命令提示符：<br><code>D:\Program Files\MongoDB\Server\3.4\bin\mongod.exe</code></p><blockquote><p>注意：如果不使用 –dbpath 指定数据存储的目录，<br>    那么 MongoDB 默认使用的是 <code>C:\data\db</code>目录，所以在启动 MongoDB 数据库之前要确保 <code>C:\data\db</code> 目录已经创建了。</p></blockquote><ol><li>在mongodb\bin下打开命令行模式:<br>（启动服务器）<br><code>D:\mongodb\bin&gt;mongod</code></li><li>验证Mongdb启动成功<br>在Chrome浏览器下，打开<strong>localhost:27017</strong><br>若出现<code>It looks like you are trying to access MongoDB over HTTP on the native driver port.</code> 则登录成功</li><li><p>打开mongo<br>命令行下输入<code>mongo</code>,进入mongo的客户端命令模式</p><p><br></p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3></li><li><code>show dbs</code><strong>命令可以显示所有数据库的列表。</strong><ul><li><code>show collections</code> <strong>显示数据库中的所有集合</strong></li></ul></li><li><code>db</code> <strong>命令可以显示当前数据库对象或集合。</strong></li><li><code>use  数据库名</code>命令，<strong>可以进入到一个指定的数据库。</strong><ul><li>可以创建任意数据库</li></ul></li><li>MongoDB 的 CRUD（<strong>增删改查</strong>）操作<h4 id="增添"><a href="#增添" class="headerlink" title="增添"></a>增添</h4></li></ol><ul><li><code>db.集合名.insert(doc)</code><pre><code>: 在集合中插入一个文档doc,为**json格式** { ：，： }</code></pre><ul><li>若要插入多个doc,则用列表形式</li><li>向集合插入文档时，若没有给文档指定_id属性，则数据库会自动为文档添加_id<ul><li>该属性为文档的唯一标识</li><li>可以自己指定_id ,”_id”=” “</li></ul></li><li>使用循环，插入多条数据<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span> ; i &lt;<span class="number">200</span> ; i++)&#123;</span><br><span class="line">    db.user.insert(&#123;<span class="built_in">num</span>:i&#125;)    <span class="comment">//需要调用200次insert方法，效率低</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span> ; i&lt;<span class="number">200</span> ; i++)&#123;</span><br><span class="line">  arr.push(&#123;<span class="built_in">num</span>:i&#125;);    <span class="comment">//将num从1到200添加到数组arr中</span></span><br><span class="line">&#125;</span><br><span class="line">db.<span class="built_in">num</span>.insert(arr)     <span class="comment">//只需调用一次 insert方法</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><ul><li><code>db.集合名.find()</code><pre><code>: 查询当前集合中的所有文档`db.collection.find()``find()`返回的是数组，若要查询其中某个属性，则要添加索引`[0]`</code></pre><ul><li>find()用来查询集合中所有符合条件的文档，返回一个数组，可以加索引</li><li>增加查询条件<ul><li>{}：{属性:值} 查询指定属性的文档</li><li>MongoDB支持直接通过内嵌文档的属性查询，若要查询内嵌文档，则可以通过<code>.</code>的形式来匹配此时属性名必须使用引号<ul><li><code>db.user.find({&quot;hobby.movies&quot;:&quot;hero&quot;})</code></li></ul></li></ul></li></ul></li></ul><table><thead><tr><th>更多方法</th><th>用处</th><th>拓展</th></tr></thead><tbody><tr><td><code>findone()</code></td><td>查询符合条件的第一个文档对象</td><td></td></tr><tr><td><code>find().count()</code></td><td>统计所有文档的数量</td></tr><tr><td><code>find({num:{$gt:200}})</code></td><td>查找数字大于200的数据</td><td><code>$gte</code>: &gt;=   <code>$lt</code>:&lt;  <code>$lte</code>:&lt;= <code>$ne</code>:!=</td></tr><tr><td><code>find().limit(10)</code></td><td>==limit()== 可以设置显示数据的上限，即显示10条</td></tr><tr><td><code>find().skip(10).limit(10)</code></td><td>==skip()== 用于跳过指定的数据，该命令可以查询第11-20条数据</td><td>其中<code>skip()</code>,<code>limit()</code>顺序可以倒换</td></tr><tr><td><code>finf({$or:[{a:1},{b:2}]})</code></td><td>查询a属性为1或b属性为2的集合</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 查找用户订单，使用用户ID作为索引</span><br><span class="line">// 向商品属性中添加用户ID做索引</span><br><span class="line">var user_id = db.users.findone(&#123;username:&quot;&quot;&#125;)._id;</span><br><span class="line">db.order.find(&#123;user_id:user_id&#125;);</span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><ul><li><p><code>db.collection.update(查询条件，新对象)</code></p><pre><code>: 修改文档内容方法：`updateMany`,`updateOne`</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 利用update实现updateMany 和 updateOne 的功能</span><br><span class="line">db.user.update( &#123;name:&quot;jedieal&quot;&#125;,&#123;$set:&#123; age=28 &#125;&#125;,&#123;multi:true&#125;);</span><br></pre></td></tr></table></figure><ul><li>注意：update()默认情况下会使用新对象来替换旧的对象<ul><li>如果需要修改指定的属性，而不是替换，则需要使用“修改操作符”来完成<ul><li><code>$set</code>：可以用来修改，增添文档属性</li><li><code>$unset</code>：可以用来<strong>删除文档属性</strong></li></ul></li><li>例子1：<code>db.user.update({name:&quot;jedieal&quot;},{age:28});</code> ： ==age==会将==name==内容给替换</li><li>例子2：<code>db.user.update({name:&quot;jedieal&quot;},{$set:{ age=28   }});</code><ul><li>利用<code>$set</code>，只对age进行修改，还可以用来添加值</li></ul></li><li>删除属性，还是属于修改</li><li>修改集合属性的数组内的数据<ul><li>1 <code>db.user.update({  },{$push :{&quot;hobby.movies&quot;:&quot;hero&quot;}})</code></li><li>2 <code>db.user.update({  },{$addToSet :{&quot;hobby.movies&quot;:&quot;hero&quot;}})</code> : 若要加入的元素与数组内有相同的，则不会添加</li></ul></li></ul></li></ul></li></ul><table><thead><tr><th>更多方法</th><th>作用</th><th></th></tr></thead><tbody><tr><td><code>{$inc:{a:2}}</code></td><td>在a的值的基础上加上2</td><td>要减少，可以将2变为-2</td></tr></tbody></table><hr><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul><li><p><code>db.collection.remove()</code></p><ul><li><code>db.collection.deleteOne();</code>,<code>db.collection.deleteMany(;</code></li><li><p>==remove()==<br>  : 可以根据条件来删除文档，传递的条件的方式和==find()== 一样</p><ul><li>删除一个 <code>db.collection.remove({   },true);</code></li><li>删除所有文档，清空集合(性能略差)  <code>db.collection.remove({})</code><ul><li>清空集合（优化） <code>db.collection.drop()</code></li></ul></li><li>删除数据库 <code>db.dropDatabase()</code></li></ul></li><li>一般数据库中的数据都不会删除，所以删除的方法很少用</li></ul></li><li><p>一般会在数据中添加一个字段，来表示数据是否被删除</p><ul><li><p><code>db.collection.update({  }，{$setZ:{isDel:0}})</code></p></li><li><p><code>db.collection.find({isDel:0})</code><br>: 利用==isDel==作为标准，0代表没删除，1 代表删除</p></li></ul></li></ul><hr><h2 id="NOSQL-Not-Only-SQL"><a href="#NOSQL-Not-Only-SQL" class="headerlink" title="NOSQL (Not Only SQL)"></a>NOSQL (Not Only SQL)</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li><p>数据库的服务器</p><ul><li>用于保存数据</li><li>mongod 用于启动服务器</li></ul></li><li><p>数据库的客户端</p><ul><li>用于操作数据，对数据进行增删改除</li><li>mongo 用于启动客户端</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据库（database）&lt;/li&gt;
&lt;li&gt;集合（collection）&lt;/li&gt;
&lt;li&gt;文档（document）&lt;ul&gt;
&lt;li&gt;数据库和集合在MongoDB中不需要手动创建&lt;ul&gt;
&lt;li&gt;当创建文档时，如果文档所在集合或数据库不存在会自动创建数据库和集合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Database" scheme="http://yoursite.com/categories/Database/"/>
    
    
      <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://yoursite.com/2018/07/25/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    <id>http://yoursite.com/2018/07/25/数据库/MySQL/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:58:56.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>在管理员模式下打开cmd,输入<code>net start mysql</code></p><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><p><code>mysql -u root -p</code> 输入数据库密码</p><a id="more"></a><h1 id="MySQL命令"><a href="#MySQL命令" class="headerlink" title="MySQL命令"></a>MySQL命令</h1><table><thead><tr><th>code</th><th>function</th></tr></thead><tbody><tr><td>use database；</td><td>使用数据库</td></tr><tr><td>show databases ；</td><td>查看数据库</td></tr><tr><td>create database  name ：</td><td>创建一个数据库</td></tr><tr><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h1&gt;&lt;p&gt;在管理员模式下打开cmd,输入&lt;code&gt;net start mysql&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;连接数据库&quot;&gt;&lt;a href=&quot;#连接数据库&quot; class=&quot;headerlink&quot; title=&quot;连接数据库&quot;&gt;&lt;/a&gt;连接数据库&lt;/h1&gt;&lt;p&gt;&lt;code&gt;mysql -u root -p&lt;/code&gt; 输入数据库密码&lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="http://yoursite.com/categories/Database/"/>
    
    
      <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Machine_Learning</title>
    <link href="http://yoursite.com/2018/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0&amp;%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/MachineLearning/"/>
    <id>http://yoursite.com/2018/07/25/机器学习&amp;人工智能/MachineLearning/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T15:00:51.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><a id="more"></a><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ul><li><p>训练集 :用于训练机器学习算法的数据样本集合</p><pre><code>为算法输入大量已分类数据作为算法的训练集</code></pre></li><li><p>特征（属性） : 通常是训练样本集的列，是独立测量得到的结果，多个特征联系起来在一起共同组成一个训练样本</p><ul><li>特征类型<ul><li>数值型，可以使用十进制数字</li></ul></li></ul></li><li><p>目标变量</p><ul><li>分类算法中目标变量的类型通常是标称型的，被称为类别</li><li>回归算法的类型通常为连续型的</li></ul></li><li><p>知识表示</p><ul><li>检查机器是否已经学会了所分配的任务</li></ul></li></ul><hr><h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><p>内容：分类 &amp; 回归</p><p>目的：进行预测，对目标变量的<strong>分类信息</strong>进行预测</p><h3 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h3><blockquote><p>主要用于预测数值型数据</p></blockquote><h3 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h3><p>特点：无类别信息，也不会给定目标值</p><p>聚类<br>: 将数据集合分成由<strong>类似的对象</strong>组成的多个类的过程</p><p>密度估计<br>: 将寻找<strong>描述数据统计值</strong>的过程</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;机器学习&quot;&gt;&lt;a href=&quot;#机器学习&quot; class=&quot;headerlink&quot; title=&quot;机器学习&quot;&gt;&lt;/a&gt;机器学习&lt;/h1&gt;
    
    </summary>
    
      <category term="Machine_Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
    
      <category term="Machine_Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Python_Basic</title>
    <link href="http://yoursite.com/2018/07/25/Python/Python%E7%90%86%E8%AE%BA/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/07/25/Python/Python理论/基础知识/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T15:23:11.663Z</updated>
    
    <content type="html"><![CDATA[<hr><p>继续（换行分隔）: \</p><hr><h1 id="Python解释器执行"><a href="#Python解释器执行" class="headerlink" title="Python解释器执行"></a>Python解释器执行</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/usr/bin/python  #第一行是特殊注释行，称之为组织行，用来告诉我们GUN/Linux系统应该使用哪个解释器来执行</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#FileName: </span></span><br><span class="line"><span class="comment">#Author:</span></span><br><span class="line"><span class="comment">#Date:</span></span><br></pre></td></tr></table></figure><h1 id="Python风格"><a href="#Python风格" class="headerlink" title="Python风格"></a>Python风格</h1><p>==Pythonic==</p><a id="more"></a><p>PEP</p><ul><li>PEP7</li><li>PEP8</li><li>PEP257<h1 id="OOP-Python面向对象"><a href="#OOP-Python面向对象" class="headerlink" title="OOP-Python面向对象"></a>OOP-Python面向对象</h1><blockquote><p>面向对象概述：(ObjectOriented ,OO)</p></blockquote></li></ul><ul><li>OOP思想<ul><li>几个名词<ol><li>OO:面向对象</li><li>OOA:面向对象的分析</li><li>OOD：面向对象的设计</li><li>OOI：面向对象的实现</li><li>OOP：面向对象的编程</li><li>OOA–&gt;OOD–&gt;OOI:面向对象的实现过程</li></ol></li></ul></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>运算符<br> : =/!= 运算符 &gt;（ ）运算符 &gt; not 运算符 &gt; or/and 运算符<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在函数内使用全局变量</span></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>:</span></span><br><span class="line">  <span class="keyword">global</span> num</span><br><span class="line">  print(num)</span><br><span class="line">  num = <span class="number">200</span></span><br><span class="line">  <span class="keyword">print</span> (num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#从非空序列中随机选择元素</span></span><br><span class="line">random.choice(sequence)</span><br></pre></td></tr></table></figure></p><h2 id="生成器-generator"><a href="#生成器-generator" class="headerlink" title="生成器 generator"></a>生成器 generator</h2><p><strong>返回值</strong>：返回生成器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例</span></span><br><span class="line"><span class="comment"># 以下实例展示了 xrange 的使用方法：</span></span><br><span class="line"><span class="comment"># 占用内存小</span></span><br><span class="line">&gt;&gt;&gt;xrange(<span class="number">8</span>)</span><br><span class="line">xrange(<span class="number">8</span>)</span><br><span class="line"><span class="comment"># 通过list方法，将生成器xrange内容给生成出来</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(xrange(<span class="number">8</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">8</span>)                 <span class="comment"># range 使用</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xrange(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">xrange(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(xrange(<span class="number">3</span>,<span class="number">5</span>))</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">3</span>,<span class="number">5</span>)               <span class="comment"># 使用 range</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xrange(<span class="number">0</span>,<span class="number">6</span>,<span class="number">2</span>)</span><br><span class="line">xrange(<span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>)              <span class="comment"># 步长为 2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(xrange(<span class="number">0</span>,<span class="number">6</span>,<span class="number">2</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p>yield<br>: 是一个类似 return 的关键字，迭代一次遇到<strong>yield</strong>时就返回<strong>yield</strong>后面(右边)的值。<br>在下一次迭代时，从上一次迭代遇到的<strong>yield</strong><br><strong>后面的代码</strong>开始执行，可以理解为每执行完一次迭代，<strong>yield</strong>会记住上一次迭代的位置，然后在下一次迭代开始时，从上一次位置的下一位开始，再执行<strong>yield</strong>后的命令</p><p>运用<br>: 在一堆有规律或者有着固定顺序（类似数列）的数据中，需要按照一定规律，将数据分类时，可以使用<strong>yield</strong>生成器来完成</p><h3 id="利用递归生成器处理嵌套问题–树状问题"><a href="#利用递归生成器处理嵌套问题–树状问题" class="headerlink" title="利用递归生成器处理嵌套问题–树状问题"></a>利用递归生成器处理嵌套问题–树状问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解释：当展开元素为单个元素时，会引发TypeError，则只会生成该元素的生成器</span></span><br><span class="line"><span class="comment"># 当展开多层元素时，可以分层展开，利用faltten()递归</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">faltten</span><span class="params">(nested)</span>:</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> sublist <span class="keyword">in</span> nested:</span><br><span class="line">      <span class="keyword">for</span> element <span class="keyword">in</span> faltten(sublist):</span><br><span class="line">        <span class="keyword">yield</span> element</span><br><span class="line">  <span class="keyword">except</span> TypeError:</span><br><span class="line">    <span class="keyword">yield</span> nested</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用生成器检查展开对象是否为类似字符串的对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">faltten</span><span class="params">(nested)</span>:</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 不要迭代类似字符串的对象</span></span><br><span class="line">    <span class="keyword">try</span>: nested + <span class="string">''</span>        <span class="comment"># 通过和字符串的拼接来检查</span></span><br><span class="line">    <span class="keyword">except</span> TypeError: <span class="keyword">pass</span>     <span class="comment"># 对非字符串对象不做处理</span></span><br><span class="line">    <span class="keyword">else</span> : <span class="keyword">raise</span> TypeError      <span class="comment"># 对字符串对象进行报错</span></span><br><span class="line">    <span class="keyword">for</span> sublist <span class="keyword">in</span> nested:</span><br><span class="line">      <span class="keyword">for</span> element <span class="keyword">in</span> faltten(sublist):</span><br><span class="line">        <span class="keyword">yield</span> element</span><br><span class="line">  <span class="keyword">except</span> TypeError:</span><br><span class="line">    <span class="keyword">yield</span> nested</span><br></pre></td></tr></table></figure><h2 id="匿名函数-–-lambda-函数无固定名"><a href="#匿名函数-–-lambda-函数无固定名" class="headerlink" title="匿名函数 – lambda 函数无固定名"></a>匿名函数 – lambda 函数无固定名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="keyword">lambda</span> a,b:a+b</span><br><span class="line">print(sum(<span class="number">10</span>,<span class="number">20</span>))</span><br><span class="line"><span class="comment">#变量名 = lambda 参数1，参数2，。。。: 表达式</span></span><br></pre></td></tr></table></figure><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="列表方法"><a href="#列表方法" class="headerlink" title="列表方法"></a>列表方法</h2><blockquote><p>引用方法：对象.方法(参数)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>append -----在列表末尾追加新的对象</span><br><span class="line">&gt;&gt;&gt;lst =[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt;lst.append(<span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt;lst</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>count -----统计某个元素在列表中出现的次数</span><br><span class="line">&gt;&gt;&gt;x =[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;x.count(<span class="number">1</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>extend  -----用新列表来拓展原有列表</span><br><span class="line">&gt;&gt;&gt;a= [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt;b= [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">&gt;&gt;&gt;a.extend(b)</span><br><span class="line">&gt;&gt;&gt;a</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment">#  该方法与原始的列表连接不同(a+b),该方法返回的是一个全新的列表</span></span><br><span class="line"><span class="comment">#  若要添加多个元素，则在括号内用列表</span></span><br><span class="line">例如：x.extend([<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line"><span class="number">4.</span>index -----从列表中找出某个值的第一个匹配项的索引位置</span><br><span class="line">&gt;&gt;&gt;x =[a,b,c]</span><br><span class="line">&gt;&gt;&gt;x.index(c)</span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>insert -----将对象插入到列表中</span><br><span class="line">&gt;&gt;&gt;numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;numbers.insert(<span class="number">3</span>,<span class="string">'four'</span>)</span><br><span class="line">  <span class="comment">#（）逗号前 3 为插入的位置，逗号后为插入的内容</span></span><br><span class="line">&gt;&gt;&gt;numbers</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'four'</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>pop -----移除列表中的一个元素</span><br><span class="line">&gt;&gt;&gt;x= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;x.pop()</span><br><span class="line"> <span class="comment">#若括号内为空，则默认移除最后一个元素</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"> <span class="comment">#注意这里pop方法返回了元素值，且pop方法为唯一一个既能修改列表又返回元素值的列表方法</span></span><br><span class="line">&gt;&gt;&gt;x</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tip:使用pop方法可以实现一种数据结构——栈。栈的原理如堆放盘子，只能在顶部放一个盘子</span></span><br><span class="line"><span class="comment"># 也只能从顶部拿走一个盘子，即后进先出（LIFO)</span></span><br><span class="line"><span class="comment"># Python没有入栈的方法，但可以用append代替，。如果入栈刚刚出栈的值，则列表不变</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>remove  -----用于移除列表中某个值的第一个匹配项</span><br><span class="line">&gt;&gt;&gt;x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">&gt;&gt;&gt;x.remove(<span class="number">1</span>)</span><br><span class="line">&gt;&gt;&gt;x</span><br><span class="line">[<span class="number">2</span>,<span class="number">1</span>]            <span class="comment">#只移除第一个匹配项</span></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>reverse ----将列表中的元素反向存放</span><br><span class="line">&gt;&gt;&gt;x =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;x,reverse()</span><br><span class="line">&gt;&gt;&gt;x</span><br><span class="line">[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tip:如果需要对一个序列进行反向迭代，使用reversed函数，返回一个迭代器对象</span></span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>sort -----将列表中的元素按照一定的顺序排列，无副本，只对原列表直接改变</span><br><span class="line">&gt;&gt;&gt;x =[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">&gt;&gt;&gt;x.sort()             <span class="comment">#虽然sort方法修改了x却返回了空值</span></span><br><span class="line">&gt;&gt;&gt;x</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">如果需要副本，可以自建</span><br><span class="line">&gt;&gt;&gt;x =[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;y =x[ : ]            <span class="comment">#这里【 ： 】相当于strcpy，不能直接 y = x</span></span><br><span class="line">如果使用y=x，则改变x的值，也会同时改变y，因为x为y的原列表</span><br><span class="line">&gt;&gt;&gt;y.sort()</span><br><span class="line">&gt;&gt;&gt;&gt;x</span><br><span class="line">[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;y</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]                 <span class="comment">#既保留了原列表x,又创建了新列表y</span></span><br><span class="line">倒序  x.sort(reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="number">10.</span>高级排序</span><br><span class="line">cmp 比较</span><br><span class="line">&gt;&gt;&gt;x =[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;x.sort(cmp)</span><br><span class="line">&gt;&gt;&gt;x</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里sort方法有两个可选参数，也称为关键字参数：key 和 reverse</span></span><br><span class="line"><span class="comment"># 此类函数不是直接来确定对象大小，而是为每个元素创建一个键，根据键来排序</span></span><br><span class="line">例：&gt;&gt;&gt;x =[<span class="string">'abc'</span>,<span class="string">'a'</span>,<span class="string">'ab'</span>]</span><br><span class="line">    &gt;&gt;&gt;x.sort(key = len )</span><br><span class="line">    &gt;&gt;&gt;x</span><br><span class="line">    [<span class="string">'a'</span>,<span class="string">'ab'</span>,abc<span class="string">']</span></span><br><span class="line"><span class="string"># 另一个关键字参数reverse是布尔值</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;x =[1,2,3]</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;x.sort(reverse =True)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;x</span></span><br><span class="line"><span class="string">[3,2,1]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">11.enumerate迭代器</span></span><br><span class="line"><span class="string"># 将列表中的index和value以元组的形式表示出来</span></span><br><span class="line"><span class="string">list(enumerate（x）)</span></span><br></pre></td></tr></table></figure></p></blockquote><hr><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>1.元组大部分时候通过圆括号括起来<br>2.空元组 &gt;&gt;&gt;()<br>3.一个值的元组 &gt;&gt;&gt;42,</p><ul><li>#元组加逗号是十分关键的</li></ul><p>更新元组<br>x = (1,2)<br>x = x[ :1] +(‘0,’ )+x[1: ]<br>x<br>x = (1,2,3)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#优先级，索引，内容</span></span><br><span class="line">(prioroty,index,item)</span><br></pre></td></tr></table></figure></p><h3 id="构建一键多值"><a href="#构建一键多值" class="headerlink" title="构建一键多值"></a>构建一键多值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#collections模块中的defaultdict类</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">d = defaultdict(list)</span><br><span class="line">d[<span class="string">'a'</span>].append(<span class="number">1</span>)</span><br><span class="line">d[<span class="string">'a'</span>].append(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">d = defaultdict(set)</span><br><span class="line">d[<span class="string">'a'</span>].add(<span class="number">1</span>)</span><br><span class="line">d[<span class="string">'a'</span>].add(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oni = &#123;<span class="string">"name"</span>=<span class="string">"chen"</span>,<span class="string">"id"</span>=<span class="number">4545</span>&#125;</span><br><span class="line">oni.keys() <span class="comment">#查看键</span></span><br><span class="line">oni.values() <span class="comment">#查看值</span></span><br><span class="line">oni.items() <span class="comment">#查看键值</span></span><br></pre></td></tr></table></figure><p><strong>wd 为汉字编码</strong></p><p><strong>注意</strong>：<br>1.字典中的键不可以重复，会返回后面的值<br>2.字典中的键是任意可hash对象（不可变对象，如数字，元组，字符串）</p><hr><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><ul><li><p>format:字符串格式化的一种方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"我是&#123;&#125;会"</span>.format(<span class="number">1</span>)</span><br><span class="line"><span class="string">"我是&#123;&#125;会"</span>.format([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="string">"我是&#123;&#125;会"</span>.format(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br><span class="line"><span class="string">"我是&#123;&#125;会&#123;&#125;"</span>.format(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="string">"我是&#123;&#125;会&#123;&#125;"</span>.format(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>列表推导式</p><ul><li>帮助生成包含一组数据的列表<br><code>[i+10 for i in range(10)]</code> —&gt; [10,11,    ,19]</li><li>与字符串一起使用<ul><li><code>[&quot;10月{}日&quot;.format(i) for i in range(1,10)]</code><br>—&gt;[“10月1号”，“10月2号”，   ]<br><code>list[0]</code>将列表第一个元素转换</li></ul></li><li>字典推导式<ul><li>帮助我们快速生成包含一堆数据的字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;i+<span class="number">10</span>:i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)&#125;   <span class="comment">#&#123;10:0,11:1,   ,19:9&#125;</span></span><br><span class="line">&#123;<span class="string">"a&#123;&#125;"</span>.format(i):<span class="number">10</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)&#125;  <span class="comment">#&#123;"a&#123;0&#125;":10,,,,&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>三元运算</p><ul><li>if 后面的条件成立，就把i前面的结构赋值给a，否则把else后面的<br>结果赋值给a<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">10</span> <span class="keyword">if</span> <span class="number">4</span>&gt;<span class="number">2</span> <span class="keyword">else</span> <span class="number">20</span> <span class="comment"># a = 10</span></span><br></pre></td></tr></table></figure></li></ul><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"let's learn %r"</span> % <span class="string">"python"</span></span><br><span class="line"><span class="comment">#格式化%可以为s,d,r,其中r可以打印任何内容</span></span><br><span class="line"><span class="comment">#%r用来调试最好，%s和其他格式符用来向用户显示变量</span></span><br><span class="line">          %c     格式化字符及其ASCII码</span><br><span class="line">          %s     格式化字符串</span><br><span class="line">          %d     格式化整数</span><br><span class="line">          %u     格式化无符号整型</span><br><span class="line">          %o     格式化无符号八进制数</span><br><span class="line">          %x     格式化无符号十六进制数</span><br><span class="line">          %X     格式化无符号十六进制数（大写）</span><br><span class="line">          %f     格式化浮点数字，可指定小数点后的精度</span><br><span class="line">          %e     用科学计数法格式化浮点数</span><br><span class="line">          %E     作用同%e，用科学计数法格式化浮点数</span><br><span class="line">          %g     %f和%e的简写</span><br><span class="line">          %G     %f 和 %E 的简写</span><br><span class="line">          %p     用十六进制数格式化变量的地址</span><br></pre></td></tr></table></figure><p><strong>%.xf</strong> 表示将小数中小数点后面的位数固定到x位<br>如果小数的位数比x大，则保留x位小数<br>eg:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\<span class="meta">&gt;&gt;&gt; </span><span class="string">"%.3f"</span> % <span class="number">3.1415926</span></span><br><span class="line"><span class="string">'3.142'</span></span><br></pre></td></tr></table></figure></li></ul><p>如果小数的位数比x小，则用0补足<br>eg:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\<span class="meta">&gt;&gt;&gt; </span><span class="string">"%.4f"</span> % <span class="number">3.1</span></span><br><span class="line"><span class="string">'3.1000'</span></span><br></pre></td></tr></table></figure></p><blockquote><p>浮点数四舍五入<br>  round() :<code>round(1.733)</code></p></blockquote><h3 id="if-name-quot-main-quot-作用"><a href="#if-name-quot-main-quot-作用" class="headerlink" title="if __name__ == &quot;__main__&quot;作用"></a><code>if __name__ == &quot;__main__&quot;</code>作用</h3><blockquote><p>让Python知道该模块是作为程序运行还是导入到其他程序中</p></blockquote><hr><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h2 id="sys-模块-amp-os模块"><a href="#sys-模块-amp-os模块" class="headerlink" title="sys 模块 &amp; os模块"></a>sys 模块 &amp; os模块</h2><h3 id="分别作用"><a href="#分别作用" class="headerlink" title="分别作用"></a>分别作用</h3><ul><li><p>sys模块负责程序与Python解释器的交互<br>提供了一系列函数和变量用于操控Python运行时的环境</p></li><li><p>os模块负责程序与操作系统的交互，提供了访问操作系统底层的接口</p></li></ul><h3 id="sys模块内容"><a href="#sys模块内容" class="headerlink" title="sys模块内容"></a>sys模块内容</h3><p><code>sys.path</code><br>  : 查找模块所在的目录列表.<br>  若要在与解释器不同路径下导入模块，则需要在解释器路径下添加路径<code>sys.path.append(&quot;路径&quot;)</code></p><p><code>sys.argv</code><br>: 「argv」是「argument variable」参数变量的简写形式，一般在命令行调用的时候由系统传递给程序。<br>这个变量其实是一个List列表，argv[0] 一般是被调用的脚本文件名或全路径，和操作系统有关，argv[1]和以后就是传入的数据了。</p><h3 id="os模块内容"><a href="#os模块内容" class="headerlink" title="os模块内容"></a>os模块内容</h3><ul><li>命令</li></ul><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>os.linesep</td><td>在当前平台使用的行终止符</td></tr></tbody></table><h2 id="包（package"><a href="#包（package" class="headerlink" title="包（package)"></a>包（package)</h2><ol><li>创建一个文件夹，用于存放相关的模块，文件夹的名字即为包的名字</li><li>在文件夹中创建一个<code>__init__.py</code>的模块文件，内容可以为空</li><li>将相关的模块放入文件夹中</li><li>调用方法 ：<code>import M1.module</code></li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行，调用，使用函数为同一个意思</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_two</span><span class="params">(*args)</span>:</span></span><br><span class="line"><span class="comment">#*代表可以接收所有参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_two_again</span><span class="params">(arg1,arg2)</span></span></span><br></pre></td></tr></table></figure><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><p>eval()<br>: 是程序语言中的函数，功能是获取返回值，不同语言大同小异，函数原型是返回值 = eval( codeString )，如果eval函数在执行时遇到错误，则抛出异常给调用者。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><code>eval(expression[, globals[, locals]])</code><br>有三个参数，表达式字符串，globals变量作用域，locals变量作用域。 其中第二个和第三个参数是可选的。</p><p>如果忽略后面两个参数，则eval在当前作用域执行。<br>实例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">eval(<span class="string">"a+1"</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>如果指定globals参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">g=&#123;<span class="string">'a'</span>:<span class="number">10</span>&#125;</span><br><span class="line">eval(<span class="string">"a+1"</span>,g)</span><br><span class="line"></span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure></p><blockquote><blockquote><blockquote></blockquote><p>如果指定locals参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">20</span></span><br><span class="line">c=<span class="number">20</span></span><br><span class="line">g=&#123;<span class="string">'a'</span>:<span class="number">6</span>,<span class="string">'b'</span>:<span class="number">8</span>&#125;</span><br><span class="line">l=&#123;<span class="string">'b'</span>:<span class="number">9</span>,<span class="string">'c'</span>:<span class="number">10</span>&#125;</span><br><span class="line">eval(<span class="string">"a+b+c"</span>,g,l)</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><h3 id="Help-模块名-help-模块-函数名"><a href="#Help-模块名-help-模块-函数名" class="headerlink" title="Help(模块名)  help(模块.函数名)"></a>Help(模块名)  help(模块.函数名)</h3><blockquote><p>这是得到模块帮助文档的方式，所谓帮助文档就是定义函数时放在”‘ ‘“之间的东西，也被称为文档注释</p></blockquote><h3 id="name"><a href="#name" class="headerlink" title=" name"></a><strong> <em>name</em></strong></h3><blockquote><p>用于检测主程序代码中的模块是被导入还是被直接执行</p></blockquote><ul><li>如果模块是被导入，则<code>__name__</code>的值为模块名字</li><li>如果模块是被直接执行，则<code>__name__</code>的值为<code>&#39;__main__&#39;</code></li></ul><hr><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><blockquote></blockquote><p>新式类与旧式类<br>: python的新式类是2.2版本引进来的，<br>官方给的解释是：<br>为了统一类(class)和类型(type)。<br>在2.2之前，比如2.1版本中，类和类型是不同的，如a是ClassA的一个实例，那么a.<strong>class</strong>返回 ‘ class    <strong>main</strong>.ClassA‘ ，type(a)返回总是<type 'instance'="">。而引入新类后，比如ClassB是个新类，b是ClassB的实例，b.<strong>class</strong>和type(b)都是返回‘class ‘<strong>main</strong>.ClassB’ ，这样就统一了。</type></p><ul><li>类的实例化<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">Spider(param)</span><br></pre></td></tr></table></figure></li></ul><p>使用 <code>class</code> 关键字定义类，可以选择提供一个父类或者说基类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Filter</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.blocked=[]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(self,sequence)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> ([x <span class="keyword">for</span> x <span class="keyword">in</span> sequence <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> self.blocked])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Spam_Filter是Filter的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam_Filter</span><span class="params">(Filter)</span>:</span></span><br><span class="line"><span class="comment">#重写Filter超类中的init方法</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment">#过滤的元素序列</span></span><br><span class="line">    self.blocked = [<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><blockquote><p>Filter是用于过滤序列的通用类<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; f = Spam_Filter()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.init()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.filter([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; [<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Python内建 issubclass :判断一个类是否是另一个类的子类<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">issubclass</span><span class="params">(Spam_Filter,Filter)</span></span></span><br><span class="line">True</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看子类的基类 ： <strong> bases  </strong><br> <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (Spam_Filter.__bases__)</span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> <span class="title">__main__</span>.<span class="title">Filter</span> <span class="title">at</span> 0<span class="title">x171e40</span>&gt;.)</span></span><br><span class="line"><span class="comment">#若无基类，则返回一个空序列</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看对象属于哪一个类 ：<strong> class </strong><br> <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (f.__class__)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> <span class="title">__main__</span>.<span class="title">Spam_Filter</span> <span class="title">at</span> 0<span class="title">x1707c0</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>调用绑定类的方法时，使用类名<br>Teacher.say()</p></blockquote><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>注意<br>: 若子类继承了父类，但是在子类中，==父类的构造方法被重写==，即<code>__init__</code>内容被改变，<br>  且新的构造方法中==没有任何关于初始化父类构造方法中特性的代码==，则会发生<strong>异常</strong></p><h4 id="python-（未）绑定方法"><a href="#python-（未）绑定方法" class="headerlink" title="python （未）绑定方法"></a>python （未）绑定方法</h4><p>解释 —绑定方法<br>: 在调用一个实例的方法时，该方法的<strong>self</strong>参数会被自动绑定到实例上</p><p>因为绑定方法的缘故，若在子类中使用父类的方法，且在子类中新的构造方法没有关于<br>初始化新特性的代码，故程序会报错</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ol><li><p>在子类函数中直接调用类的方法，例如<code>Bird.__init__(self)</code>,则实例就不会被绑定，就<br>可以自由地提供需要的self参数<br>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">songbird</span><span class="params">(Bird)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        Bird.__init__(self） <span class="comment"># 在子类构造函数中使用父类的构造方法</span></span><br><span class="line">        self.sound = ’squawk’</span><br></pre></td></tr></table></figure></li><li><p>使用Super函数<br>在子类的构造函数中直接使用Super()函数，在python3.0之后版本中Super中可以不带任何参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">songbird</span><span class="params">(Bird)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.sound = ‘squawk’</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="接口（“协议”）与内省"><a href="#接口（“协议”）与内省" class="headerlink" title="接口（“协议”）与内省"></a>接口（“协议”）与内省</h3><p><code>hasattr(对象名,&#39;方法&amp;特性&#39;,None)</code><br>: 检测特性是否存在</p><p><code>getattr(对象名,&#39;方法&amp;特性&#39;,None)</code><br>: 直接访问特性，若特性不存在，则返回None</p><p><code>setattr(对象名,&#39;方法&amp;特性&#39;,&#39;内容&#39;)</code><br>: 设置对象的特性</p><h3 id="私有方法-成员"><a href="#私有方法-成员" class="headerlink" title="私有方法(成员)"></a>私有方法(成员)</h3><blockquote><p>Python的私有不是真的私有，是一种成为name mangling的改名策略<br>可使用对象.__classname_attribuename访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在方法名前加上双下划线__即可</span><br><span class="line">def __func(self):</span><br></pre></td></tr></table></figure></p></blockquote><hr><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  a = <span class="number">100</span></span><br><span class="line">  c = a+<span class="string">'a'</span></span><br><span class="line"><span class="keyword">except</span> TypeError <span class="keyword">as</span> f:</span><br><span class="line">  print(<span class="string">"出错"</span>，f)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> f:</span><br><span class="line">  print(<span class="string">"出错"</span>，f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># else使你可以编写只有在try子句中没有遇到任何异常时才能运行的代码。</span></span><br><span class="line"><span class="comment"># finally使您能够执行应始终运行的代码段，无论是否遇到任何异常。</span></span><br><span class="line"><span class="comment"># 捕捉异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#若对异常不进行处理</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  a = <span class="number">100</span></span><br><span class="line">  c = a+<span class="string">'a'</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#对所有异常类型的处理</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> f:</span><br><span class="line">  print(<span class="string">"Exception"</span>,f)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">  print(<span class="string">"最终输出"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印错误内容</span></span><br><span class="line"><span class="keyword">except</span> (TypeError,NameError) <span class="keyword">as</span> e:</span><br><span class="line">  print(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用一个块来捕捉异常,用元组列出</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  a = <span class="number">100</span></span><br><span class="line">  c = a+<span class="string">'a'</span></span><br><span class="line"><span class="keyword">except</span> (TypeError,NameError):</span><br><span class="line">  print(<span class="string">'Error'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#抛出（制造）异常</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = a+b</span><br><span class="line"><span class="keyword">raise</span> TypeError(<span class="string">"你就是错了"</span>)</span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 屏蔽异常</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MuffledCalculator</span>:</span></span><br><span class="line">  muffled = <span class="keyword">False</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(self,expr)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#  eval()是程序语言中的函数，功能是获取返回值，不同语言大同小异</span></span><br><span class="line">    <span class="comment"># 函数原型是返回值 = eval( codeString )</span></span><br><span class="line">    <span class="comment"># 如果eval函数在执行时遇到错误，则抛出异常给调用者。</span></span><br><span class="line">      <span class="keyword">return</span> eval(expr)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="comment"># 当给muffled赋值为True时，关闭屏蔽</span></span><br><span class="line">      <span class="keyword">if</span> self.muffled:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Division by zero is illegal'</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套加入else子句</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  print(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  print(<span class="string">'b'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">'c'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;继续（换行分隔）: \&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Python解释器执行&quot;&gt;&lt;a href=&quot;#Python解释器执行&quot; class=&quot;headerlink&quot; title=&quot;Python解释器执行&quot;&gt;&lt;/a&gt;Python解释器执行&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#！/usr/bin/python  #第一行是特殊注释行，称之为组织行，用来告诉我们GUN/Linux系统应该使用哪个解释器来执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#-*-coding:utf-8-*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#FileName: &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Author:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Date:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Python风格&quot;&gt;&lt;a href=&quot;#Python风格&quot; class=&quot;headerlink&quot; title=&quot;Python风格&quot;&gt;&lt;/a&gt;Python风格&lt;/h1&gt;&lt;p&gt;==Pythonic==&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python_Compute</title>
    <link href="http://yoursite.com/2018/07/25/Python/Python%E8%AE%A1%E7%AE%97/pandas&amp;numpy/"/>
    <id>http://yoursite.com/2018/07/25/Python/Python计算/pandas&amp;numpy/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:54:34.850Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>帮助函数 S.method?</p></blockquote><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><h2 id="1-什么是Series"><a href="#1-什么是Series" class="headerlink" title="1.什么是Series"></a>1.什么是Series</h2><p>简单来说：一维带标签（索引）的数组</p><a id="more"></a><h2 id="2-Series的特征"><a href="#2-Series的特征" class="headerlink" title="2.Series的特征"></a>2.Series的特征</h2><ul><li>数组中的数据可以是任意的类型，包括整数、浮点数、字符串、列表、字典等python对象</li><li><p>数组中的数据应为同一类型</p><h2 id="创建Series"><a href="#创建Series" class="headerlink" title="创建Series"></a>创建Series</h2><p>一般格式<br><code>s = pd.Series(data,index = index)</code></p></li><li><p>通过列表list创建Series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">s = pd.Series([<span class="number">10</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">40</span>])</span><br><span class="line">si</span><br></pre></td></tr></table></figure></li><li><p>通过字典dictionary创建Series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict_1 = &#123;<span class="string">"a"</span>:<span class="number">10</span>,<span class="string">"c"</span>:<span class="number">5</span>,<span class="string">"b"</span>:<span class="number">40</span>&#125;</span><br><span class="line">s1 = pd.Series(dict_1)</span><br><span class="line">s1</span><br></pre></td></tr></table></figure></li></ul><p><b><font color="orange">字典和Series的区别：</font></b></p><blockquote><p>字典是无序的，Series是有序的，通过无序的字典来创建Series后，Series会将字典的键作为自己的索引，并且按升序方式排列</p></blockquote><ul><li>通过数组array创建Series<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array_1 = np.arange(<span class="number">10</span>,<span class="number">16</span>)</span><br><span class="line">s2 = pd.Series(array_1,index=list(<span class="string">"abcdef"</span>)) <span class="comment"># 设置index</span></span><br><span class="line">s2</span><br></pre></td></tr></table></figure></li></ul><h2 id="Series的属性"><a href="#Series的属性" class="headerlink" title="Series的属性"></a>Series的属性</h2><ul><li>获得索引index<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s2.index</span><br><span class="line">Index([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>], dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>索引为迭代器</p><ul><li>通过赋值整体地修改索引值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s2.index = [<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>,<span class="string">"dd"</span>,<span class="string">"eee"</span>,<span class="string">"fff"</span>]</span><br><span class="line">s2</span><br></pre></td></tr></table></figure></li></ul></blockquote><p><b>要点</b>：新设置的索引个数必须与原来索引个数一致<br><b><i>值得一提的是</i></b>：提取单个索引值来修改是不允许的，如果要修改索引值，就得全部重新设置</p><ul><li><p>修改index的名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s2.index.name = <span class="string">"banana"</span></span><br><span class="line">s2</span><br></pre></td></tr></table></figure></li><li><p>修改Series的名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.name = <span class="string">"length"</span></span><br></pre></td></tr></table></figure></li><li><p>获取Series的值values</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.values</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>通过以上我们发现，Series对象本身及其索引都有name属性</p></blockquote><h2 id="Series的索引-index"><a href="#Series的索引-index" class="headerlink" title="Series的索引 index"></a>Series的索引 index</h2><ul><li><p>位置索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#得到第一行的数</span></span><br><span class="line">s2[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li><li><p>得到最后一行的数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></li><li><p>得到特定一些行的数(如第1行，第4行，第6行）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2[[<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>]]</span><br></pre></td></tr></table></figure></li></ul><p>*名称索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#得到索引为aa所对应的数</span></span><br><span class="line">s2[<span class="string">"aa"</span>]</span><br></pre></td></tr></table></figure></p><h2 id="Series的切片slice"><a href="#Series的切片slice" class="headerlink" title="Series的切片slice"></a>Series的切片slice</h2><ul><li>索引位置切片<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2[<span class="number">1</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>没有包含末端</p></blockquote><ul><li>索引名称切片<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2[<span class="string">"aa"</span>:<span class="string">"eee"</span>]</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>包含末端</p></blockquote><h2 id="修改Series的值"><a href="#修改Series的值" class="headerlink" title="修改Series的值"></a>修改Series的值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s2[index] = value （index表示需要修改的值所对应的索引）</span><br><span class="line">s2[i] = value （i表示需要修改的值所对应的索引位置）</span><br><span class="line">s2[<span class="string">"aa"</span>] = <span class="number">100</span></span><br><span class="line">s2[<span class="number">2</span>] = <span class="number">120</span></span><br></pre></td></tr></table></figure><h2 id="添加Series的值"><a href="#添加Series的值" class="headerlink" title="添加Series的值"></a>添加Series的值</h2><ul><li>返回一个新的Series，不修改原来的Series<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.append(pd.Series([value1,value2,...],index = [index1,index2,...]))</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加Series的值,并返回一个新的Series</span></span><br><span class="line">s2.append(pd.Series([<span class="number">50</span>,<span class="number">60</span>],index=[<span class="string">"a1"</span>,<span class="string">"a2"</span>]))</span><br></pre></td></tr></table></figure><ul><li>直接在原来的基础上修改Series<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2[<span class="string">"new index"</span>] = value</span><br></pre></td></tr></table></figure></li></ul><ul><li>通过<code>append</code>来添加Series的值，特点是：</li></ul><ol><li>返回一个新的Series</li><li>批量修改</li></ol><ul><li>通过<code>s2[&quot;new index&quot;] = value</code>这种方式来添加的值，特点是:</li></ul><ol><li>直接在原来的Series基础上增加值</li><li>每次只能增加一个值</li></ol><h2 id="删除Series的值"><a href="#删除Series的值" class="headerlink" title="删除Series的值"></a>删除Series的值</h2><p><code>del s2[index]</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除y索引对应的99这个值</span></span><br><span class="line"><span class="keyword">del</span> s2[<span class="string">"y"</span>]</span><br></pre></td></tr></table></figure></p><h2 id="过滤Series的值"><a href="#过滤Series的值" class="headerlink" title="过滤Series的值"></a>过滤Series的值</h2><blockquote><p>通过布尔选择器（条件筛选）来过滤掉一些值，从而得到满足条件的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s2[s2 &lt; value]</span><br><span class="line">s2[s2 &gt; value]</span><br><span class="line">s2[s2 == value]</span><br><span class="line">s2[s2 != value]</span><br><span class="line"></span><br><span class="line"><span class="comment">#单条件筛选</span></span><br><span class="line">s2[s2 &gt; <span class="number">90</span>]</span><br><span class="line"><span class="comment">#多条件筛选</span></span><br><span class="line">s2[(s2 &gt; <span class="number">50</span>) | (s2 &lt; <span class="number">14</span>)]</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="Series的缺失值处理"><a href="#Series的缺失值处理" class="headerlink" title="Series的缺失值处理"></a>Series的缺失值处理</h2><ul><li>创建一个带有缺失值的Series<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.nan</span></span><br><span class="line">s = pd.Series([<span class="number">10</span>,np.nan,<span class="number">15</span>,<span class="number">19</span>,<span class="keyword">None</span>])</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>提示：None值会被当做NA处理<br>*</p><ul><li>判断是否有缺失值<br><code>isnull（）</code></li></ul></blockquote><ul><li>判断s中的缺失值<br><code>s.isnull()</code></li><li>如果需要取出这些缺失值，则通过布尔选择器来筛选出来<br><code>s[s.isnull()]</code></li><li><p>删除缺失值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dropna()会删除掉所有缺失值NaN，并返回一个新的Series</span></span><br><span class="line"><span class="comment">#原有的Series并未发生改变</span></span><br><span class="line">s.dropna()</span><br><span class="line"><span class="comment">#如果希望原有的Series发生改变，</span></span><br><span class="line"><span class="comment">#可以将s.dropna（）返回的新Series直接赋值给原来的Series</span></span><br><span class="line">s = s.dropna()</span><br></pre></td></tr></table></figure><blockquote><p>此外，我们也可以通过过滤的方式来达到一样的删除效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data[~data.isnull()]</span><br><span class="line">data[data.notnull()]</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">10</span>,np.nan,<span class="number">15</span>,<span class="number">19</span>,<span class="keyword">None</span>]) <span class="comment">#初始化一下s</span></span><br><span class="line"> <span class="comment">#依然是返回一个新的Series，波浪号~表示否定、非的意思</span></span><br><span class="line">s[~s.isnull()]</span><br><span class="line"><span class="comment">#也可以使用 s.notnull</span></span><br><span class="line"><span class="comment">#通过notnull（）也能实现，同样也是返回一个新的Series</span></span><br><span class="line">s[s.notnull()]</span><br></pre></td></tr></table></figure></blockquote></li><li><p>填充缺失值<br><code>fillna（）</code> :用指定值或插值的方式填充缺失值</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">用指定值填充缺失值</span><br><span class="line"><span class="comment">#用0填充缺失值,返回的依然是一个新的Series</span></span><br><span class="line">s.fillna(value=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果希望直接修改原Series</span></span><br><span class="line"><span class="comment">#一种方法是之前说的直接赋值，另一种是添加参数inplace=True</span></span><br><span class="line">s.fillna(value=<span class="number">0</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#用插值填充缺失值</span></span><br><span class="line"><span class="comment">#初始化一下s</span></span><br><span class="line">s = pd.Series([<span class="number">10</span>,np.nan,<span class="number">15</span>,<span class="number">19</span>,<span class="keyword">None</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#向前填充（ffill，全称是front fill）</span></span><br><span class="line"></span><br><span class="line">s.fillna(method=<span class="string">"ffill"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#向后填充（bfill，全称是back fill）</span></span><br><span class="line"></span><br><span class="line">s.fillna(method=<span class="string">"bfill"</span>)`</span><br></pre></td></tr></table></figure></li></ul><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个Series</span></span><br><span class="line">s3 = pd.Series([<span class="number">10</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">20</span>],index=list(<span class="string">"gadkb"</span>))</span><br><span class="line">s3</span><br><span class="line">g    <span class="number">10</span></span><br><span class="line">a    <span class="number">15</span></span><br><span class="line">d     <span class="number">8</span></span><br><span class="line">k     <span class="number">4</span></span><br><span class="line">b    <span class="number">20</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line"><span class="comment">#（1）根据索引排序</span></span><br><span class="line"><span class="comment">#sort_index() 默认升序，如果添加参数ascending=False,则降序排列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(2)根据索引升序排列</span></span><br><span class="line"><span class="comment"># 根据值排序 sort_values</span></span><br><span class="line">s3.sort_index()</span><br><span class="line">a    <span class="number">15</span></span><br><span class="line">b    <span class="number">20</span></span><br><span class="line">d     <span class="number">8</span></span><br><span class="line">g    <span class="number">10</span></span><br><span class="line">k     <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="comment">#根据索引降序排列</span></span><br><span class="line">s3.sort_index(ascending=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h2 id="排名"><a href="#排名" class="headerlink" title="排名"></a>排名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rank（）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个用来排名的Series</span></span><br><span class="line">s4 = pd.Series([<span class="number">2</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">s4</span><br><span class="line"><span class="number">0</span>     <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     <span class="number">5</span></span><br><span class="line"><span class="number">2</span>    <span class="number">15</span></span><br><span class="line"><span class="number">3</span>     <span class="number">7</span></span><br><span class="line"><span class="number">4</span>     <span class="number">1</span></span><br><span class="line"><span class="number">5</span>     <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中国式排名</span></span><br><span class="line">s4.rank(ascending=<span class="keyword">False</span>,method=<span class="string">"dense"</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">2.0</span></span><br><span class="line">    <span class="number">4</span>    <span class="number">5.0</span></span><br><span class="line">    <span class="number">5</span>    <span class="number">4.0</span></span><br></pre></td></tr></table></figure><h2 id="Series的描述性统计"><a href="#Series的描述性统计" class="headerlink" title="Series的描述性统计"></a>Series的描述性统计</h2><ul><li>值的计数 <code>Series.value_counts（）</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个Series</span></span><br><span class="line">s5 = pd.Series([<span class="number">100</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">75</span>,<span class="number">24</span>,<span class="number">100</span>])</span><br><span class="line">s5</span><br><span class="line"></span><br><span class="line"><span class="comment">#值的计数 Series.value_counts（）</span></span><br><span class="line">s5.value_counts()</span><br><span class="line"><span class="number">100</span>    <span class="number">3</span></span><br><span class="line"><span class="number">75</span>     <span class="number">1</span></span><br><span class="line"><span class="number">50</span>     <span class="number">1</span></span><br><span class="line"><span class="number">24</span>     <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#最小值 s5.min（）</span></span><br><span class="line">s5.min()</span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="comment">#最大值 s5.max（）</span></span><br><span class="line">s5.max()</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="comment">#中位数 s5.median（）</span></span><br><span class="line">s5.median()</span><br><span class="line"><span class="comment">#均值 s5.mean（）</span></span><br><span class="line">s5.mean()</span><br><span class="line"><span class="number">74.83333333333333</span></span><br><span class="line"><span class="comment">#求和 s5.sum（）</span></span><br><span class="line">s5.sum()</span><br><span class="line"><span class="number">449</span></span><br><span class="line"><span class="comment">#标准差 s5.std()</span></span><br><span class="line">s5.std()</span><br><span class="line"><span class="number">31.940048006643114</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#描述性统计 s5.describe（）</span></span><br><span class="line">s5.describe().round(<span class="number">1</span>)      <span class="comment"># round表示小数点后多少位</span></span><br><span class="line">count      <span class="number">6.0</span></span><br><span class="line">mean      <span class="number">74.8</span></span><br><span class="line">std       <span class="number">31.9</span></span><br><span class="line">min       <span class="number">24.0</span></span><br><span class="line"><span class="number">25</span>%       <span class="number">56.2</span></span><br><span class="line"><span class="number">50</span>%       <span class="number">87.5</span></span><br><span class="line"><span class="number">75</span>%      <span class="number">100.0</span></span><br><span class="line">max      <span class="number">100.0</span></span><br></pre></td></tr></table></figure><h2 id="Series的向量化运算"><a href="#Series的向量化运算" class="headerlink" title="Series的向量化运算"></a>Series的向量化运算</h2><blockquote><p>可对Series进行批量操作，并且返回一个新的Series<br>并不会在原基础上直接修改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s5 + <span class="number">1000</span></span><br><span class="line">s5 * <span class="number">2</span></span><br><span class="line">s5 / <span class="number">10</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>自动对齐相同索引的数据,不同索引的数据对不上，则显示NaN<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s6 = pd.Series([<span class="number">35000</span>,<span class="number">40000</span>,<span class="number">71000</span>,<span class="number">5500</span>],index=list(<span class="string">"abcd"</span>))</span><br><span class="line">s7 = pd.Series([<span class="number">222</span>,<span class="number">35000</span>,<span class="number">4000</span>,<span class="number">2222</span>],index=list(aqtb))</span><br><span class="line">s6 + s7</span><br><span class="line">a    <span class="number">35222.0</span></span><br><span class="line">b    <span class="number">42222.0</span></span><br><span class="line">c        NaN</span><br><span class="line">d        NaN</span><br><span class="line">q        NaN</span><br><span class="line">t        NaN</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;帮助函数 S.method?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Pandas&quot;&gt;&lt;a href=&quot;#Pandas&quot; class=&quot;headerlink&quot; title=&quot;Pandas&quot;&gt;&lt;/a&gt;Pandas&lt;/h1&gt;&lt;h2 id=&quot;1-什么是Series&quot;&gt;&lt;a href=&quot;#1-什么是Series&quot; class=&quot;headerlink&quot; title=&quot;1.什么是Series&quot;&gt;&lt;/a&gt;1.什么是Series&lt;/h2&gt;&lt;p&gt;简单来说：一维带标签（索引）的数组&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python_Compute" scheme="http://yoursite.com/tags/Python-Compute/"/>
    
  </entry>
  
  <entry>
    <title>Python_Spider_requests</title>
    <link href="http://yoursite.com/2018/07/25/Python/Python%E7%88%AC%E8%99%AB/requests/"/>
    <id>http://yoursite.com/2018/07/25/Python/Python爬虫/requests/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:38:32.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><p><img src="https://note.youdao.com/yws/public/resource/9ff3d724040128e04e20deb0d34789df/xmlnote/5E38A555259949968A64320DF3D647FD/521" alt="image"></p><a id="more"></a><h2 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r=requests.get(url,timeout30)</span><br><span class="line">r.raise_for_status  <span class="comment">#如果状态不是200，引发HTTPError异常</span></span><br><span class="line">r.encoding = r.apparent_encoding    <span class="comment"># 将编码格式转换为响应内容的编码格式</span></span><br><span class="line"><span class="keyword">return</span> r.text</span><br><span class="line">ecxept:</span><br><span class="line"><span class="keyword">return</span> <span class="comment">#产生异常</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span>  RequestException</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_state</span><span class="params">(rep)</span>:</span></span><br><span class="line">    url = <span class="string">"  "</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      rep = requests.get(url)</span><br><span class="line">      <span class="keyword">if</span> rep.status_code == <span class="number">200</span>:  <span class="comment"># 如果状态码正常，则返回url的内容</span></span><br><span class="line">        <span class="keyword">return</span> rep.text</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><blockquote><p>requests是python实现的简单易用的HTTP库，使用起来比urllib简洁很多<br>requests.get()用于请求目标网站，类型是一个HTTPresponse类型</p></blockquote><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(response.status_code)  <span class="comment"># 打印状态码</span></span><br><span class="line">print(response.url)          <span class="comment"># 打印请求url</span></span><br><span class="line">print(response.headers)      <span class="comment"># 打印头信息</span></span><br><span class="line">print(response.cookies)      <span class="comment"># 打印cookie信息</span></span><br><span class="line">print(response.text)  <span class="comment">#以文本形式打印网页源码</span></span><br><span class="line">print(response.content) <span class="comment">#以字节流形式打印</span></span><br></pre></td></tr></table></figure><h4 id="GET请求相关内容"><a href="#GET请求相关内容" class="headerlink" title="GET请求相关内容"></a>GET请求相关内容</h4><h5 id="传入参数"><a href="#传入参数" class="headerlink" title="传入参数"></a>传入参数</h5><ul><li><p><strong>第一种直接将参数放在url内</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#url/get?参数&amp;参数</span></span><br><span class="line">response = requests.get(http://httpbin.org/get?name=gemey&amp;age=22)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></li><li><p><strong>第二种先将参数填写在dict中，发起请求时params参数指定为dict</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'Jedieal'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/get'</span>, params=data)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></li></ul><p>案例 百度搜索<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">kv = &#123;<span class="string">'wd'</span>:<span class="string">'python'</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">"http://www.baidu.com/s"</span>,params=kv)</span><br></pre></td></tr></table></figure></p><p><br></p><h5 id="请求添加头信息"><a href="#请求添加头信息" class="headerlink" title="请求添加头信息"></a>请求添加头信息</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">heads = &#123;&#125;</span><br><span class="line">heads[<span class="string">'User-Agent'</span>] = <span class="string">'Mozilla/5.0 '</span> \</span><br><span class="line">                          <span class="string">'(Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 '</span> \</span><br><span class="line">                          <span class="string">'(KHTML, like Gecko) Version/5.1 Safari/534.50'</span></span><br><span class="line"> response = requests.get(<span class="string">'http://www.baidu.com'</span>,headers=headers)</span><br></pre></td></tr></table></figure><p>#####访问响应头字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r.headers[<span class="string">'Content-Type]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'</span>application/json<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">r.headers.get('</span>content-type<span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'</span>application/json<span class="string">'</span></span><br></pre></td></tr></table></figure></p><p><br></p><h5 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h5><p>同添加headers方法，代理参数也要是一个dict<br>: 这里使用requests库爬取了IP代理网站的IP与端口和类型<br>  因为是免费的，使用的代理地址很快就失效了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    proxy = &#123;</span><br><span class="line">        <span class="string">'http'</span>: <span class="string">'120.25.253.234:812'</span>,</span><br><span class="line">        <span class="string">'https'</span>: <span class="string">'163.125.222.244:8123'</span></span><br><span class="line">    &#125;</span><br><span class="line">    heads = &#123;&#125;</span><br><span class="line">    heads[<span class="string">'User-Agent'</span>] = <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0'</span></span><br><span class="line">    req = requests.get(url, headers=heads,proxies=proxy)</span><br><span class="line">    html = req.text</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用正则匹配IP</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ipport</span><span class="params">(html)</span>:</span></span><br><span class="line">    regex = <span class="string">r'&lt;td data-title="IP"&gt;(.+)&lt;/td&gt;'</span></span><br><span class="line">    iplist = re.findall(regex, html)</span><br><span class="line">    regex2 = <span class="string">'&lt;td data-title="PORT"&gt;(.+)&lt;/td&gt;'</span></span><br><span class="line">    portlist = re.findall(regex2, html)</span><br><span class="line">    regex3 = <span class="string">r'&lt;td data-title="类型"&gt;(.+)&lt;/td&gt;'</span></span><br><span class="line">    typelist = re.findall(regex3, html)</span><br><span class="line">    sumray = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> iplist:</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> portlist:</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> typelist:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        a = t+<span class="string">','</span>+i + <span class="string">':'</span> + p</span><br><span class="line">        sumray.append(a)</span><br><span class="line">    print(<span class="string">'高匿代理'</span>)</span><br><span class="line">    print(sumray)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    url = <span class="string">'http://www.kuaidaili.com/free/'</span></span><br><span class="line">    get_ipport(get_html(url))</span><br></pre></td></tr></table></figure></p><p><br></p><h5 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(response.cookies)</span><br><span class="line">print(type(response.cookies))</span><br><span class="line"><span class="comment">#字典形式，利用items()遍历</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> response.cookies.items():</span><br><span class="line">   print(k+<span class="string">':'</span>+v)</span><br></pre></td></tr></table></figure><p><br></p><h5 id="解析json"><a href="#解析json" class="headerlink" title="解析json"></a>解析json</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(response.text)</span><br><span class="line"><span class="comment">#response.json()方法同json.loads(response.text)</span></span><br><span class="line">print(response.json())</span><br><span class="line">print(type(response.json()))</span><br></pre></td></tr></table></figure><p><br></p><h5 id="保存一个二进制文件"><a href="#保存一个二进制文件" class="headerlink" title="保存一个二进制文件"></a>保存一个二进制文件</h5><blockquote><p>二进制内容为response.content<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://img.ivsky.com/img/tupian/pre/201708/30/kekeersitao-002.jpg'</span>)</span><br><span class="line">b = response.content</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'F://fengjing.jpg'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(b)</span><br></pre></td></tr></table></figure></p></blockquote><p><br></p><h5 id="超时异常捕获"><a href="#超时异常捕获" class="headerlink" title="超时异常捕获"></a>超时异常捕获</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ReadTimeout</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    res = requests.get(<span class="string">'http://httpbin.org'</span>, timeout=<span class="number">0.1</span>)</span><br><span class="line">    print(res.status_code)</span><br><span class="line"><span class="keyword">except</span> ReadTimeout:</span><br><span class="line">    print(<span class="string">'timeout'</span>)</span><br></pre></td></tr></table></figure><p><br></p><h5 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h5><p>使用try…except来捕获异常</p><p><strong>Exceptions:</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ReadTimeout,HTTPError,RequestException</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://www.baidu.com'</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line">    print(response.status_code)</span><br><span class="line"><span class="keyword">except</span> ReadTimeout:</span><br><span class="line">    print(<span class="string">'timeout'</span>)</span><br><span class="line"><span class="keyword">except</span> HTTPError:</span><br><span class="line">    print(<span class="string">'httperror'</span>)</span><br><span class="line"><span class="keyword">except</span> RequestException:</span><br><span class="line">    print(<span class="string">'reqerror'</span>)</span><br></pre></td></tr></table></figure></p><p><br></p><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><blockquote><p>通常，你想要发送一些编码为表单形式的数据——非常像一个 HTML 表单。要实现这个，只需简单地传递一个字典给 data 参数。你的数据字典在发出请求时会自动编码为表单形式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(<span class="string">"http://httpbin.org/post"</span>, data=payload)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>可以为 data 参数传入一个元组列表。在表单中多个元素使用同一 key 的时候，这种方式尤其有效：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload = ((<span class="string">'key1'</span>, <span class="string">'value1'</span>), (<span class="string">'key1'</span>, <span class="string">'value2'</span>))</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, data=payload)</span><br><span class="line">print(r.text)</span><br><span class="line">&gt;&gt;&gt;<span class="string">"form"</span>: &#123;</span><br><span class="line">    <span class="string">"key1"</span>: [</span><br><span class="line">      <span class="string">"value1"</span>,</span><br><span class="line">      <span class="string">"value2"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>很多时候你想要发送的数据并非编码为表单形式的。如果你传递一个 <strong>string</strong> 而不是一个<strong>dict</strong>，那么数据会被直接发布出去。<br>可以使用 <strong>json</strong> 参数直接传递，然后它就会被自动编码。这是 2.4.2 版的新加功能：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'https://api.github.com/some/endpoint'</span></span><br><span class="line">payload = &#123;<span class="string">'some'</span>: <span class="string">'data'</span>&#125;</span><br><span class="line">r = requests.post(url, json=payload)</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;requests&quot;&gt;&lt;a href=&quot;#requests&quot; class=&quot;headerlink&quot; title=&quot;requests&quot;&gt;&lt;/a&gt;requests&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/public/resource/9ff3d724040128e04e20deb0d34789df/xmlnote/5E38A555259949968A64320DF3D647FD/521&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python_spider" scheme="http://yoursite.com/tags/Python-spider/"/>
    
  </entry>
  
  <entry>
    <title>Python进阶</title>
    <link href="http://yoursite.com/2018/07/25/Python/Python_Advanced/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B_1/"/>
    <id>http://yoursite.com/2018/07/25/Python/Python_Advanced/函数式编程_1/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:34:23.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><a id="more"></a><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>写代码要遵循==开发封闭==原则，虽然这个原则是用的面向对象开发，但是也适用于函数式编程，简单来说，它规定<strong>已经实现的功能代码不允许被修改</strong>，但可以被扩展，即：</p><blockquote><p>封闭：已实现的功能代码块</p></blockquote><blockquote><p>开放：对扩展开发</p></blockquote><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># 验证1</span></span><br><span class="line">        <span class="comment"># 验证2</span></span><br><span class="line">        <span class="comment"># 验证3</span></span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@w1       # 相当于执行了 w1(f1())</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br></pre></td></tr></table></figure><p>当写完这段代码后（函数未被执行、未被执行、未被执行），python解释器就会从上到下解释代码，步骤如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def w1(func):  ==&gt;将w1函数加载到内存</span><br><span class="line"><span class="meta">@w1</span></span><br></pre></td></tr></table></figure></p><p>没错，从表面上看解释器仅仅会解释这两句代码，<strong>因为函数在没有被调用之前其内部代码不会被执行。</strong></p><p>从表面上看解释器着实会执行这两句，但是<br> @w1 这一句代码里却有大文章</p><p> @函数名<br> :  是python的一种<strong>语法糖</strong>。</p><p>如上例 <code>@w1</code>内部会执行以下操作<br>: 执行w1函数，并将 <code>@w1</code> 下面的 函数 作为 w1 函数的<strong>参数</strong><br>即：<code>@w1</code> 等价于 <code>w1(f1)</code>。</p><p>所以，内部就会去执行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span>:</span></span><br><span class="line">    <span class="comment">#验证</span></span><br><span class="line">    <span class="keyword">return</span> f1() <span class="comment"># func是参数，此时 func 等于 f1</span></span><br><span class="line"><span class="keyword">return</span> inner <span class="comment"># 返回的 inner，inner代表的是函数，非执行函数</span></span><br><span class="line"><span class="comment"># 其实就是将原来的 f1 函数塞进另外一个函数中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将执行完的 w1 函数返回值赋值给@w1下面的函数的函数名</span></span><br><span class="line"><span class="comment"># w1函数的返回值是：</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">inner</span>:</span></span><br><span class="line">        <span class="comment">#验证</span></span><br><span class="line">        <span class="keyword">return</span> 原来f1()  <span class="comment"># 此处的 f1 表示原来的f1函数</span></span><br><span class="line"><span class="comment"># 然后，将此返回值再重新赋值给 f1，即：</span></span><br><span class="line"></span><br><span class="line">new_f1 = <span class="function"><span class="keyword">def</span> <span class="title">inner</span>:</span></span><br><span class="line">            <span class="comment">#验证</span></span><br><span class="line">            <span class="keyword">return</span> 原来f1()</span><br></pre></td></tr></table></figure></p><p>如此一来， 即执行了验证的功能，又执行了原来 f 函数的内容，并将原 f1 函数返回值,<br> 返回给业务调用着。</p><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 一个参数：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(arg)</span>:</span></span><br><span class="line">        <span class="comment"># 验证1</span></span><br><span class="line">        <span class="comment"># 验证2</span></span><br><span class="line">        <span class="comment"># 验证3</span></span><br><span class="line">        <span class="keyword">return</span> func(arg)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个参数：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(arg1,arg2)</span>:</span></span><br><span class="line">        <span class="comment"># 验证1</span></span><br><span class="line">        <span class="comment"># 验证2</span></span><br><span class="line">        <span class="comment"># 验证3</span></span><br><span class="line">        <span class="keyword">return</span> func(arg1,arg2)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(arg1,arg2)</span>:</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br></pre></td></tr></table></figure><h5 id="问题-装饰具有处理n个参数的函数的装饰器？"><a href="#问题-装饰具有处理n个参数的函数的装饰器？" class="headerlink" title="问题: 装饰具有处理n个参数的函数的装饰器？"></a>问题: 装饰具有处理n个参数的函数的装饰器？</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 验证1</span></span><br><span class="line">        <span class="comment"># 验证2</span></span><br><span class="line">        <span class="comment"># 验证3</span></span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(arg1,arg2,arg3)</span>:</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br></pre></td></tr></table></figure><h5 id="问题：一个函数可以被多个装饰器装饰吗？"><a href="#问题：一个函数可以被多个装饰器装饰吗？" class="headerlink" title="问题：一个函数可以被多个装饰器装饰吗？"></a>问题：一个函数可以被多个装饰器装饰吗？</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 验证1</span></span><br><span class="line">        <span class="comment"># 验证2</span></span><br><span class="line">        <span class="comment"># 验证3</span></span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w2</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 验证1</span></span><br><span class="line">        <span class="comment"># 验证2</span></span><br><span class="line">        <span class="comment"># 验证3</span></span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="meta">@w2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(arg1,arg2,arg3)</span>:</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br></pre></td></tr></table></figure><h2 id="Lambda函数（匿名函数）"><a href="#Lambda函数（匿名函数）" class="headerlink" title="Lambda函数（匿名函数）"></a>Lambda函数（匿名函数）</h2><ul><li>函数 ： 最大程度地复用代码<ul><li>存在问题：若函数很小，很短，则会造成啰嗦，不方便阅读代码</li></ul></li><li>lambda表达式<ul><li>一个表达式，函数体相对简单</li><li>用法<ul><li>以lambda开头</li><li>紧跟一定的参数</li><li>参数后面用冒号和表达式主题分开</li><li>只是一个表达式，没有return</li></ul></li><li>实例<ul><li><code>stm = lambda x: 100 * x</code></li><li><code>stm(89)</code> ==&gt;<code>8900</code></li></ul></li></ul></li></ul><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><ul><li>定义 ： 把<strong>函数作为参数</strong>使用的函数</li><li>注意<ul><li>函数名称就是一个变量，即函数可以作为参数</li></ul></li><li>举例<br><code>`</code>python<br>def funA(n):<br>return n * 100</li></ul><p>def funB(n):<br>  return funA(n) * 3</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数式编程&quot;&gt;&lt;a href=&quot;#函数式编程&quot; class=&quot;headerlink&quot; title=&quot;函数式编程&quot;&gt;&lt;/a&gt;函数式编程&lt;/h1&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python_Spider_Regex</title>
    <link href="http://yoursite.com/2018/07/25/Python/Python%E7%88%AC%E8%99%AB/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8FRegex/"/>
    <id>http://yoursite.com/2018/07/25/Python/Python爬虫/正则表达式Regex/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:44:13.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式-Regex"><a href="#正则表达式-Regex" class="headerlink" title="正则表达式 Regex"></a>正则表达式 Regex</h1><ul><li>1.正则表达式定义：正则表达式是对字符串操作的一种<code>逻辑公式</code>，就是用事先定义好的一些<strong>特定字符</strong>和这些<strong>特定字符的组合</strong>，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑</li></ul><a id="more"></a><ul><li>2.需要取出来的就(.*?)</li><li>3.(.<em> ) 贪婪模式———将标签内所有复合内容提取<br>（.</em>？） 非常模式——只提取有用部分</li></ul><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center"> .</td><td style="text-align:left">匹配所有英文字符</td><td></td></tr><tr><td style="text-align:center">a[bcd]e</td><td style="text-align:left">匹配字符集 匹配 a()e ()内bcd任意一个都可匹配</td></tr><tr><td style="text-align:center"> \d</td><td style="text-align:left">匹配数字  “\D”：匹配除数字外</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:left">匹配空格，换行符等  “\S”:匹配非空格，换行符</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:left">匹配数字和字母  “\W”: 匹配非数字和字母</td></tr><tr><td style="text-align:center">^abc</td><td style="text-align:left">匹配开头</td></tr><tr><td style="text-align:center">abc$</td><td style="text-align:left">匹配结尾</td></tr><tr><td style="text-align:center">（”abc”,”abcABC”,re.I)</td><td style="text-align:left">不区分大小写的匹配</td></tr><tr><td style="text-align:center">（”abc”,”abc\nABC”,re.S)</td><td style="text-align:left">避免换行符等干扰提取内容</td></tr><tr><td style="text-align:center">ab?</td><td style="text-align:left">在a后面匹配一个或0个b</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:left">在a后面匹配至少一个b</td></tr><tr><td style="text-align:center">ab*</td><td style="text-align:left">在a后面匹配至少0个b</td></tr></tbody></table><blockquote><p>当既要不分大小写，又要去除换行等影响，则(或运算)<br><figure class="highlight plain"><figcaption><span>| re.S)```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">[TOC]</span><br><span class="line">### 匹配模式</span><br><span class="line">```Python</span><br><span class="line"> #匹配模式有：</span><br><span class="line">1)re.I(re.IGNORECASE): 忽略大小写</span><br><span class="line">2)re.M(MULTILINE): 多行模式，改变’^’和’$’的行为</span><br><span class="line">3)re.S(DOTALL): 点任意匹配模式，改变’.’的行为,可匹配换行符</span><br><span class="line">4)re.L(LOCALE): 使预定字符类 \w \W \b \B \s \S 取决于当前区域设定</span><br><span class="line">5)re.U(UNICODE): 使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性</span><br><span class="line">6)re.X(VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s= <span class="string">"&lt;div&gt;hello\nworld&lt;/div&gt;"</span></span><br><span class="line"><span class="comment">#去除\n的影响</span></span><br><span class="line">m = re.findall(<span class="string">r"&lt;div&gt;(.*)&lt;/div&gt;"</span>,s,re.S)</span><br></pre></td></tr></table></figure><p><br></p><h3 id="re-–方法"><a href="#re-–方法" class="headerlink" title="re –方法"></a>re –方法</h3><h4 id="1、findall-amp-find"><a href="#1、findall-amp-find" class="headerlink" title="1、findall &amp; find"></a>1、findall &amp; find</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># re.findall(pattern, string)</span></span><br><span class="line"><span class="comment"># pattern 表示我们希望寻找的子字符串</span></span><br><span class="line"><span class="comment"># string 表示我们要在其中查找的主字符串</span></span><br><span class="line"></span><br><span class="line">content = re.findall(<span class="string">r'代码内容 .*?代码内容'</span>，url.text，re.S)</span><br><span class="line"><span class="comment">#若在代码内容中有特殊字符，需要被转义，例如r'&lt;script\(\)&gt;;&lt;/script&gt;'</span></span><br><span class="line"><span class="comment">#使用re.S的作用为在代码中有许多回车与换行，若不加，则可能匹配不到内容</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：至少两个参数，一个为正则表达式，另一个为源代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">content = requests.get(url).content.decode(<span class="string">'gb2312'</span>)</span><br><span class="line"><span class="comment">#转义双引号</span></span><br><span class="line">start = content.find(<span class="string">'&lt;map name=\"map_86\" id=\"map_86\"'</span>)</span><br><span class="line">end = content.find(<span class="string">'&lt;/map&gt;'</span>)</span><br><span class="line">content = content[start:end + len(<span class="string">'&lt;/map&gt;'</span>)].strip()</span><br><span class="line"><span class="keyword">print</span> (content)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="2、re-search"><a href="#2、re-search" class="headerlink" title="2、re.search()"></a>2、re.search()</h4><p>re.search()<br>: 匹配的是一个模式在一个字符串中的第一个实例，然后以 re 匹配对象的形式返回它。</p><p>因为 <code>re.search()</code> 返回的是一个 re 匹配对象，所以我们不能直接通过 <code>print</code> 展示其中的内容。<br>我们必须首先为其应用<code>group()</code> 函数。</p><blockquote><p>group()<br>： 函数的作用是将匹配对象转换成字符串。<code>re.search().group()</code></p></blockquote><p>group(0)则是整个匹配的内容，返回一个实体对象<br>group(1)则是匹配第一个括号里面的内容，取出括号里匹配的实体对象<br>group(2)则是匹配第二个括号里面的内容，取出括号里匹配的实体对象<br>group(0,1,2)则返回一个实体对象的元组</p><h4 id="3、re-split"><a href="#3、re-split" class="headerlink" title="3、re.split()"></a>3、re.split()</h4><p>分割字符<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#不保留匹配项</span></span><br><span class="line">m = re.split(<span class="string">'\d+'</span> , <span class="string">'123abc321cba'</span>)</span><br><span class="line"><span class="keyword">print</span> m</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n"</span></span><br><span class="line"><span class="comment">#保留匹配项,加（）</span></span><br><span class="line">m = re.split(<span class="string">'(\d+)'</span> , <span class="string">'123abc321cba'</span>)</span><br><span class="line"><span class="keyword">print</span> m</span><br></pre></td></tr></table></figure></p><h4 id="4、re-sub"><a href="#4、re-sub" class="headerlink" title="4、re.sub()"></a>4、re.sub()</h4><p>re.sub()<br>: 是另一个很好用的 re 函数。顾名思义，它的功能是替换一个字符串的一部分。</p><p><strong>有三个参数<br>第一个是所要替换的子字符串，第二个是用来替换前者的字符串，第三个是主字符串本身</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sender = re.search(<span class="string">"From:.*"</span>, fh)</span><br><span class="line">address = sender.group()</span><br><span class="line">email = re.sub(<span class="string">"From"</span>, <span class="string">"Email"</span>, address)</span><br><span class="line">print(address)</span><br><span class="line">print(email)</span><br></pre></td></tr></table></figure></p><p><br></p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#小操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.以列表形式储存数据</span></span><br><span class="line">output = []</span><br><span class="line"><span class="comment">#2.去除空格</span></span><br><span class="line">output.append(content[<span class="number">0</span>].replace(<span class="string">"\n"</span>,<span class="string">""</span>))</span><br><span class="line"><span class="comment">#3.设置爬虫休眠时间,防止爬取速度过快而被封</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果是多次调用某个正则，则最好先编译后使用</span></span><br><span class="line">p = re.compile(<span class="string">"^abc"</span>)</span><br><span class="line">m1 = re.findall(<span class="string">"abc\nabc"</span>)</span><br><span class="line">m2 = re.findall(<span class="string">"abced\nsdf"</span>)</span><br><span class="line">m3 = re.findall(<span class="string">"dfsfd\nabcdf"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#函数re.compile将正则表达式（以字符串书写的）转换为模式对象，可以实现更加有效的匹配。例子：</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text = <span class="string">"JGood is a handsome boy, he is cool, clever, and so on..."</span></span><br><span class="line">re.findall(<span class="string">r'\w*oo\w*'</span>, text)    <span class="comment">#查找所有包含'oo'的单词</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用compile函数：</span></span><br><span class="line"><span class="comment">#导入re模块：</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text = “JGood <span class="keyword">is</span> a handsome boy, he <span class="keyword">is</span> cool, clever, <span class="keyword">and</span> so on…”</span><br><span class="line">regex = re.compile(r‘’\w*oo\w*’)</span><br><span class="line"><span class="keyword">print</span> regex.findall(text) <span class="comment">#查找所有包含’oo’的单词</span></span><br></pre></td></tr></table></figure><h3 id="内容清洗-去空白字符等"><a href="#内容清洗-去空白字符等" class="headerlink" title="内容清洗(去空白字符等)"></a>内容清洗(去空白字符等)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> html</span><br><span class="line"><span class="comment">#将编译后的内容去除转义符，即清洗内容</span></span><br><span class="line">url = <span class="string">"www..."</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">pattern = re.compile(<span class="string">"div..."</span>,re.S)</span><br><span class="line">body = html.unescape(response.text).replace(<span class="string">"&lt;br/&gt;"</span>,<span class="string">"\n"</span>)</span><br><span class="line">m = pattern.findall(body)</span><br></pre></td></tr></table></figure><h3 id="详细概念"><a href="#详细概念" class="headerlink" title="详细概念"></a>详细概念</h3><p>*匹配 0 个或更多个其左侧的模式的实例。也就是说它会查找重复的模式。<br>当我们查找重复模式时，我们说我们的搜索是<strong>贪婪匹配</strong>。<br>如果我们没有查找重复模式，我们可以说我们的搜索是<strong>非贪婪匹配</strong>或<strong>懒惰匹配</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正则表达式-Regex&quot;&gt;&lt;a href=&quot;#正则表达式-Regex&quot; class=&quot;headerlink&quot; title=&quot;正则表达式 Regex&quot;&gt;&lt;/a&gt;正则表达式 Regex&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.正则表达式定义：正则表达式是对字符串操作的一种&lt;code&gt;逻辑公式&lt;/code&gt;，就是用事先定义好的一些&lt;strong&gt;特定字符&lt;/strong&gt;和这些&lt;strong&gt;特定字符的组合&lt;/strong&gt;，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python_spider" scheme="http://yoursite.com/tags/Python-spider/"/>
    
  </entry>
  
  <entry>
    <title>Python_Chart</title>
    <link href="http://yoursite.com/2018/07/25/Python/Python%E7%BB%98%E5%9B%BE/pyecharts/"/>
    <id>http://yoursite.com/2018/07/25/Python/Python绘图/pyecharts/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:52:49.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、渲染图表"><a href="#1、渲染图表" class="headerlink" title="1、渲染图表"></a>1、渲染图表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line">bar = Bar(<span class="string">"我的第一个图表"</span>, <span class="string">"这里是副标题"</span>)</span><br><span class="line">bar.add(<span class="string">"服装"</span>, [<span class="string">"衬衫"</span>, <span class="string">"羊毛衫"</span>, <span class="string">"雪纺衫"</span>, <span class="string">"裤子"</span>, <span class="string">"高跟鞋"</span>, ], [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>])</span><br><span class="line"><span class="comment"># bar.print_echarts_options() # 该行只为了打印配置项，方便调试时使用</span></span><br><span class="line">bar.render()    <span class="comment"># 生成本地 HTML 文件</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><ul><li><code>add()</code><br>主要方法，用于添加图表的数据和设置各种配置项</li><li><code>print_echarts_options()</code><br>打印输出图表的所有配置项</li></ul><ul><li><code>render()</code><br>默认将会在根目录下生成一个 <code>render.html</code> 的文件，支持 path 参数，设置文件保存位置，如 <code>render(r&quot;e:\my_first_chart.html&quot;)</code>，文件用浏览器打开。<h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4></li></ul><ul><li>可以按右边的下载按钮将图片下载到本地，如果想要提供更多实用工具按钮，请在 add() 中设置 <code>is_more_utils</code> 为 <code>True</code></li></ul><h3 id="2、使用主题"><a href="#2、使用主题" class="headerlink" title="2、使用主题"></a>2、使用主题</h3><ul><li>安装主题插件<br><code>$ pip install echarts-themes-pypkg</code></li><li>设置主题<br><code>bar.use_theme(&#39;dark&#39;)</code></li></ul><h4 id="Note-1"><a href="#Note-1" class="headerlink" title="Note"></a>Note</h4><p>echarts 自带 dark 主题， pyecharts 也就自带了 dark。 echarts-themes-pypkg 提供了 <code>vintage</code>, <code>macarons</code>, <code>infographic</code>, <code>shine</code> 和 <code>roma</code> 主题。</p><h3 id="3、多次显示图表"><a href="#3、多次显示图表" class="headerlink" title="3、多次显示图表"></a>3、多次显示图表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar, Line</span><br><span class="line"><span class="keyword">from</span> pyecharts.engine <span class="keyword">import</span> create_default_environment</span><br><span class="line"></span><br><span class="line">bar = Bar(<span class="string">"我的第一个图表"</span>, <span class="string">"这里是副标题"</span>)</span><br><span class="line">bar.add(<span class="string">"服装"</span>, [<span class="string">"衬衫"</span>, <span class="string">"羊毛衫"</span>, <span class="string">"雪纺衫"</span>, <span class="string">"裤子"</span>, <span class="string">"高跟鞋"</span>, ], [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>])</span><br><span class="line"></span><br><span class="line">line = Line(<span class="string">"我的第一个图表"</span>, <span class="string">"这里是副标题"</span>)</span><br><span class="line">line.add(<span class="string">"服装"</span>, [<span class="string">"衬衫"</span>, <span class="string">"羊毛衫"</span>, <span class="string">"雪纺衫"</span>, <span class="string">"裤子"</span>, <span class="string">"高跟鞋"</span>], [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>])</span><br><span class="line"></span><br><span class="line">env = create_default_environment(<span class="string">"html"</span>)</span><br><span class="line"><span class="comment"># 为渲染创建一个默认配置环境</span></span><br><span class="line"><span class="comment"># create_default_environment(filet_ype)</span></span><br><span class="line"><span class="comment"># file_type: 'html', 'svg', 'png', 'jpeg', 'gif' or 'pdf'</span></span><br><span class="line"></span><br><span class="line">env.render_chart_to_file(bar, path=<span class="string">'bar.html'</span>)</span><br><span class="line">env.render_chart_to_file(line, path=<span class="string">'line.html'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、渲染图表&quot;&gt;&lt;a href=&quot;#1、渲染图表&quot; class=&quot;headerlink&quot; title=&quot;1、渲染图表&quot;&gt;&lt;/a&gt;1、渲染图表&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pyecharts &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Bar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar = Bar(&lt;span class=&quot;string&quot;&gt;&quot;我的第一个图表&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;这里是副标题&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar.add(&lt;span class=&quot;string&quot;&gt;&quot;服装&quot;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&quot;衬衫&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;羊毛衫&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;雪纺衫&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;裤子&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;高跟鞋&quot;&lt;/span&gt;, ], [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# bar.print_echarts_options() # 该行只为了打印配置项，方便调试时使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar.render()    &lt;span class=&quot;comment&quot;&gt;# 生成本地 HTML 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python_Draw" scheme="http://yoursite.com/tags/Python-Draw/"/>
    
  </entry>
  
  <entry>
    <title>Python_Spider_encode</title>
    <link href="http://yoursite.com/2018/07/25/Python/Python%E7%88%AC%E8%99%AB/%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/"/>
    <id>http://yoursite.com/2018/07/25/Python/Python爬虫/文件写入/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:42:29.135Z</updated>
    
    <content type="html"><![CDATA[<h6 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h6><p><code>a=u&#39;string&#39;</code> :u 代表 unicode<br><code>a.encode(&#39;utf-8&#39;)</code> : utf-8格式<br><code>a.decode(&#39;utf-8&#39;)</code> : 从utf-8转至Unicode格式</p><p><code>from sys import argv</code><br><code>script,filename = argv</code> 获取文件信息</p><a id="more"></a><p>####文件方法<br><code>f.readline()</code><br>: f文件会记录每次调用readline()后的读取位置，可以在下次被调用时读取下一行</p><p><code>fileObject.seek(offset[, whence])</code><br>: offset: 开始的偏移量，也就是代表需要移动偏移的字节数<br>whence：可选，默认值为 0。<br>给offset参数一个定义，表示要从哪个位置开始偏移；0代表从文件开头开始算起，1代表从当前位置开始算起，2代表从文件末尾算起。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fo.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">line = fo.readline()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"读取的数据为: %s"</span> % (line)</span><br><span class="line">f.seek(<span class="number">4</span>,<span class="number">1</span>) <span class="comment">#1为从当前位置，移动4个字节</span></span><br></pre></td></tr></table></figure><p><br></p><h6 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h6><p>r :只读</p><ul><li><code>f.close(),f.read(),f.readline()</code></li></ul><p>w :只写</p><ul><li>文件内有内容，则写入内容会<strong>覆盖*</strong>，若无内容，则会新写入内容<br>-<code>f.write()</code> <code>F.writelines()</code></li></ul><p>a :追加</p><ul><li><code>f.write()</code> 写入内容后，<code>f.close()</code>才会保存修改</li><li><p>若要强制修改。则使用 <code>f.flush()</code><br>rb :读写<br>wb :写读<br>ab :追加及读</p><p>方法 | 作用<br>:—: |:—:<br>f.seek(0) | 回到文件开头<br>f.tell(0) |告知当前所在位置<br>f.truncate()  |清空文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只读模式</span></span><br><span class="line">f = file(<span class="string">'myfile.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">  <span class="comment"># 去除换行符， 将 ： 前后分割</span></span><br><span class="line">  line =line.strip(<span class="string">'\n'</span>).split(<span class="string">':'</span>)</span><br><span class="line">  <span class="keyword">print</span> (line)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#图片，音频，zip的复制</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"test_01.png"</span>,<span class="string">"rb"</span>) <span class="keyword">as</span> f1:</span><br><span class="line">  <span class="keyword">with</span> open(<span class="string">"test_02.png"</span>,<span class="string">"wb"</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    f2.write(f1.read())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例如，以请求返回的二进制数据创建一张图片，你可以使用如下代码：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = Image.open(BytesIO(r.content))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fh = open(<span class="string">r"test_emails.txt"</span>, <span class="string">"r"</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意我们直接在目录路径之前使用了 r</span></span><br><span class="line"><span class="comment"># 这项技术会将一个字符串转换成一个原始字符串</span></span><br><span class="line"><span class="comment"># 这有助于避免由某些机器阅读字符的方式所导致的冲突</span></span><br><span class="line"><span class="comment"># 比如 Windows 中目录路径中的反斜杠</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;编码格式&quot;&gt;&lt;a href=&quot;#编码格式&quot; class=&quot;headerlink&quot; title=&quot;编码格式&quot;&gt;&lt;/a&gt;编码格式&lt;/h6&gt;&lt;p&gt;&lt;code&gt;a=u&amp;#39;string&amp;#39;&lt;/code&gt; :u 代表 unicode&lt;br&gt;&lt;code&gt;a.encode(&amp;#39;utf-8&amp;#39;)&lt;/code&gt; : utf-8格式&lt;br&gt;&lt;code&gt;a.decode(&amp;#39;utf-8&amp;#39;)&lt;/code&gt; : 从utf-8转至Unicode格式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;from sys import argv&lt;/code&gt;&lt;br&gt;&lt;code&gt;script,filename = argv&lt;/code&gt; 获取文件信息&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python_spider" scheme="http://yoursite.com/tags/Python-spider/"/>
    
  </entry>
  
  <entry>
    <title>Python_Spider_Selenium</title>
    <link href="http://yoursite.com/2018/07/25/Python/Python%E7%88%AC%E8%99%AB/selenium/"/>
    <id>http://yoursite.com/2018/07/25/Python/Python爬虫/selenium/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:38:55.609Z</updated>
    
    <content type="html"><![CDATA[<p>##自动化测试</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> selenium.webdriver</span><br><span class="line">driver = selenium.webdriver.<span class="string">'浏览器种类'</span>()</span><br><span class="line"></span><br><span class="line">url = <span class="string">" "</span></span><br><span class="line">driver.get(url)</span><br><span class="line"><span class="comment">#向url内发送内容</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">" "</span>).send_keys(<span class="string">" "</span>)</span><br><span class="line"><span class="comment">#模拟点击的动作</span></span><br><span class="line">driver.find_element_by_id(<span class="string">" "</span>).click()</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><br></p><p>####1、声明浏览器对象，访问页面并获取网页html（源代码）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line"><span class="comment"># browser.page_source是获取网页的全部html,即获取网页源代码</span></span><br><span class="line">print(browser.page_source)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="2、查找元素"><a href="#2、查找元素" class="headerlink" title="2、查找元素"></a>2、查找元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个元素</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line"><span class="comment"># 三种方式返回的是相同的值</span></span><br><span class="line">input_first = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input_second = browser.find_element_by_css_selector(<span class="string">'#q'</span>)</span><br><span class="line">input_third = browser.find_element_by_xpath(<span class="string">'//*[@id="q"]'</span>)</span><br><span class="line">print(input_first,input_second,input_third)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个元素，elements多个s</span></span><br><span class="line">input_first = browser.find_elements_by_id(<span class="string">'q'</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以使用通用的方法</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line"><span class="comment"># 第一个参数传入名称，第二个传入具体的参数</span></span><br><span class="line">input_first = browser.find_element(By.ID,<span class="string">'q'</span>)</span><br><span class="line">print(input_first)</span><br><span class="line">browser</span><br></pre></td></tr></table></figure><p><br></p><h3 id="3、元素交互操作-搜索框传入关键词进行自动搜索"><a href="#3、元素交互操作-搜索框传入关键词进行自动搜索" class="headerlink" title="3、元素交互操作-搜索框传入关键词进行自动搜索"></a>3、元素交互操作-搜索框传入关键词进行自动搜索</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line"><span class="comment"># 找到搜索框</span></span><br><span class="line">input = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line"><span class="comment"># 传送入关键词</span></span><br><span class="line">input.send_keys(<span class="string">'iPhone'</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 清空搜索框，文本框</span></span><br><span class="line">input.clear()</span><br><span class="line"><span class="comment"># 传送入关键词</span></span><br><span class="line">input.send_keys(<span class="string">'男士内裤'</span>)</span><br><span class="line"><span class="comment"># 找到搜索按钮</span></span><br><span class="line">button = browser.find_element_by_class_name(<span class="string">'btn-search'</span>)</span><br><span class="line"><span class="comment"># 点击按钮</span></span><br><span class="line">button.click()</span><br><span class="line"><span class="comment"># double_click(on_element=None)</span></span><br><span class="line"><span class="comment"># 双击Double-clicks an element.</span></span><br></pre></td></tr></table></figure><h3 id="4-截图"><a href="#4-截图" class="headerlink" title="4.截图"></a>4.截图</h3><p><code>img.screenshot_as_png</code></p><h3 id="5-动作链"><a href="#5-动作链" class="headerlink" title="5.动作链"></a>5.动作链</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前进后退</span></span><br><span class="line">browser.back()</span><br><span class="line">browser.forward()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用动作链</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 将source元素拖放至target元素处，参数为两个elementObj</span></span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)</span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">'#droppable'</span>)</span><br><span class="line"><span class="comment"># 将动作链实例化</span></span><br><span class="line">action = ActionChains(browser)</span><br><span class="line"><span class="comment"># drag_and_drop(鼠标拖动)</span></span><br><span class="line">action.drag_and_drop(source,target)</span><br><span class="line"><span class="comment"># 执行动作链</span></span><br><span class="line">action.perform()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更多用法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># move_to_element 鼠标移动到某一个元素上,结束elementObj</span></span><br><span class="line">ActionChains(driver).move_to_element(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标移动到制定的坐标上，参数接受x，y</span></span><br><span class="line">ActionChains(driver).move_by_offset(e[<span class="string">'x'</span>],e[<span class="string">'y'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Keys 实际是Selenium提供的一个键盘事件模块，在模拟键盘事件时需要导入Keys模块</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="comment"># key_down 模拟键盘摁下某个按键 key_up 松开某个按键，</span></span><br><span class="line"><span class="comment"># 与sendkey连用完成一些操作，每次down必须up一次否则将出现异常</span></span><br><span class="line"><span class="comment"># 全选&amp;复制</span></span><br><span class="line"><span class="comment"># key_down(value, element=None)</span></span><br><span class="line"><span class="comment"># element：要发送密钥的元素。如果没有，则将密钥发送给当前有焦点的元素。</span></span><br><span class="line">ActionChains(driver).key_down(Keys.CONTROL,dom).send_keys(<span class="string">'a'</span>)\</span><br><span class="line">.send_keys(<span class="string">'c'</span>).key_up(Keys.CONTROL)</span><br><span class="line"><span class="comment"># 黏贴</span></span><br><span class="line">ActionChains(driver).key_down(Keys.CONTROL,dom1).send_keys(<span class="string">'v'</span>)\</span><br><span class="line">.key_up(Keys.CONTROL).perform()</span><br></pre></td></tr></table></figure><p><br></p><h3 id="6、获取元素信息"><a href="#6、获取元素信息" class="headerlink" title="6、获取元素信息"></a>6、获取元素信息</h3><h4 id="切换标签"><a href="#切换标签" class="headerlink" title="切换标签"></a>切换标签</h4><p><code>browser.switch_to.frame(&#39;iframe&#39;)</code><br>: switch_to.标签名(‘属性’)</p><h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">logo = browser.find_element_by_id(<span class="string">'zh-top-link-logo'</span>)<span class="comment">#获取网站logo</span></span><br><span class="line">print(logo)</span><br><span class="line"><span class="comment"># 获取属性</span></span><br><span class="line">print(logo.get_attribute(<span class="string">'class'</span>))</span><br><span class="line"><span class="comment"># 获取网页的cookies</span></span><br><span class="line">print(browser.get_cookies)</span><br><span class="line"><span class="comment"># 删除所有的cookies</span></span><br><span class="line">browser.delete_all_cookies</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h4 id="获取页面源码"><a href="#获取页面源码" class="headerlink" title="获取页面源码"></a>获取页面源码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># selenium的page_source方法可以直接返回页面源码</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">"http://www.cnblogs.com/yoyoketang/"</span>)</span><br><span class="line">page = driver.page_source</span><br></pre></td></tr></table></figure><h4 id="获取文本值"><a href="#获取文本值" class="headerlink" title="获取文本值"></a>获取文本值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line"><span class="comment"># 获取文本值</span></span><br><span class="line">print(input.text)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h4 id="获取Id，位置，标签名，大小"><a href="#获取Id，位置，标签名，大小" class="headerlink" title="获取Id，位置，标签名，大小"></a>获取Id，位置，标签名，大小</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input.id)<span class="comment">#获取id</span></span><br><span class="line">print(input.location)<span class="comment">#获取位置</span></span><br><span class="line">print(input.tag_name)<span class="comment">#获取标签名</span></span><br><span class="line">print(input.size)<span class="comment">#获取大小</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="7、等待"><a href="#7、等待" class="headerlink" title="7、等待"></a>7、等待</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 隐式等待</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 设置等待时间,</span></span><br><span class="line">browser.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 当查找元素并没有立即出现时，隐式等待将等待一段时间在查找DOM,默认时间为0</span></span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显式等待 Explicit Waits¶</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">"http://somedomain/url_that_delays_loading"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    element = WebDriverWait(driver, <span class="number">10</span>).until(</span><br><span class="line">      <span class="comment"># 可以修改By.的选择，“ ”内的对象也可以改变</span></span><br><span class="line">        EC.presence_of_element_located((By.ID, <span class="string">"myDynamicElement"</span>))</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##自动化测试&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python_spider" scheme="http://yoursite.com/tags/Python-spider/"/>
    
  </entry>
  
  <entry>
    <title>linux操作</title>
    <link href="http://yoursite.com/2018/07/25/Linux/linux%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/07/25/Linux/linux操作/</id>
    <published>2018-07-25T12:54:22.000Z</published>
    <updated>2018-07-25T14:33:23.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><a id="more"></a><h4 id="创建-README-md-文件并写入内容"><a href="#创建-README-md-文件并写入内容" class="headerlink" title="创建 README.md 文件并写入内容"></a>创建 README.md 文件并写入内容</h4><p><code>echo &quot;# 菜鸟教程 Git 测试&quot; &gt;&gt; README.md</code></p><h2 id="设置Linux的IP地址"><a href="#设置Linux的IP地址" class="headerlink" title="设置Linux的IP地址"></a>设置Linux的IP地址</h2><p><code>ifconfig eth0 ip地址</code></p><ul><li>添加虚拟网卡<ul><li><code>ifconfig eth0:1 198.168.1.1</code></li></ul></li></ul><h2 id="操作技巧"><a href="#操作技巧" class="headerlink" title="操作技巧"></a>操作技巧</h2><p><code>文件部分名称</code>+ tab  ： 自动补全文件名</p><h2 id="知识概念"><a href="#知识概念" class="headerlink" title="知识概念"></a>知识概念</h2><h3 id="文件与用户的关系"><a href="#文件与用户的关系" class="headerlink" title="文件与用户的关系"></a>文件与用户的关系</h3><ul><li>所有者 u : 只有一个，但可以交换</li><li>用户组 g ： 只有一个，可以使用文件，但不是所有者</li><li>其他人 o ： 既不属于所有者，又不是用户组</li></ul><p><strong>格式</strong></p><ul><li><ul><li>： 表示文件</li></ul></li><li>d ： 表示目录</li><li>l :  表示软连接<ul><li>例子 ：rw- r– r–</li><li>rw- : 代表文件的所有者有读写的权限，代表最高权限，不一定需要赋予所有权限，够用就行</li><li>r– : 代表赋予用户组的权限</li><li>— : 代表赋予其他人的权限</li></ul></li></ul><ul><li>软链接<ul><li>类似 Windows快捷方式，不决定原文件的权限，只是符号链接</li><li>三种用户都有所有权限 rwx  ， 文件为 l 开头 ，文件大小较小</li></ul></li><li>硬链接<ul><li>相当于拷贝 cp -p（保留属性）  + 同步更新  一个i节点对应到了两个文件</li><li>注意 ： 硬链接不能跨分区 ，而且不能针对目录使用<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul><li>r(读)  w(写)  x(执行)</li></ul></li></ul></li></ul><ul><li>文件覆盖 y</li></ul><hr><h2 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h2><ul><li>命令格式<ul><li>命令 -选项 -参数<ul><li>例子 ： ls -la /etc<br>命令的选项可以同时使用，且不分顺序</li></ul></li></ul></li></ul><table><thead><tr><th>文件命令</th><th>作用</th><th>英文</th></tr></thead><tbody><tr><td>ls</td><td>目录处理命令</td><td>list</td></tr><tr><td>ls -a</td><td>查看目录所有文件（含隐藏文件） 可以添加目录参数</td><td></td></tr><tr><td>ls   -l</td><td>查看文件的详细信息</td><td></td></tr><tr><td>ls -lh</td><td>人性化显示文件信息</td><td></td></tr><tr><td>ls -ld /etc</td><td>只示目录本身的信息</td><td></td></tr><tr><td>ls -i</td><td>查看文件的i节点 （即为文件的id信息）</td></tr></tbody></table><table><thead><tr><th>目录命令</th><th>英文</th><th>作用</th></tr></thead><tbody><tr><td>mkdir</td><td>make directories</td><td>创建新目录</td></tr><tr><td>mkdir -p</td><td></td><td>递归创建新目录，并且在新目录在再进行创建，可同时创建多个</td></tr><tr><td>cd</td><td>change directories</td><td>切换目录 . 代表当前目录 ..回到上一级目录</td></tr><tr><td>pwd</td><td>print working directories</td><td>显示当前工作目录</td></tr><tr><td>rmdir</td><td>remove directories</td><td>删除空目录</td></tr><tr><td>cp</td><td>copy</td><td>拷贝目录或文件 cp -rp [原文件或目录] [目标目录] r为复制目录操作 p为保留文件属性 可以同时复制多个</td></tr><tr><td>mv</td><td>move</td><td>目录剪切 移动  mv [绝对路径] [目标路径]  若是要剪切当前路径下的文件 可以直接 mv [文件名] [目标目录]</td></tr><tr><td>rm</td><td>remove</td><td>删除文件或名录 <strong>要慎重</strong>  rm -f 强制删除 rm -r 删除目录 rm -rf 直接删除目录</td></tr></tbody></table><table><thead><tr><th>文件处理</th><th>作用</th><th>例子</th></tr></thead><tbody><tr><td>touch</td><td>创建空文件</td><td>touch /root/book.list</td></tr><tr><td>cat</td><td>浏览文件内容 可以加 -n 参数</td><td>cat -n /etc/issue</td></tr><tr><td>tac</td><td>cat 的倒序显示可以倒序显示文件内容</td><td></td></tr><tr><td>more</td><td>分页显示文件，适合查看长文件</td><td></td></tr><tr><td>less</td><td>分页浏览</td><td></td></tr><tr><td>head</td><td>查看文件的前n行,默认为10行</td><td>head -n 8</td></tr><tr><td>tail</td><td>查看文件的末尾n行</td><td>tail -f /var/log/message  动态显示问文件</td></tr></tbody></table><table><thead><tr><th>链接处理</th><th>作用</th><th>例子</th></tr></thead><tbody><tr><td>ln  /etc/issue /tmp</td><td>默认创建硬链接</td><td>ln -s 软连接</td></tr><tr><td></td><td></td></tr></tbody></table><ul><li>注意事项:<ul><li><code>touch</code><ul><li>若要创建带空格文件名的文件，可<code>touch &quot;my love&quot;</code>,即加上双引号</li><li>最好不要在Linux中创建带有特殊符号的文件名</li></ul></li><li><code>cat</code><ul><li>不太适合浏览含有非常多内容的文件</li></ul></li><li><code>more</code><ul><li>按 空格 ： 一页一页浏览</li><li>按 回车 ： 一行一行浏览</li><li>按 q : 退出浏览</li></ul></li><li><code>less</code><ul><li>可以倒回去浏览内容</li><li>pageup : 一页一页往回翻</li><li>上箭头 : 一行一行往回翻</li><li>/service ： / 斜杠可以用来搜索，按 n 可以翻看下一页</li></ul></li></ul></li></ul><table><thead><tr><th>注意</th><th></th></tr></thead><tbody><tr><td>cp -p</td><td>该属性可以保持复制文件或目录的信息，如创建和修改的时间等</td></tr><tr><td>cp -r</td><td>可以在复制文件或目录时，将文件名进行修改</td></tr><tr><td>mv 当前目录下的文件名  要修改成的名字</td><td>可以作为文件名修改命令</td></tr></tbody></table><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h3><p><code>/proc/</code> <code>/sys/</code>  : 为系统内存和内核，只可读，写入的数据在重启时会清除，不要往内写入文件</p><p><code>/tmp</code> : 临时目录，存放临时文件，建议不要存放重要文件，重启时最好清除</p><p><code>/var</code> : 动态数据保存位置，注意保存缓存，日志已经软件运行产生的文件</p><p><code>/usr</code> : 系统软件资源目录，为“Unix Software Resource”的缩写，用于存放系统软件资源的目录，系统安装的软件资源基本存放在此目录</p><h3 id="服务器："><a href="#服务器：" class="headerlink" title="服务器："></a>服务器：</h3><ul><li>远程服务器<font color="orange"><b>不允许关机</b></font>，只能重启</li><li>重启时应该关闭服务</li><li>不要在服务器访问<strong>高峰</strong>运行<strong>高负载命令</strong> ，如对大数据的处理</li><li>远程配置防火墙（<strong>过滤作用</strong>）时，不要把自己踢出服务器</li></ul><h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><ul><li>指定合理的密码规范并定期更新</li><li>合理分配权限 – 用户的权限越少越好</li><li><p><strong>定期备份重要数据与日志</strong>，多处存储</p></li><li><p>Linux命令若未指定目录，则默认在当前目录里执行操作</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h2&gt;
    
    </summary>
    
      <category term="Linux基础" scheme="http://yoursite.com/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
