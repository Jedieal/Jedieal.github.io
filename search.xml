<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Big_Data]]></title>
    <url>%2F2018%2F07%2F20%2FBig-Data%2F</url>
    <content type="text"></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS学习]]></title>
    <url>%2F2018%2F07%2F12%2FCSS%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[CSS入门学习 CSS 基础CSS 语法CSS定义方式 CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。 selector {declaration1; declaration2; ... declarationN } CSS 值的写法例 123456789p &#123; color: #ff0000; &#125;p &#123; color: #f00; &#125;p &#123; color: rgb(255,0,0); &#125;p &#123; color: rgb(100%,0%,0%); &#125;p &#123;font-family: "sans serif";&#125; 多重声明 1234567body &#123; color: #000; background: #fff; margin: 0; padding: 0; font-family: Georgia, Palatino, Serif; &#125; 注意 是否包含空格不会影响 CSS 在浏览器的工作效果， 同样，与 XHTML 不同，CSS 对大小写不敏感。不过存在一个例外：如果涉及到与 HTML 文档一起工作的话，class 和 id 名称对大小写是敏感的 CSS 高级语法 根据 CSS，子元素从父元素继承属性.通过 CSS 继承，子元素将继承最高级元素（在本例中是 body）所拥有的属性（这些子元素诸如 p, td, ul, ol, ul, li, dl, dt,和 dd）。对于部分旧式浏览器,它不仅忽略继承，而且也忽略应用于 body 元素的规则。 解决 1234567body &#123; font-family: Verdana, sans-serif; &#125;p, td, ul, ol, li, dl, dt, dd &#123; font-family: Verdana, sans-serif; &#125; 如果不想使某些子类继承父类的属性，可以针对该子类单独设置其属性 1234567body &#123; font-family: Verdana, sans-serif; &#125;p &#123; font-family: Times, "Times New Roman", serif; &#125; CSS派生选择器 派生选择器可以使得根据文档的上下文关系来确定某个标签的样式。通过合理地使用派生选择器，可以使 HTML 代码变得更加整洁。 如将列表中的 strong 元素变为斜体字，可以定义一个派生选择器 123li strong &#123; font-style: italic;&#125; 更多例子 123456h2 strong &#123; color: blue; &#125;strong &#123; color: red;&#125; CSS id 选择器 id选择器可以为标有特定id的HTML元素指定特定的样式 使用 “#”定义 注意 id 属性只能在每个 HTML 文档中出现一次。 一个选择器，多种用法 即使被标注为 sidebar 的元素只能在文档中出现一次，这个 id 选择器作为派生选择器也可以被使用很多次： 12345678#sidebar p&#123; font-style: italic; text-align: center;&#125;#sidebar h&#123; font-size: lem; margin: 0;&#125; 单独的选择器 id 选择器即使不被用来创建派生选择器，它也可以独立发挥作用 1234#sidebar &#123; border: 1px dotted #000; padding: 10px; &#125; CSS 类选择器示例： 123.center &#123; text-align: center;&#125; HTML 中类可以使用多次 h1 和 p 元素都有 center 类。这意味着两者都将遵守 “.center” 选择器中的规则。 1234567&lt;h1 class="center"&gt;This heading will be center-aligned&lt;/h1&gt;&lt;p class="center"&gt;This paragraph will also be center-aligned.&lt;/p&gt; 注意：:类名的第一个字符不能使用数字！ CSS 属性选择器先来看几个例子 将所有含有title属性的元素设置颜色 123456&lt;style type="text/css"&gt; [title]&#123; color: blue;&#125;&lt;/style&gt; 将含有 title 为 keithxodoy 的元素设置颜色 123456&lt;style type="text/css" &gt;[title=keithxodoy]&#123; color: blue;&#125; &lt;/style&gt; 将含有 title 内容包含 hello 的元素设置颜色 适用于由空格分隔的属性值title=&quot;hello keithxodoy&quot; 123456&lt;style type="text/css"&gt;[title~=hello]&#123; color: blue;&#125;&lt;/style&gt; 适用于由连字符分隔的属性值title=&quot;hello-keithxodoy 123456&lt;style type="text/css" &gt;[title|=hello] &#123; color: blue;&#125;&lt;/style&gt; 其余用法 选择器 功能 [attribute^=value] 匹配属性值以指定值开头的每个元素 [attribute$=value] 匹配属性值以指定值结尾的每个元素 [attribute*=value] 匹配属性值中包含指定值的每个元素 CSS 创建样式表外部样式表 背景 ： 当页面所需的css样式过多，而且大多是重复相同的样式时，不易在HTML文件中单独呈现，于是使用 link标签，将外部的一个 css 文件引入至 HTML 中 123&lt;head&gt;&lt;link rel="stylesheet" type="text/css" href="style_set.css" /&gt;&lt;/head&gt; 注意:最好不要再属性值和单位之间留有空格，否则会在一些浏览器中无法正常工作 内部样式表 背景 ： 当某个文档需要特殊样式时，适合使用内部样式表 1234567&lt;head&gt;&lt;style type="text/css"&gt; p &#123; margin-left: 20px; &#125;&lt;/style&gt;&lt;/head&gt; 内联样式&lt;p style=&quot;color: sienna; margin-left: 20px&quot;&gt;]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Computer Science]]></title>
    <url>%2F2018%2F07%2F02%2FComputer%20Science%2F</url>
    <content type="text"><![CDATA[计算机科学理论 比特BIT – binary digit 8 BIT – 1 Byte 计算机中数的表示例如 7 –二进制 以2的幂计算 十进制中 ： 1 2 4 8 … 二进制中 ： 1 1 1 0 … 即 7 的表示为 0111 硬盘组成 由非常微小的磁性粒子组成，有规定的排列顺序，就如小磁针，南北指向可以代表比特中的 0 1 ,就由这些磁针来储存数据 C语言123456#include &lt;stdio.h&gt;int main()&#123; printf("Hello,World!\n");&#125; 字符串printf输出实例123456string name = "keithxodoy";float num = 5.264printf("hello,%s！\n", name);printf("%.2f\n", num);printf("%d\n", sizeof(i) ); sizeof ==&gt; 输出数据类型的长度 FAQ 对硬盘或软盘进行格式化时会发生什么？ 解答 不会产生很大改变，对盘进行格式化（分区）只会修改几字节或几千字节的信息，使得电脑无法知道原先的文件或文件夹被存放至哪个位置，但是这些数据仍在原先的位置存储着 编译器作用 ？ 解答 将代码文件编译为二进制文件]]></content>
      <categories>
        <category>Basic Knowledge</category>
      </categories>
      <tags>
        <tag>Computer Science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP]]></title>
    <url>%2F2018%2F06%2F30%2FPHP%2F</url>
    <content type="text"><![CDATA[PHP入门 What is PHP??? PHP是一种开源的通用计算机脚本语言，尤其适用于网络开发并可嵌入HTML中使用 是一种创建动态交互性站点的强有力的服务器端脚本语言 PHP： Hypertext Preprocessor –超文本预处理器 DNS DNS (Domin Name System 域名系统) ： 因特网上作为域名和 IP 地址相互映射的一个分布式数据库，能使用户更方便的访问互联网 域名解析 用户通过主机名，最终得到该主机名对应的 IP 地址的过程 步骤： 用户输入域名 localhost –&gt; DNS (localhost 127.0.0.1) –&gt; 服务器电脑 PHP基本语法 php脚本可以放置在文档任意位置 123&lt;?php// PHP代码?&gt; 文本输出命令echo &amp; print 输出字符串可以包含HTML标签 echo 语句echo - 可以输出一个或多个字符串 echo 输出样式 12345678&lt;?php$txt = "学习PHP"；$arr = array('Jan', 'Ame', 'Chi');echo $txt;echo "我要 $txt";echo "想去的国家&#123;$arr[1]&#125;";?&gt; print 语句print - 只允许输出一个字符串，返回值为 1 如果字符串成功显示则返回true，否则返回false。 12345678&lt;?php$txt = "学习PHP"；$arr = array('Jan', 'Ame', 'Chi');print $txt;print "我要 $txt";print "想去的国家&#123;$arr[1]&#125;";?&gt; 比较 echo 输出速度比 print 快，echo 无返回值， print 返回值为 1 print $a 和 print &quot;$a&quot; 效果相同，echo 同理 print &quot;text$a text&quot; 和 print &quot;text $a text&quot; 和 print &quot;text{$a}text&quot; 都可以正常显示 $a 的值，不使用 {} 则 &amp;a 之后必须有一个空格，echo 同理 文本注释123456789&lt;?php// PHP单行注释/*PHP多行注释*/?&gt; 须知 PHP中每个代码行必须以分号结束，以使指令集区分开来 PHP变量 PHP为一门弱类型语言，不必向 PHP 声明该变量的数据类型。 PHP 会根据变量的值，自动把变量转换为正确的数据类型。 1234567&lt;?php$x=5;$y=6;$z=$x+$y;$txt="Hello,World!"echo $z;?&gt; 规则 变量以 $ 符号开始，后面跟着变量的名称 变量名不能包含空格 变量名是区分大小写的（$y 和 $Y 是两个不同的变量） PHP变量作用域 PHP 有四种不同的变量作用域： local global static parameter 局部与全局作用域 实例：12345678910111213141516171819&lt;?php $x=5; // 全局变量 function myTest() &#123; $y=10; // 局部变量 echo "&lt;p&gt;测试函数内变量:&lt;p&gt;"; echo "变量 x 为: $x"; echo "&lt;br&gt;"; echo "变量 y 为: $y"; &#125; myTest(); echo "&lt;p&gt;测试函数外变量:&lt;p&gt;"; echo "变量 x 为: $x"; echo "&lt;br&gt;"; echo "变量 y 为: $y"; ?&gt; global全局变量 函数内访问全局变量需要 global 关键字或者使用 $GLOBALS[index] 数组 global $x,$y; 123456789&lt;?php$x=5;$y=10;function mytest()&#123; $GLOBALS['y']=$GLOBALS['x']+$GLOBALS['y'];&#125;?&gt; 注意 在 php 中函数是有独立的作用域，所以局部变量会覆盖全局变量 Static作用域 当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除 123456function myTest()&#123; static $x=0; echo $x; $x++;&#125; 每次调用该函数时，该变量将会保留着函数前一次被调用时的值,且该变量仍然是函数的局部变量。 参数作用域 参数是通过调用代码将值传递给函数的局部变量,并且在参数列表中声明的:function mytest($x) PHP 常量 常量是一个简单值得标识符，不可以在脚本中改变 设置PHP常量语法 bool define ( string $name , mixed $value [, bool $case_insentitive = false ]) 解释 name：必选参数，常量名称，即标志符 value：必选参数，常量的值 case_insensitive：可选参数，如果设置为TRUE，该常量则大小写不敏感。默认是大小写敏感的 示例：12345&lt;?php//不区分大小写的常量define("Hello", "Keithxodoy", True);echo Hello;?&gt; 注意事项 常量在定义后，默认是全局变量，可在任意脚本中使用 PHP EOF (heredoc) PHP EOF(heredoc)是一种在命令行shell（如sh、csh、ksh、bash、PowerShell和zsh）和程序语言（像Perl、PHP、Python和Ruby）里定义一个字串的方法。 PHP 定界符 EOF 的作用就是按照原样，包括换行格式什么的，输出在其内部的东西 1234567&lt;?phpecho &lt;&lt;&lt;EOF &lt;h1&gt;标题&lt;/h1&gt; &lt;p&gt;段落&lt;/p&gt;EOF;// 结束需要独立一行且前后不能空格?&gt; 1. 以 &lt;&lt;&lt;EOF 开始标记开始，以 EOF 结束标记结束，结束标记必须顶头写，不能有缩进和空格，且在结束标记末尾要有分号2. EOF 可以用任意其它字符代替，只需保证结束标识与开始标识一致。3. 结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)。4. 当内容需要内嵌引号（单引号或双引号）时，不需要加转义符，本身对单双引号转义。5. 在 heredoc 中，变量不需要用连接符 . 或 , 来拼接 PHP 数据类型 String Integer Float Boolean Array Object Null 示例1234567891011121314&lt;?php$x = "Hello ,world!";$y = 520;$z = 52.1;$a = True;$arr = array("1","2","3");class obj&#123; var $color; function what_color() &#123; return $this-&gt;color; &#125;&#125;$b = null; 拓展 判断变量类型：var_dump() 说明：var_dump() 方法，判断一个变量的类型与长度，并输出变量的数值，如果变量有值，则输出是变量的值，并返回数据类型。显示关于一个或多个表达式的结构信息，包括表达式的类型与值. 注意：用保证 var_dump 中的变量必须是存在的，如果变量不存在则返回 NULL.]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Algorithm]]></title>
    <url>%2F2018%2F06%2F29%2FAlgorithm%2F</url>
    <content type="text"><![CDATA[算法 初探算法Question: 猜价格 价格大了 价格小了 猜对了 递推算法顺推法斐波那契数列12345678910long fib[NUM] = &#123;1, 1&#125;;for (i=2; i&lt;num; i++)&#123; fib[i] = fib[i-1] + fib[i-2] ;&#125;for (i=0; i&lt;num; i++)&#123; printf("兔子目前的总数为:%d\n", fib[i]);&#125; 逆推法案例 : 银行存款的提取利息假设第48个月,利息为1000元 12345678910111213141516171819#include &lt;stdio.h&gt;#define Fetch 1000#define Rate 0.0171int main()&#123; double month[49]; //每个月的本利 int i ; month[48] = (double)Fetch; for(i=47; i&gt;0; i--) //由第48月的利息来倒推处第一个月 &#123; month[i] = (month[i+1]+Fetch)/(1+Rate/12); &#125; for(i=48; i&gt;0; i--) &#123; printf("第%d月末的本利合计为:%.2f\n", i, month[i]); &#125; getch(); return 0;&#125;]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm step</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python数学分析]]></title>
    <url>%2F2018%2F06%2F28%2FPython%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90%2F</url>
    <content type="text"></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python数学分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux教程.md]]></title>
    <url>%2F2018%2F06%2F28%2FLinux%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[LINUX 初探 知识概念网络概述1970年 — Linux元年1969年 — Internet元年 局域网(LAN) - Local Area Network : 指范围在几百米到十几公里内办公楼群或校区内的计算机相互连接所构成的计算机网络 城域网(MAN) + Metropolitan Area Network 广域网(WAN)- Wide Area Network : 通常跨接很大的物理范围，如一个国家 网络分类 – 公网 &amp; 内网 公网：上网的计算机得到的 IP 地址是 Internet 上的非保留地址，公网的计算机和 Internet 上的其他计算机可以随意相互访问 IP 地址IP (Internet Protocol) : 网络之间互连的协议，即网络相互连接进行通信而设计的协议 IP 地址类型 ： 公有地址、私有地址 1.0.0.0 - 255.255.255.255 公有地址(Public address) 公有地址由 Inter NIC (Internet Network Information Center 因特网信息中心)负责。这些 IP 地址分配给注册并向 Inter NIC 提出申请的组织机构(免费)，可以通过它直接访问因特网 私有地址(Private address) 私有地址属于 非注册地址，专门为组织机构内部使用，用以分散使用 类别 私有 IP 地址 使用对象 最大主机数 最大网络数 A 类 10.0.0.0 - 10.255.255.255 电信、联通等运营商 16777214 126 (2^7-2) B 类 172.16.0.0 - 172.31.255.255 65534 16384(2^14) C 类 192.168.0.0 - 192.168.255.255 使用最多 254 2097152(2^21) DNSDNS (Domin Name System 域名系统) ： 因特网上作为域名和 IP 地址相互映射的一个分布式数据库，能使用户更方便的访问互联网 域名解析 用户通过主机名，最终得到该主机名对应的 IP 地址的过程 步骤： 用户输入域名 localhost –&gt; DNS (localhost 127.0.0.1) –&gt; 服务器电脑 端口(Port) 端口可以认为是设备与外界通讯交流的出口 端口: 虚拟端口 和 物理端口 虚拟端口 ： 计算机内部或者交换机路由器内的端口，不可见端口 物理端口 ： 如计算机的 80端口、 21端口等，可见端口例如 计算机背板的 RJ45网口 **用户输入域名 localhost：端口 –&gt; DNS (localhost 127.0.0.1) –&gt; 服务器电脑 –&gt; 软件（服务） **文件与用户的关系 所有者 u : 只有一个，但可以交换 用户组 g ： 只有一个，可以使用文件，但不是所有者 其他人 o ： 既不属于所有者，又不是用户组 格式 -： 表示文件 d： 表示目录 l : 表示软连接 例子 ：rw- r– r– rw- : 代表文件的所有者有读写的权限，代表最高权限，不一定需要赋予所有权限，够用就行 r– : 代表赋予用户组的权限 — : 代表赋予其他人的权限 软链接 类似 Windows快捷方式，不决定原文件的权限，只是符号链接 三种用户都有所有权限 rwx ， 文件为 l 开头 ，文件大小较小 硬链接 相当于拷贝 cp -p（保留属性） + 同步更新 一个i节点对应到了两个文件 注意 ： 硬链接不能跨分区 ，而且不能针对目录使用文件操作 r(读) w(写) x(执行) 文件覆盖 y Linux配置设置Linux的IP地址ifconfig eth0 ip地址 添加虚拟网卡 ifconfig eth0:1 198.168.1.1 操作技巧 文件部分名称+ tab ： 自动补全文件名 Ctrl shift = : 放大终端窗口的字体显示 Ctrl - : 缩小终端窗口的字体显示 向上/下箭头:查看历史输入命令 Linux命令查阅命令帮助信息help:command --help : 显示帮助信息man:man command : 查阅使用手册 空格:显示手册下一屏 Enter:下一行 b:回滚一屏 f:前滚一瓶 q:退出 /word:搜索word字符串 命令格式 命令 -选项 -参数 例子 ： ls -la /etc命令的选项可以同时使用，且不分顺序 文件处理命令 文件命令 作用 英文 ls 目录处理命令 list ls -a 查看目录所有文件（含隐藏文件） 可以添加目录参数 ls -l 查看文件的详细信息 ls -lh 人性化显示文件信息,更直观显示文件大小 ls -ld /etc 只示目录本身的信息 ls -i 查看文件的i节点 （即为文件的id信息） 说明 .开头为隐藏文件,需要-a参数查看或者Ubuntu进入目录，按ctrl h就能看见以点号开头的隐藏文件 .当前目录 ..上一级目录 目录命令 英文 作用 mkdir make directories 创建新目录 mkdir -p 递归创建新目录，并且在新目录在再进行创建，可同时创建多个 cd change directories 切换目录 . 代表当前目录 ..回到上一级目录 pwd print working directories 显示当前工作目录 rmdir remove directories 删除空目录 cp copy 拷贝目录或文件 cp -rp [原文件或目录] [目标目录] r为复制目录操作 p为保留文件属性 可以同时复制多个 mv move 目录剪切 移动 mv [绝对路径] [目标路径] 若是要剪切当前路径下的文件 可以直接 mv [文件名] [目标目录] rm remove 删除文件或名录 要慎重 rm -f 强制删除 rm -r 删除目录 rm -rf 直接删除目录 cd 补充 作用 cd ~ 切换到当前用户的主目录 cd . 保持在当前目录不变 cd .. 切换到上级目录 cd - 可以在最近两次工作目录之间来回切换 文件处理 作用 例子 touch 创建空文件 touch /root/book.list cat 浏览文件内容 可以加 -n 参数 cat -n /etc/issue tac cat 的倒序显示可以倒序显示文件内容 more 分页显示文件，适合查看长文件 less 分页浏览 head 查看文件的前n行,默认为10行 head -n 8 tail 查看文件的末尾n行 tail -f /var/log/message 动态显示问文件 链接处理 作用 例子 ln /etc/issue /tmp 默认创建硬链接 ln -s 软连接 注意事项: touch 若要创建带空格文件名的文件，可touch &quot;my love&quot;,即加上双引号 最好不要在Linux中创建带有特殊符号的文件名 cat 不太适合浏览含有非常多内容的文件 more 按 空格 ： 一页一页浏览 按 回车 ： 一行一行浏览 按 q : 退出浏览 cp cp -p : 该属性可以保持复制文件或目录的信息，如创建和修改的时间等 cp -r cp -r : 可以在复制文件或目录时，将文件名进行修改 mv mv 当前目录下的文件名 要修改成的名字 : 可以作为文件名修改命令 less 可以倒回去浏览内容 pageup : 一页一页往回翻 上箭头 : 一行一行往回翻 /service ： / 斜杠可以用来搜索，按 n 可以翻看下一页 权限管理命令命令名称： chmod 命令原意： change the permissions mode of a file 所在路径： /bin/chmod 功能描述： 改变文件或目录权限 可以更改权限的对象： root &amp; 所有者 语法 chmod [{ugoa}{+-=}{rwx}] [文件或目录][mode=421] [文件或目录] -R 递归修改 例子 ： chmod u+x myblog.md – 给所有者(u)赋予myblog文件的写(x)的权限 补充 ： 通过”+-=”来修改权限 一般通过权限的数字来表示： r–4 w–2 x–1 rwx : 7 ; rw- : 6 ; r–: 4 例子 ： chmod 640 myblog.md 注意： chmod 默认改变当前指定的文件或目录，对目录下的子目录不进行修改 若需要修改，则可以添加-R属性 正确理解目录rwx权限 注意：r+x 权限是同时出现的 w权限的说明： 对文件的删除是否能进行，是与用户在该文件所在目录被赋予的权限有关 若用户被给予W权限，则可以删除该文件 改变所有者命令 chown 命令名称 ： chown – change file ownership 命令所在路径 : /bin/chown 执行权限 ： root用户 功能描述 ： 改变文件或目录的所有者 语法- 基本语法 : chown [用户][文件或目录] 注意事项 只有root管理员身份才能修改所有者 修改所有者时，要确保新所有者用户存在 创建新用户 useradd 用户名 ,并且谁创建的文件，谁就是所有者 改变文件所有组 chgrp 命令名称 ： chgrp – change file group ownership 命令所在路径 ： /bin/chgrp 执行权限 ： 所有用户 语法 基本语法 ： chgrp [用户组][文件或目录] 范例 : $ chgrp newgroup doc : 将doc文件的所属组改为newgroup 创建新组 ： groupadd 新组名 设置新建文件的缺省权限 umask 命令名称 ： umask – the user file-creation mask 命令所在路径 ： Shell内置命令 执行权限 ： 所有用户 功能描述 ： 显示、设置文件的缺省权限 语法 基本语法 ： umask [-S] S : 以 rwx 形式显示新建文件的缺省权限 范例 ： $ uamsk -S 拓展语法 umask 023 含义 ：所有权限777 ,将 777 - 023 = 754 ,则为新设置的目录权限为 rwx–rx–r 注意 touch 创建新文件是不具有可执行权限的 文件搜索命令文件搜索命令 find 命令名称： find 命令所在路径： /bin/find 执行权限： 所有用户 语法 find [搜索范围][匹配条件] 更多用法 $find /etc -name init :使用-name 精准搜索 粗略搜索 *init* 不分文件名大小写 -iname ：匹配任意字符 ？：匹配单个字符 $find / -size : 使用-size 根据文件大小来查找 find / -size +204800 : 在根目录下查找大于100MB的文件 +n 大于 -n 小于 n 等于 大小说明 1K = 2数据块 1数据块 = 512字节 = 0.5K $find /home -user（-group） yonghu ：根据文件所有者(所属组)来查找 find -type f :根据文件类型查找 – f 文件 d 目录 l 软连接文件 find -inum : 根据i节点查找 ，通过i节点，可删除特殊文件 根据文件信息修改的时间来查找 $find /etc -amin -5:查找5分钟内被访问过的文件和目录 – access $find /etc -cmin -5:查找5分钟内被修改过属性的文件或目录 – change $find /etc -mmin -5:查找5分钟内被修改过内容的文件或目录 – modify 常用连接选项 作用 范例 -a (and) 表示两个条件同时满足 $find /etc +163840 -a -size -204800 -o (or) 表示两个条件满足任意一个即可 $find /etc 163840 -o -size 204800 注意事项 查找文件时，文件名的大小写是区分开来的 文件搜索命令 locate 命令名称： locate 命令所在路径： /usr/bin/locate 执行权限 ： 所有用户 语法 基本语法 locate 文件名 功能 ： 在文件资料库中查找文件 范例：$locate init 文件库： /var/lib/mlocate/mlocate.db 拓展语法 locate -i 文件名 : 不区分大小写来查找文件 注意 当创建的文件没有被存入文件资料库中时，无法使用locate查找到文件 解决方法： $ updatedb 手动更新 文件资料库不会收取 /tmp 临时文件夹下的文件，故使用locate可能无法搜索到该目录下文件 文件搜索命令 which 命令名称： which 命令所在路径 ： /usr/bin/which 执行权限 ： 所有用户 功能描述： 搜索命令所在目录及别名信息 例子 ： $ which ls 文件搜索命令 whereis 命令名称: whereis 命令所在路径： /usr/bin/whereis 执行权限 ： 所有用户 功能描述： 搜索命令所在目录及帮助文档路径 例子： $ whereis ls 文件搜索命令 grep 命令名称 ： grep 命令所在路径： /bin/grep 执行权限: 所有用户 功能描述 : 在文件中搜寻字串匹配的行并输出，即在文件内进行搜索 语法 基本语法 $ grep mysql /root/install.log $ grep + 查找关键词 + 文件所在地址 拓展语法 $ grep -i : 不区分大小写来查找 $ grep -v : 排除指定字串来查找 $ grep -v ^# : 过滤掉位于行首的文件脚本注释行 注意事项目录：/proc/ /sys/ : 为系统内存和内核，只可读，写入的数据在重启时会清除，不要往内写入文件 /tmp : 临时目录，存放临时文件，建议不要存放重要文件，重启时最好清除 /var : 动态数据保存位置，注意保存缓存，日志已经软件运行产生的文件 /usr : 系统软件资源目录，为“Unix Software Resource”的缩写，用于存放系统软件资源的目录，系统安装的软件资源基本存放在此目录 服务器： 远程服务器不允许关机，只能重启 重启时应该关闭服务 不要在服务器访问高峰运行高负载命令 ，如对大数据的处理 远程配置防火墙（过滤作用）时，不要把自己踢出服务器 其他： 指定合理的密码规范并定期更新 合理分配权限 – 用户的权限越少越好 定期备份重要数据与日志，多处存储 Linux命令若未指定目录，则默认在当前目录里执行操作 Linux 新建的文件的 x(可执行)权限会自动去除]]></content>
      <categories>
        <category>LINUX</category>
      </categories>
      <tags>
        <tag>Linux初阶</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[电音入门.md]]></title>
    <url>%2F2018%2F06%2F28%2F%E7%94%B5%E9%9F%B3%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[一入电音深似海引言 Can u feel the volume of my love for u 电音风格Techno – 高科技舞曲 理解 ： 重复动次打次 House music –舞蹈音乐 场景 ： 各大酒吧 风格 ： 类似Techno, 但高潮部分，会突然爆发不同的旋律 辨别 4/4拍 动次动次 动 ： 大姑 次 ： 镲 BPM(beats per minutes) : 118-135bpm ,最常见的为 128bpm Progressive House 辨别 ： 一层一层的堆叠感 拍数不断堆叠 内容 一定具有VOCAL(人声)，和弦等 Electric House 辨别 ： 电子制作 人造的音色 内容 与鼓点同步的Bass声音(sub) 类似 dong-en “咚-嗯” Big Room House 辨别 ： 单一洗脑 富有侵略性的旋律 内容 一串串 “叭叭叭”的声音 类似喇叭的声音 Melbourne Bounce 辨别 : 慢摇 缩放感 发出”嗯-嘚”的声音 Deep House 辨别 ： 结构稳定 情绪起伏小 速度较慢 120bpm Tropical House 辨别 : 热带感的乐器、音色 有种令人想跳舞的感觉 Future House 辨别 ： 常以 bassline 主旋律 有点空空的感觉 由一条bass的主旋律 Tech House 辨别 ： 碎拍、旋律不明确 打击乐特别多 次次次的声音特别多 Techno &amp; House Dubstep 风格 ： 偏向黑暗系， 嗡嗡嘭嘭感十足 Trap]]></content>
      <categories>
        <category>How to become a DJ</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[乐理知识.md]]></title>
    <url>%2F2018%2F06%2F28%2F%E4%B9%90%E7%90%86%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[乐理入门 泛音 概念：物体局部振动产生的复合音的总和 以弦的振动来说，除了整个弦的振动，其二分之一，三分之一…各段都在振动，共同发音 作用：对音色具有决定性的作用，通过增减泛音的音量，可对音色有明显的改变 音阶 什么是音阶 调式中由高低次序（上下行），由主音到主音排列起来 音级概念乐音体系中的各个音，例如钢琴有88个不同音高的音，则音级为88 基本音级 从 do–si 七个独立音叫做基本音级，并通过字母或唱名标记 钢琴白键便是7个基本音级的循环重复 Do Re Mi Fa Sol La S 对应 C D E F G A B 两个相邻具有相同名称的音级叫做八度, 即相差一个八度，一个八度音阶共有7个基本音级和5个变化音级，共12个音组成（12平均音） 变化音级升高或者降低基本音级而获得的音，钢琴中用黑键表示 变化音级标注法 升 or “#” 降 or “b” 重升 or “x” 重降 or “bb” 其中音高相同而意义和记法不同的音叫做“等音” ，如#C , bD 乐音分组目的: 由于乐音体系中音级会循环出现，于是为了区分音名相同而音高不同，将其分组 以钢琴为例，最中央的12个音级叫做小字一组 音域及音区总音域概念: 指音列的总范围，乐器和人声的音域指能发生出的最高或最低音的范围 不同音区表现不同的音色/情感等特征 五线谱 概念: 通用的标准记谱法，由五条平行横线构成 音符通过在五线谱中记录在线上或间内 作用: 音符位置决定音的高低，形状决定音的长短 注意: 当五线不足以记录时，通过上加或下加线** 来解决 五线谱由自下而上计算，音高也由自下而上由低到高 多声部五线谱 多声部需要数行五线谱来记录，需要使用连谱号连接 连谱号: 包括起线（连接数行五线谱的垂直线）和括线（连接数行五线谱的括弧） 在总谱中，使用小节线连接同种类型的乐器连谱号括弧 花线 钢琴/风琴/手风琴/竖琴 直线 合奏/合唱乐队 有时在直线外还会加上辅助括线， 起线 位置在五线谱的开端，需连接全部的五线谱 音符概念: 记录不同长短的音的进行的符号 成分: 符头/符干/符尾 休止符休止符: 记录音的间断的符号 持续时间: 每个音符的持续时间为倍数减少，如二分音符持续2S.则四分音符持续1S 附点: 记在音符符头或者休止符右边的小圆点，表示增长原有音符或休止符时值得一半，且每增加一个附点，则增长时间为前一个附点值得一半 音符记谱 音符记录在五线谱的线或间上，符头越高，音高越高 五线谱音线有1-5，从下到上 符头方向判断 符头在三线以上，符干朝下，附在符头左边 符头在三线以下，符干朝下，附在符头右边 符头在三线上，则符干可上可下，符干方向随附近音符方向决定 符干 单声部永远使用单符干记谱（独立记谱） 多声部只有在节奏相同时，才用单符干记谱，如“三十二音符” 符尾 符尾在符干右边并且向符头方向弯曲 一符干 多音 同时连接多个音，表示这些音需要同时弹奏 同一符干连接多个音，符干方向以离第三线最远的音符为标准记录，且符尾方向相同 简谱与五线谱大音阶 对应手指 大拇指-小拇指 ： 1-2-3-4-5 C大调 ： 1-2-3-1-2-3-4-5 C 位于 下加一线 G大调 C 位于 第二线]]></content>
      <categories>
        <category>How to become a DJ</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多进程初探]]></title>
    <url>%2F2018%2F06%2F26%2F%E5%A4%9A%E8%BF%9B%E7%A8%8B%26%E5%A4%9A%E7%BA%BF%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[搞定多进程与多线程 多线程概念程序: 代码以文本的形式存入一个文档 进程: 程序运行的一个状态，包含地址空间、内存、数据栈等 每个进程由自己==完全独立==的运行环境，多进程共享数据 轻量化的进程 一个进程的多个线程间共享数据和上下文运行环境 共享、互斥问题 线程: 一个进程的独立运行片段，一个进程可以由多个线程 全局解释器锁(GIL) Python代码的执行是由python虚拟机进行控制 在主循环中有一个控制线程在执行 Python包thread： 有问题，不好用 python3： _thread* `import _thread as thread ` threading: 通行的包 直接利用threading.Thread生成Thread t = threading.Thread(target=xxx, args=()) t.start(): 启动多线程,可独立于主线程 t.join() : 等待多线程执行完成 守护线程 daemon子线程会在主线程结束后自动退出**，一般认为守护线程不重要或不允许离开主线程独立运行 设置守护线程–在t.start()前* `t.setDaemon(True)` 1234if __name__ == "__main__" main() while True: time.sleep(5) 启动线程–使用多线程执行某个函数thread.start_new_thread(loop,() 理解启动多线程: 相当于给多个工人分配任务，自己可以做别的事情，等自己事情做完了，工人也恰好完工（完成时间非常快） 注意事项 启动多线程函数为 ==start_new_thread== 参数为两个，一个是运行的==函数名==，另一个是==函数参数==作为元组使用，若为空，则使用空元组，若函数只有一个参数，则在参数后需要一个==逗号==，标识为元组启动多线程 ==一定要使用while语句==，因为启动多线程后本程序就作为主线程存在，如果主线程执行完毕，则子线程可能也会没执行完就终止 共享变量共享变量: 当多个线程同时访问一个相同变量时，会产生共享变量问题,即会产生冲突 解决变量锁(Lock)锁: 是一个标志，表示一个线程在占用一些资源 使用方法 上锁 可以放心使用共享资源 取消锁，释放锁 12345678import threadinglock = threading.Lock()# 上锁，申请锁lock.acquire()# 使用结束后，释放锁lock.release() 线程安全问题概念: 如果一个资源/变量，对于多线程来说，不用加锁也不会引起任何问题，则称为线程安全 类型 线程安全变量： queue 线程不安全变量： list 、 set 、 dict 生产者消费问题 一个模型，可以用来搭建消息队列 queue: 一个用来存放变量的数据结构，特点为先进先出，内部元素排队，可以理解为一个特殊的list 方法 queue.Queue() : 生成队列的实例 queue.qsize() : 计算队列的长度 queue.push() : 将数据放入队列中 queue.get() : 从queue中取出一个值 12345# python2from Queue import Queue# python3import queue 123456789101112131415161718import threadingimport time# 直接继承Thread方法class Producer(threading.Thread) def run(self): global queue count = 0 while True: # qsize计算队列的长度 if queue.qsize() &lt; 1000 for i in range(100): count = count + 1 msg = "生产产品" + str(count) # 将数据放入队列中 queue.put(msg) print(msg) time.sleep(0.5) 12345678910class Consumer(threading.Thread) def run(self): global queue while True: if queue.qsize() &gt; 100 for i in range(3): # get是从queue中取出一个值 msg = self.name + "消费了" + queue.get() print(msg) time.sleep(1) 解释: 对于继承Thread,必须重写run(self)函数，run(self)函数为调用Thread时，自动调用的函数 死锁现象解释 集合中的每一个进程都在等待只能由本集合中的其他进程才能引发的事件，那么该组进程是死锁的 例如，如果线程A锁住了记录1并等待记录2，而线程B锁住了记录2并等待记录1，这样两个线程就发生了死锁现象。 解决 对申请锁的内容设置超时时间 lock.acquire(timeout=2) semaphore 允许一个资源最多由几个多线程同时使用 semaphore = threading.Semaphore(3) : 设置最多3个线程同时使用资源 可重入锁 lock = threading.RLock()]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端深似海-HTML]]></title>
    <url>%2F2018%2F06%2F24%2FHTML%2F</url>
    <content type="text"><![CDATA[逐步学会HTML URL统一资源定位符 URL URL Uniform Resource Locator URL 格式scheme://host.domain:port/path/filename scheme - 定义因特网服务的类型。最常见的类型是 http host - 定义域主机（http 的默认主机是 www） domain - 定义因特网域名，比如 w3school.com.cn :port - 定义主机上的端口号（http 的默认端口号是 80） path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。 filename - 定义文档/资源的名称 URL 编码 URL 只能使用 ASCII 字符集来通过因特网进行发送。 由于 URL 常常会包含 ASCII 集合之外的字符，URL 必须转换为有效的 ASCII 格式。 URL 编码使用 “%” 其后跟随两位的十六进制数来替换非 ASCII 字符。 URL 不能包含空格。URL 编码通常使用 + 来替换空格。 DTD文档类型定义(Document Type Definition) 一套为了进行程序间的数据交换而建立的关于标记符的语法规则。使用各类文档类型定义是为了让标准通用标记语言、可扩展标记语言文件能符合规定的数据交换标准. HTML 文档声明&lt;HTML &lt;!DOCTYPE&gt; &lt;!DOCTYPE&gt;声明帮助浏览器正确地显示网页 &lt;!DOCTYPE&gt; 不是 HTML 标签。它为浏览器提供一项信息（声明），即 HTML 是用什么版本编写的。 &lt;!DOCTYPE html&gt; : HTML5 的声明 HTML基础标签 添加水平线 &lt;hr/&gt; 内容居中 align=&quot;center&quot; 换行 &lt;br/&gt; 注释 &lt;!-- --&gt; 背景颜色 bgcolor=&quot;blue&quot; 链接 &lt;a href=&quot;http://&quot; &gt; 图像 &lt;img src=&quot; &quot;&gt; 个性化设置HTML属性 style属性 background-color 属性为元素定义了背景颜色 实例：style=&quot;background-color:red&quot; font-family、color 以及 font-size 属性分别定义元素中文本的字体系列、颜色和字体尺寸 实例：style=&quot;font-family:arial;color:red;font-size:20px;&quot; text-align 属性规定了元素中文本的水平对齐方式 实例：style=&quot;text-align:center&quot; color 设置字体颜色 ： color: red 特殊用法 : color: rgb(100,200,500); rgb: red green blue text-decoration 设置文字修饰 例如 text-decoration: underline – 设置下划线 text-decoration: none –不设置任何文字修饰 HTML 颜色 颜色由红色、绿色、蓝色混合而成。 颜色名：大多数的浏览器都支持颜色名集合。 提示：仅仅有 16 种颜色名被 W3C 的 HTML4.0 标准所支持。它们是：aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, yellow。&gt; 如果需要使用其它的颜色，需要使用十六进制的颜色值。—## HTML中的样式 stylesheet123456&lt;style type="text/css"&gt;h1 &#123;color: red&#125;p &#123;color: blue&#125;body &#123;background-color: red&#125;p &#123;margin-left: 20px&#125;&lt;/style&gt;&gt; 添加到部分的样式信息对 HTML 进行格式化### HTML的内容格式化1234&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=gb2312" /&gt;&lt;meta http-equiv="Content-Language" content="zh-cn" /&gt;&lt;/head&gt;&gt; 当特殊的样式需要应用到个别元素时，就可以使用内联样式123&lt;p style="color: red; margin-left: 20px"&gt;This is a paragraph&lt;/p&gt;### 使用样式属性做一个没有下划线的链接1&lt;a href="/example/html/lastpage.html" style="text-decoration:none"&gt; 自定义下划线链接text-decoration: underline &lt;link&gt; 标签链接到一个外部样式表12&lt;head&gt;&lt;link rel="stylesheet" type="text/css" href="/html/css"/&gt;### 设置HTML的aside侧栏的边距1234aside ul &#123; list-style: none; padding-left: 0;&#125;例子12345678910111213141516&lt;div class="wrap"&gt; &lt;h1&gt;mytest&lt;/h1&gt; &lt;p&gt;The cat was fast.&lt;/p&gt; &lt;div class="content"&gt; &lt;h2&gt;content&lt;/h2&gt; &lt;p&gt;paragraph&lt;/p&gt; &lt;/div&gt; &lt;aside&gt; &lt;h2&gt;mysidebar&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;about&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/aside&gt;&lt;/div&gt;1234.wrap &#123; width: 600px; margin: auto;&#125;注意： 为显示aside的侧边效果，首先要对aside所在的div中，设置div的属性 为使得页面更好的附和浏览器，可以设置宽度，高度为百分比，如width: 80%### 设置样式元素的展示方式dispaly| code | function || — | ——– || display : inline | 将样式元素在一条线上显示 || display : block | 将样式元素块显示 |拓展 :hover :hover 选择器鼠标指针在其上浮动的链接设置样式。 hover 选择器可用于 所有元素 ，不只是链接。例：12345li a:hover&#123; text-decoration: underline color: #666; font-size: 60px;&#125; :link 选择器设置指向未被访问页面的链接的样式 :visited 选择器用于设置指向已被访问的页面的链接 :active 选择器用于活动链接。注释：在 CSS 定义中，:hover 必须位于 :link 和 :visited 之后（如果存在的话），这样样式才能生效。——## HTML文本实例化### 基础&lt;b&gt; 粗体 &lt;strong&gt; 字体加强&lt;big&gt; 字体变大 &lt;em&gt; 字体强调&lt;i&gt; 意大利斜体 &lt;small&gt; 字体减小&lt;sub&gt; 字体下放 &lt;sup&gt;字体上放&lt;del&gt; 删除字 &lt;ins&gt; 下划线### 拓展 &lt;pre&gt;&gt; 预格式文本，可以很好的显示计算机代码，可以对空行和空格进行控制。 &lt;code&gt; &lt;var&gt;&gt; 常用于显示计算机/编程代码,变量 &lt;kbd&gt;&gt; 定义键盘代码 &lt;tt&gt;&gt; 定义打字机代码 &lt;font color=&quot;&quot;&gt;&gt; 设置字体颜色 &lt;address&gt;&gt; 可以在 HTML 文件中写地址 &lt;acronym title=&quot;World Wide Web&quot;&gt;WWW&lt;/acronym&gt; &lt;abbr title=&quot;etcetera&quot;&gt;etc.&lt;/abbr&gt;&gt; 可以将 title 里的内容缩写为自己定义的形式&gt; 并且首字母缩写 &lt;bdo dir=&quot;rtl&quot;&gt;&gt; 可以将 中的内容倒序输出 &lt;cite&gt;&gt; 定义引用、引证 &lt;dfn&gt;&gt; 定义一个定义项目 &lt;blockquote&gt;&gt; 可以进行文本的长引用 &lt;q&gt;&gt; 可以进行文本的短引用 使用 blockquote 元素的话，浏览器会插入换行和外边距 而 q 元素不会有任何特殊的呈现。### HTML字符实体#### HTML实体&gt;在 HTML 中，某些字符是预留的。&gt;在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。&gt;如果希望正确地显示预留字符，必须在 HTML 源代码中使用字符实体（character entities）实例123&amp;entity_name; &amp;#entity_number;&lt;!--如需显示小于号，我们必须这样写：--&gt;&amp;lt; &amp;#60;字符实体表格| 显示结果| 描述| 实体名称| 实体编号||———| —–| ——-|———-|| | 空格| &amp;nbsp;| &amp;#160;|| &lt; | 小于号 |&amp;lt; | &amp;#60;|| &gt; | 大于号| &amp;gt;| &amp;#62;|| &amp; | 和号 | &amp;amp;| &amp;#38;|| “ | 引号 |&amp;quot;| |&amp;#34; ||’ |撇号 |&amp;apos; (IE不支持)| &amp;#39;|| ￠ |分（cent） |&amp;cent; |&amp;#162;|| £| 镑（pound）| &amp;pound; |&amp;#163;||¥ | 元（yen） |&amp;yen;|&amp;#165;|| €| 欧元（euro）| &amp;euro; |&amp;#8364;|| §| 小节 | &amp;sect;| &amp;#167;|| ©| 版权（copyright）| &amp;copy;| &amp;#169;||® |注册商标 | &amp;reg; |&amp;#174;||™ |商标 | &amp;trade;| &amp;#8482;||× |乘号 | &amp;times; |&amp;#215;||÷ |除号 |&amp;divide; | &amp;#247;|—#### 不间断空格(non-breaking space)&gt;HTML 中的常用字符实体是不间断空格(&amp;nbsp;)。&gt;浏览器总是会截短 HTML 页面中的空格。—## HTML链接实例### 3种基本方式 &lt;a href=&quot;/index.html&quot;&gt;一个指向本网站中的一个页面的链接 &lt;a href=&quot;http://www.microsoft.com/&quot;&gt;一个指向另一个页面的链接 &lt;a href=&quot; &quot;&gt;&lt;img src=&quot; &quot;/&gt;&lt;/a&gt;将图像用来作链接 &lt;a href=&quot;mailto:someone@microsoft.com?subject=Hello%20again&quot;&gt;发送邮件&lt;/a&gt;使用邮件链接，其中应该使用 ==%20== 来代替单词之间的空格也可以在链接后面传值，即可以添加邮件的内容&amp;subject=Summer%20Party &amp;body=You%20are%20invited%20to%20a%20big%20summer%20party!### 超链接标签的属性 target=&quot;_blank&quot;链接将在新窗口中打开，默认属性是在本窗口打开新网页 &lt;a href=&quot;#C4&quot;&gt;链接将直接跳转至本页面的某个指定位置### 图像 定义背景图像&lt;body background=&quot;/i/eg_background.jpg&quot;&gt; 定义图像地图map 替换文本属性（==Alt==）&gt; alt 属性用来为图像定义一串预备的可替换的文本。替换文本属性的值是用户定义的。&lt;img src=&quot;boat.gif&quot; alt=&quot;Big Boat&quot;&gt;&gt;浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息,如图 排列图像位置通过改变&lt;img&gt;的align属性 bottom middle top 实例 ：&lt;img src=&quot;/i/eg_cute.gif&quot; align=&quot;bottom&quot;&gt; 浮动文本 ：align=&quot;left&quot; align=&quot;right&quot; 调整图像尺寸 ： width=&quot;200&quot; height=&quot;200&quot; 为图像添加链接属性 实例 ： 123&lt;a href="/example/html/lastpage.html"&gt;&lt;img border="0" src="/i/eg_buttonnext.gif" /&gt;&lt;/a&gt;### 命名锚的语法：&lt;a name=&quot;label&quot;&gt;锚（显示在页面上的文本）&lt;/a&gt;提示 锚的名称可以是任何你喜欢的名字。 您可以使用 id 属性来替代 name 属性，命名锚同样有效。 id适合对特定需求的进行锚定 class适合对一个组进行整体锚定实例1234567891011121314&lt;!--首先，我们在 HTML 文档中对锚进行命名（创建一个书签）：--&gt;&lt;a name="tips"&gt;基本的注意事项 - 有用的提示&lt;/a&gt;&lt;!--然后，我们在同一个文档中创建指向该锚的链接：--&gt;&lt;a href="#tips"&gt;有用的提示&lt;/a&gt;&lt;!--您也可以在其他页面中创建指向该锚的链接：--&gt;&lt;a href="http://www.w3school.com.cn/html/html_links.asp#tips"&gt;有用的提示&lt;/a&gt;&lt;!--在上面的代码中，我们将 # 符号和锚名称添加到 URL 的末端，就可以直接链接到 tips 这个命名锚了。--&gt;## HTML背景1. 背景颜色（Bgcolor）&gt; 背景颜色属性将背景设置为某种颜色。属性值可以是十六进制数、RGB 值或颜色名。123&lt;body bgcolor="#000000"&gt;&lt;body bgcolor="rgb(0,0,0)"&gt;&lt;body bgcolor="black"&gt;2. 背景（Background）背景属性将背景设置为图像。 属性值可以为图像的URL，可可以是相对路径* gif 和 jpg 文件均可用作 HTML 背景1&lt;body background="clouds.gif"&gt;注意： 如果图像尺寸小于浏览器窗口，那么图像将在整个浏览器窗口进行复制。 使用背景图片应考虑是否增加了页面的加载速度，大小不应超过10kb 背景图片应与页面的各种元素搭配，如文字等 背景图片不应太华丽，可能会导致主次不分 HTML 列表 –可嵌套 种类 &lt;ur&gt; 无序列表 &lt;li&gt; 扩展 添加type属性 type =&quot;disc/circle/square&quot; &lt;ol&gt; 有序列表 1. 2. 扩展 添加type属性 type =&quot;a/A/I/i&quot; &lt;dl&gt; 自定义列表 &lt;dt&gt; : 项目的定义 definiton term &lt;dd&gt; : 自定义列表项的内容 definition detail 更多方法样式style中的技巧 li:nth-child(3){ color: red; } : 将每个li列表中的第3个的字体颜色修改为红色 注意： 此修改为对全体列表的第3个进行操作，若需要单独操作，可在代码前加上ul:first-of-type HTML块&amp;内联元素使用&lt;style&gt;定制样式12345678&lt;style&gt;.cities&#123; background-color:balck; color:white; margin:20px; padding:20px;&#125;&lt;/style&gt; 解释 .cites : 设置cities类的样式 margin : 设置页外边距 auto ： 设置页面左右间距相同 padding ： 设置页内边距 块级元素 –在前后显示折行block level element 块级 &lt;h1&gt; &lt;p&gt; &lt;ur&gt; &lt;table&gt; &lt;div&gt; : 如果与 CSS 一同使用，&lt;div&gt; 元素可用于对大的内容块设置样式属性 HTML&lt;div&gt;: 是块级元素。它能够用作其他 HTML 元素的容器。 设置 &lt;div&gt; 元素的类，使我们能够为相同的&lt;div&gt; 元素设置相同的类： 12345678&lt;div class="cities"&gt;&lt;h2&gt;London&lt;/h2&gt;&lt;p&gt;London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.&lt;/p&gt;&lt;/div&gt; div属性 min-width ： 设置最小页面宽度 注意： 为防止出现div标签中出现背景颜色的空白，可使用footer文档来解决另一方案：overflow: hidden#### footer定义和用法&lt;footer&gt; 标签定义文档或节的页脚。&lt;footer&gt; 元素应当含有其包含元素的信息。&gt;页脚通常包含文档的作者、版权信息、使用条款链接、联系信息等等。&gt;您可以在一个文档中使用多个 &lt;footer&gt; 元素。 footer样式属性 clean: both; : 可以去除div中的背景空隙解释—### 内联元素 –通常不以新行开始inline element 内联元素 &lt;b&gt; &lt;td&gt; &lt;a&gt; &lt;img&gt; &lt;span&gt; :当与 CSS 一同使用时，&lt;span&gt; 元素可用于为部分文本设置样式属性HTML &lt;span&gt;: 是行内元素，能够用作文本的容器。 设置 &lt;span&gt; 元素的类，能够为相同的 &lt;span&gt; 元素设置相同的样式。123456789101112&lt;style&gt;span.red &#123; color:red;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;我的&lt;span class="red"&gt;重要的&lt;/span&gt;标题&lt;/h1&gt;&lt;/body&gt;—## HTML表格 HTML | 用途—| —&lt;thead&gt;|表格的页眉&lt;tbody&gt; | 定义表格的主体 &lt;tfoot&gt;|定义表格的页脚 每个表格由 table 标签开始。 每个表格行由 tr 标签开始。 每个表格数据由 td 标签开始。 实例1234567891011&lt;!--两行两列表格--&gt;&lt;table border="1"&gt;&lt;tr&gt; &lt;td&gt;100&lt;/td&gt; &lt;td&gt;200&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;300&lt;/td&gt; &lt;td&gt;400&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 表格的背景颜色与图像 设置整个表格12345&lt;table border="1"bgcolor="red"&gt;&lt;table border="1"background=""&gt; 设置个别格子12345&lt;table&gt;&lt;tr&gt; &lt;td bgcolor="1"&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 表格和边框属性 border=&quot;&quot; 如果不定义边框属性，表格将不显示边框。有时这很有用，但是大多数时候，我们希望显示边框。 表格的标题 &lt;caption&gt;我的标题&lt;/caption&gt; 表格的表头 表格的表头使用 &lt;th&gt; 标签进行定义。 大多数浏览器会把表头显示为粗体居中的文本 实例12345&lt;table border="1"&gt;&lt;tr&gt; &lt;th&gt;这是表头&lt;/th&gt;&lt;/tr&gt;&lt;/table&gt;注意: 为了避免空的单元格的边框没有被显示出来。这种情况，在空单元格中添加一个空格占位符，就可以将边框显示出来。 &lt;td&gt;&amp;nbsp;&lt;/td&gt; 空格由和号开始 (“&amp;”)，然后是字符”nbsp”，并以分号结尾(“;”) 设置跨越多行或多列的表格 &lt;th colspan=&quot;2&quot;&gt; &lt;th rowspan=&quot;2&quot;&gt; 设置单元格内文字的位置 &lt;td align=&quot;left&quot;&gt; FIFT &lt;/td&gt; 表格内也可以设置标签 实例123456789101112131415161718192021222324252627282930&lt;table border="1"&gt;&lt;tr&gt; &lt;td&gt; &lt;p&gt;这是一个段落。&lt;/p&gt; &lt;p&gt;这是另一个段落。&lt;/p&gt; &lt;/td&gt; &lt;td&gt;这个单元包含一个表格： &lt;table border="1"&gt; &lt;tr&gt; &lt;td&gt;A&lt;/td&gt; &lt;td&gt;B&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C&lt;/td&gt; &lt;td&gt;D&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;这个单元包含一个列表： &lt;ul&gt; &lt;li&gt;苹果&lt;/li&gt; &lt;li&gt;香蕉&lt;/li&gt; &lt;li&gt;菠萝&lt;/li&gt; &lt;/ul&gt; &lt;/td&gt; &lt;td&gt;HELLO&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 创建单元格内容与其边框之间的空白 cellpadding 增加单元格之间的距离。 cellspacing1234567891011121314&lt;table border="1" cellpadding="10"&gt;&lt;tr&gt; &lt;td&gt;First&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt; &lt;table border="1" cellspacing="10"&gt;&lt;tr&gt; &lt;td&gt;First&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;—## HTML5的网站布局HTML5 提供的新语义元素来定义网页的不同部分：### HTML5布局语义元素| HTML5 | 语义元素 ||——-| ——–|| header | 定义文档或节的页眉|| nav | 定义导航链接的容器|| section | 定义文档中的节 ||article | 定义独立的自包含文章|| aside | 定义内容之外的内容（比如侧栏）|| footer | 定义文档或节的页脚|| details | 定义额外的细节|| summary | 定义 details 元素的标题|### 例子 可以直接配合样式定义块123456789101112&lt;style&gt;#header &#123; background-color:black; color:white; text-align:center; padding:5px;&#125;&lt;/style&gt;&lt;div id="header"&gt;&lt;h1&gt;City Gallery&lt;/h1&gt;&lt;/div&gt; 可以直接使用布局标签123456789101112&lt;style&gt; header &#123; background-color:black; color:white; text-align:center; padding:5px; &#125;&lt;/style&gt;&lt;header&gt;&lt;h1&gt;City Gallery&lt;/h1&gt;&lt;/header&gt;#### 注意事项 &lt;table&gt; 元素不是作为布局工具而设计的。 &lt;table&gt;元素的作用是显示表格化的数据。### 提交列表#### 账号信息12345678&lt;form action="HTML_submit" method="get" &gt; &lt;label for="name"&gt;Enter your name&lt;/label&gt; &lt;input type="text" id="name" name="name" /&gt; &lt;textarea name="" id="" cols="30" rows="10"&gt; 这是文本输入框，可以输入内容 &lt;/textarea&gt; &lt;input type="submit"/&gt;&lt;/form&gt;解释 设置GET可以在URL中显示传值内容test.html?name=陈俊杰&amp;comment=这是测试&gt; 其中name、comment 均为id属性的内容 label : 标签 设置输入信息 属性 + for : 将label与input连接起来，可点击label直接选中输入框 input ： 输入框 - 类型type： - text : 文本输入 - submit : 提交框 - value : 设置文本值 - name : 规定 input 元素的名称 - reset : 重置输入框 - hidden ： 隐藏密码显示 textarea : 文本输入区域 + 可以输入文本 + rows cols 设置输入框的长宽 (同时也可以使用CSS来设置)优化123456789101112&lt;form action="" method="get"&gt; &lt;p&gt; &lt;label for="name"&gt;Enter Your Name&lt;/label&gt; &lt;input type="text" id="name" name="name" /&gt; &lt;/p&gt; &lt;p&gt; &lt;label for="comment"&gt;You Comment &lt;/label&gt; &lt;textarea id="comment" name="comment"&gt;&lt;/textarea&gt; &lt;/p&gt; &lt;p&gt;&lt;input type="submit" value="go" /&gt;&lt;/p&gt;&lt;/form&gt;12345678910111213&lt;form action="" method="get"&gt; &lt;ul&gt; &lt;li&gt; &lt;label for="name"&gt;Enter Your Name&lt;/label&gt; &lt;input type="text" id="name" name="name" /&gt; &lt;/li&gt; &lt;li&gt; &lt;label for="comment"&gt;You Comment &lt;/label&gt; &lt;textarea id="comment" name="comment" rows="10" cols="10"&gt;&lt;/textarea&gt; &lt;/li&gt; &lt;li&gt;&lt;input type="submit" value="go" /&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/form&gt;123456789101112form ul &#123; list-style: none; margin-bottom: 20px; padding-left: 0px;&#125;label &#123; display: block; cursor: pointer; color: #292929; font-family: sans-serif; padding-bottom: 8px;&#125;注释： 只有设置了 name 属性的表单元素才能在提交表单时传递它们的值。 name 属性用于对提交到服务器后的表单数据进行标识，或者在客户端通过 JavaScript 引用表单数据。 for - name - id 搭配使用 cursor 属性规定要显示的光标的类型（形状）。 cursor: pointer 光标呈现为指示链接的指针（一只手）#### 复选框123&lt;label for="css"&gt;Do You Like Css&lt;/label&gt;&lt;input type="checkbox" name="css" id="css" /&gt;&lt;input type="radio" name="css" id="css"/&gt;复选框类型 checkbox ： 方形 radio ： 圆形可以设置多个复选框123456789&lt;input type="radio" name="css" id="css"/&gt;HTML&lt;input type="radio" name="css" id="css"/&gt;CSS&lt;input type="radio" name="css" id="css"/&gt;PYTOHN&lt;!--这类复选框一旦选中，就不能取消--&gt;&lt;input type="radio" /&gt;HTML&lt;input type="radio"/&gt;CSS&lt;input type="radio" /&gt;PYTOHN上下拉动的复选框范例12345&lt;select&gt;&lt;option&gt;Apples&lt;option selected&gt;Bananas&lt;option&gt;Cherries&lt;/select&gt;—## HTML 脚本&gt; JavaScript 使 HTML 页面具有更强的动态和交互性。。 语法 基本语法 ： &lt;script type=&quot;text/javascript&quot;&gt; 对于不支持Javascript的浏览器 ： &lt;noscript&gt;&lt;/noscript&gt; 解释 &lt;script&gt;标签用于定义客户端脚本，可以包含脚本语言，也可以通过src属性指向外部脚本文件 只有在浏览器不支持脚本或者禁用脚本时，才会显示 noscript 元素中的内容范例123&lt;script type="text/javascript"&gt;document.write("Hello World!")&lt;/script&gt;注意如何应付老式的浏览器&gt;如果浏览器无法识别 &lt;script&gt;标签，那么&lt;script&gt;标签所包含的内容将以文本方式显示在页面上。 解决办法：将脚本隐藏在注释标签当中。 解释： 对于无法识别 &lt;script&gt; 标签的浏览器将忽略这些注释，所以不会将标签的内容显示到页面上。而那些新的浏览器将读懂这些脚本并执行它们，即使代码被嵌套在注释标签内。范例12345&lt;script type="text/javascript"&gt;&lt;!--document.write("Hello World!")//--&gt;&lt;/script&gt;—## HTML头部元素头部基础信息123&lt;meta http-equiv="Content-Type" content="text/html; charset=gb2312" /&gt;&lt;meta http-equiv="Content-Language" content="zh-cn" /&gt;&lt;title&gt;定义标题&lt;/title&gt;### &lt;head&gt;元素&gt;标签都可以添加到 head 部分：&lt;title&gt;、&lt;base&gt;、&lt;link&gt;、&lt;meta&gt;、&lt;script&gt; 以及 &lt;style&gt;### meta属性&gt; 元数据metadata提供数据的信息，元数据不会显示在页面上，但是机器是可读的&gt; meta属性标识了创作者和编辑软件、文档和它的关键词&gt; meta属性始终位于 head 元素中12345678910111213141516&lt;meta http-equiv="Content-Type" content="text/html; charset=gb2312" /&gt;&lt;meta name="author"content="地址内容"&gt;&lt;meta name="revised"content="Keithxodoy,10/7/18"&gt;&lt;meta name="generator"content="Sublime"&gt;&lt;meta name="description"content="HTML examples"&gt;&lt;meta name="keywords"content="HTML, DHTML, CSS, XHTML, JAVAScript, VBScript"&gt; 重新定向新地址12345678910111213&lt;head&gt;&lt;meta http-equiv="Refresh" content="5;url=网页地址" /&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;URL 是 &lt;a href="http://www.地址.com"&gt;http://www.地址.com&lt;/a&gt;&lt;/p&gt;&lt;p&gt;您将在 5 秒内被重定向到新的地址。&lt;/p&gt;&lt;p&gt;如果超过 5 秒后您仍然看到本消息，请点击上面的链接。&lt;/p&gt;&lt;/body&gt;解释 针对搜索引擎的定义页面的描述： &lt;meta name=&quot;description&quot; content=&quot;HTML examples&quot;&gt; 针对搜索引擎的定义页面的关键词：&lt;meta name=&quot;keywords&quot; content=&quot;HTML, CSS, XML&quot; /&gt;—### base标签 使用 base标签使页面中的所有标签在新窗口中打开123&lt;head&gt;&lt;base target="_blank" /&gt;&lt;/head&gt;* 使用base标签使得页面上的所有链接规定默认地址123&lt;head&gt; &lt;base href="http://" /&gt;&lt;/head&gt;### style元素123456&lt;head&gt; &lt;style type="text/css"&gt; body &#123;background-color: yellow&#125; p &#123;color: blue&#125; &lt;/style&gt;&lt;/head&gt;—## HTML 框架### 框架理解框架通过使用框架，你可以在同一个浏览器窗口中显示不止一个页面。每份HTML文档称为一个框架，并且每个框架都独立于其他的框架。 使用框架的坏处： 开发人员必须同时跟踪更多的HTML文档 很难打印整张页面 框架相关标签 frameset 标签也被某些文章和书籍译为框架集 框架结构标签（&lt;frameset&gt;） 定义如何将窗口分割为框架 注意不能将 &lt;body&gt;&lt;/body&gt; 标签与 &lt;frameset&gt;&lt;/frameset&gt; 标签同时使用！ 框架标签（frame） Frame 标签定义了放置在每个框架中的 HTML 文档。 注意为了避免框架有可见边框,用户可以拖动边框来改变它的大小 在 &lt;frame&gt; 标签中加入：noresize=&quot;noresize&quot; 实例123&lt;frameset cols="50%,*,25%"&gt; &lt;frame src="/example/html/frame_a.html" noresize="noresize" /&gt;&lt;/frameset&gt; 框架类型垂直框架1234&lt;frameset cols="25%,50%,25%"&gt; &lt;frame src="/example/html/frame_a.html"&gt; &lt;frame src="/example/html/frame_b.html"&gt; &lt;frame src="/example/html/frame_c.html"&gt; 水平框架1234&lt;frameset rows="25%,50%,25%"&gt; &lt;frame src="/example/html/frame_a.html"&gt; &lt;frame src="/example/html/frame_b.html"&gt; &lt;frame src="/example/html/frame_c.html"&gt; noframes框架noframes 元素可为那些不支持框架的浏览器显示文本。 noframes 元素位于 frameset 元素内部。 重要事项：如果您希望 frameset 添加 &lt;noframes&gt; 标签，就必须把其中的文本包装在&lt;body&gt;&lt;/body&gt;标签中！ 实例 12345678910&lt;frameset cols="25%,50%,25%"&gt; &lt;frame src="/example/html/frame_a.html"&gt; &lt;frame src="/example/html/frame_b.html"&gt; &lt;frame src="/example/html/frame_c.html"&gt;&lt;noframes&gt;&lt;body&gt;您的浏览器无法处理框架！&lt;/body&gt;&lt;/noframes&gt;&lt;/frameset&gt; 混合框架实例 12345678910&lt;frameset rows="50%,50%"&gt;&lt;frame src="/example/html/frame_a.html"&gt;&lt;frameset cols="25%,75%"&gt;&lt;frame src="/example/html/frame_b.html"&gt;&lt;frame src="/example/html/frame_c.html"&gt;&lt;/frameset&gt;&lt;/frameset&gt; 导航框架实例 导航框架包含一个将第二个框架作为目标的链接列表。123456&lt;frameset cols="120,*"&gt; &lt;frame src="/example/html/html_contents.html"&gt; &lt;frame src="/example/html/frame_a.html" name="showframe"&gt;&lt;/frameset&gt; 内联框架（HTML 页中的框架） 应用 ： iframe 用于在网页内显示网页 语法 ： &lt;iframe src=&quot;URL&gt;&lt;/frame&gt; 其中URL指向隔离页面的位置 拓展属性 height=&quot;200&quot; width=&quot;200 : 定义iframe的高度与宽度，默认单位为像素 frameborder=&quot;0 : 用于规定是否显示iframe周围的边框，为”0”即可移除边框 实例1&lt;iframe src="/html/index.asp" height="300px" width="99%" style="margin-top:15px;"&gt;&lt;/iframe&gt; 使用 iframe 作为链接的目标iframe 可用作链接的目标（target）。 链接的 target 属性必须引用 iframe 的 name 属性 实例12&lt;iframe src="demo_iframe.html" name="iframe_a"&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href="http://www.w3school.com.cn" target="iframe_a"&gt;w3school&lt;/a&gt;&lt;/p&gt; 解释 使用iframe的name属性，与a的target关联，使其指向a中的超链接 表格中的框架 分别设置 上 ， 下 ，上下 ，两侧 的表格框线 1234567891011&lt;table frame="above"&gt;&lt;tableframe="below"&gt;&lt;tableframe="hsides"&gt;&lt;table frame="vsides"&gt; 框架属性 noresize=&quot;noresize&quot; 添加该属性后，框架是不可调整尺寸的 设置指向另一个文件内指定的节的链接 &lt;frame src=&quot;/example/html/link.html#C6&quot;&gt; 使用框架导航跳转至指定的节 123456&lt;frameset cols="180,*"&gt;&lt;frame src="/example/html/content.html"&gt;&lt;frame src="/example/html/link.html" name="showframe"&gt;&lt;/frameset&gt; target=&quot;_top&quot; ：跳出被锁定的框架 HTML响应式WEB设计概念 什么是响应式 Web 设计？RWD 指的是响应式 Web 设计（Responsive Web Design） RWD 能够以可变尺寸传递网页 RWD 对于平板和移动设备是必需的 创建方法 手工搭建，设置样式 使用现成的 CSS 框架使用 Bootstrap Bootstrap 是最流行的开发响应式 web 的 HTML, CSS, 和 JS 框架。Bootstrap 帮助您开发在任何尺寸都外观出众的站点：显示器、笔记本电脑、平板电脑或手机 XHTML基础XHTML : EXtensible HyperText Markup Language 疑问： XHTML 中有哪些不同的 DTD ？Strict, Transitional, Frameset （其中Transitional最常用） 诞生原因 由于互联网存在一些不同的浏览器技术。其中一些在计算机上运行，而另一些可能在移动电话或其他小型设备上运行。小型设备往往缺乏解释“糟糕”的标记语言的资源和能力。所以 - 通过结合 XML 和 HTML 的长处，开发出了 XHTML，即XHTML 是作为 XML 被重新设计的 HTML。 由 HTML –&gt; XHTML步骤： 向每张页面的第一行添加 XHTML &lt;!DOCTYPE&gt; 向每张页面的 html 元素添加 xmlns 属性 把所有元素名改为小写 关闭所有空元素 把所有属性名改为小写 为所有属性值加引号 须知：HTML 会被 XHTML 取代。 XHTML 的注意事项文档结构 XHTML DOCTYPE 是强制性的 &lt;html&gt; 中的 XML namespace属性是强制性的 &lt;html&gt;、&lt;head&gt;、&lt;title&gt; 以及 &lt;body&gt; 也是强制性的 元素语法 XHTML 元素必须正确嵌套 XHTML 元素必须始终关闭 XHTML 元素必须小写 XHTML 文档必须有一个根元素 属性语法 XHTML 属性必须使用小写 XHTML 属性值必须用引号包围 XHTML 属性最小化也是禁止的 语法： XHTML 中不允许简写属性 Web Server个人服务器网站搭建 使用因特网服务提供商(ISP) 优点 连接速度快，拥有连接因特网的高速连接 硬件强大，最好查看 ISP 是否提供高效的负载平衡，以及必要的备份服务器 安全性、可靠性高 选择 ISP 的注意事项 24小时支持服务(免费电话服务等) 确保 ISP 执行每日备份的工作 ISP 的流量限制，避免因为网站访问人数激增而引起预料外的支付费用 ISP 的带宽与内容限制，确保可以发布图片或视频、音频等 ISP 支持所需的 e-mail 功能 ISP 确保可以支持个人所需访问的数据库 FAQ HTML 的框架是什么? —见HTML框架 如何解决使用div时，设置背景出现空白间隙？ —见块级元素的div]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python进阶]]></title>
    <url>%2F2018%2F06%2F24%2F%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[函数式编程 原则写代码要遵循==开发封闭==原则，虽然这个原则是用的面向对象开发，但是也适用于函数式编程，简单来说，它规定已经实现的功能代码不允许被修改，但可以被扩展，即： 封闭：已实现的功能代码块 开放：对扩展开发 内容装饰器12345678910def w1(func): def inner(): # 验证1 # 验证2 # 验证3 return func() return inner@w1 # 相当于执行了 w1(f1())def f1(): print('f1') 当写完这段代码后（函数未被执行、未被执行、未被执行），python解释器就会从上到下解释代码，步骤如下：12def w1(func): ==&gt;将w1函数加载到内存@w1 没错，从表面上看解释器仅仅会解释这两句代码，因为函数在没有被调用之前其内部代码不会被执行。 从表面上看解释器着实会执行这两句，但是 @w1 这一句代码里却有大文章 @函数名 : 是python的一种语法糖。 如上例 @w1内部会执行以下操作: 执行w1函数，并将 @w1 下面的 函数 作为 w1 函数的参数即：@w1 等价于 w1(f1)。 所以，内部就会去执行：1234567891011121314151617def inner: #验证 return f1() # func是参数，此时 func 等于 f1return inner # 返回的 inner，inner代表的是函数，非执行函数# 其实就是将原来的 f1 函数塞进另外一个函数中。# 将执行完的 w1 函数返回值赋值给@w1下面的函数的函数名# w1函数的返回值是： def inner: #验证 return 原来f1() # 此处的 f1 表示原来的f1函数# 然后，将此返回值再重新赋值给 f1，即：new_f1 = def inner: #验证 return 原来f1() 如此一来， 即执行了验证的功能，又执行了原来 f 函数的内容，并将原 f1 函数返回值, 返回给业务调用着。 参数传递12345678910111213141516171819202122232425 # 一个参数：def w1(func): def inner(arg): # 验证1 # 验证2 # 验证3 return func(arg) return inner@w1def f1(arg): print('f1')# 两个参数：def w1(func): def inner(arg1,arg2): # 验证1 # 验证2 # 验证3 return func(arg1,arg2) return inner@w1def f1(arg1,arg2): print('f1') 问题: 装饰具有处理n个参数的函数的装饰器？12345678910def w1(func): def inner(*args,**kwargs): # 验证1 # 验证2 # 验证3 return func(*args,**kwargs) return inner@w1def f1(arg1,arg2,arg3): print('f1') 问题：一个函数可以被多个装饰器装饰吗？123456789101112131415161718def w1(func): def inner(*args,**kwargs): # 验证1 # 验证2 # 验证3 return func(*args,**kwargs) return innerdef w2(func): def inner(*args,**kwargs): # 验证1 # 验证2 # 验证3 return func(*args,**kwargs) return inner@w1@w2def f1(arg1,arg2,arg3): print('f1') Lambda函数（匿名函数） 函数 ： 最大程度地复用代码 存在问题：若函数很小，很短，则会造成啰嗦，不方便阅读代码 lambda表达式 一个表达式，函数体相对简单 用法 以lambda开头 紧跟一定的参数 参数后面用冒号和表达式主题分开 只是一个表达式，没有return 实例 stm = lambda x: 100 * x stm(89) ==&gt;8900 高阶函数 定义 ： 把函数作为参数使用的函数 注意 函数名称就是一个变量，即函数可以作为参数 举例12345def funA(n): return n * 100def funB(n): return funA(n) * 3 map函数 对队列里的每个元素进行操作，即映射操作 map函数是系统提供的具有映射功能的函数，返回值是一个迭代对象,类型为map类 注意：若用列表生成式得到的结果为空 格式： map(func, *iterables) 12345678910111213141516# map举例# 列表里的每个元素都乘以10l1 = [ i for i in range(10)]print(l1)for i in li: l2.append(i*10)# 利用map来实现def multen(n): return n*10l2 = map(multen, l1 ) # multen函数作为map函数的一个参数for x in l2: print(l2) reduce函数 作用： 归并，缩减 ，把可迭代对象最后归并为一个结果 作为参数的函数要求： 必须有两个参数 必须有返回结果 理解 ：reduce([1,2,3]) == f(f(f(1),2),3) 即函数嵌套 注意： reduce需要导入functools包 1234567891011from functools import reduce# 定义一个操作函数# 加入操作函数来相加def add(x,y): return x + y## 对列表[1,2,3]执行add的reduce操作rst = reduce(add, [1,2,3])print(rst) filter 函数 过滤函数：对一组数据进行过滤，符合条件的数据会产生一个新的列表返回 与map函数比较 相同 ： 都对列表的每个元素逐一进行操作 不同 ： map 会生成一个跟原来数据相对应的新队列 filter 不一定，只有符合条件的才会进入新队列 filter函数写法 利用给定函数进行判断 返回值为一个布尔值 调用格式 ： filter(f,data) f 为过滤函数 data 为数据 12345678910# 案例 过滤偶数数据形成新列表def isEven(a): return a%2 ==0list = [3,4,56,3,455,67,4,4]rst = filter(isEven, l)print([i for i in rst]) 注意事项 返回的filter内容是一个可迭代对象,需要逐个输出 排序 把一个序列按照给定算法进行排序 key : 在排序前，对每一个元素进行 key 函数运算，可理解为按照 key 函数定义的逻辑进行排序 (key函数为排序函数的内嵌参数) python2 python3 的差别较大 12345678910111213141516# 排序案例1a = [21,5,7,456,45,66]al = sorted(a, reverse=True)print (al)# 排序案例2a = [4.-45.457.74.7.5]# 按照数据的绝对值进行排序 # abs 为求绝对值的函数al = sorted(a, key=abs, reverse=True)print (al)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jedieal]]></title>
    <url>%2F2018%2F06%2F23%2FJedieal%2F</url>
    <content type="text"><![CDATA[Python学习 Python爬虫]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
