<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Computer Science]]></title>
    <url>%2F2018%2F07%2F02%2FComputer%20Science%2F</url>
    <content type="text"><![CDATA[计算机科学理论 比特BIT – binary digit 8 BIT – 1 Byte 计算机中数的表示例如 7 –二进制 以2的幂计算 十进制中 ： 1 2 4 8 … 二进制中 ： 1 1 1 0 … 即 7 的表示为 0111 硬盘组成 由非常微小的磁性粒子组成，有规定的排列顺序，就如小磁针，南北指向可以代表比特中的 0 1 ,就由这些磁针来储存数据 FAQ 对硬盘或软盘进行格式化时会发生什么？ 解答 不会产生很大改变，对盘进行格式化（分区）只会修改几字节或几千字节的信息，使得电脑无法知道原先的文件或文件夹被存放至哪个位置，但是这些数据仍在原先的位置存储着 编译器作用 ？ 解答 将代码文件编译为二进制文件]]></content>
      <categories>
        <category>Basic Knowledge</category>
      </categories>
      <tags>
        <tag>Computer Science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP]]></title>
    <url>%2F2018%2F06%2F30%2FPHP%2F</url>
    <content type="text"><![CDATA[PHP入门 What is PHP??? PHP是一种开源的通用计算机脚本语言，尤其适用于网络开发并可嵌入HTML中使用 是一种创建动态交互性站点的强有力的服务器端脚本语言 PHP： Hypertext Preprocessor –超文本预处理器]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Algorithm]]></title>
    <url>%2F2018%2F06%2F29%2FAlgorithm%2F</url>
    <content type="text"><![CDATA[算法 初探算法Question: 猜价格 价格大了 价格小了 猜对了 递推算法顺推法斐波那契数列12345678910long fib[NUM] = &#123;1, 1&#125;;for (i=2; i&lt;num; i++)&#123; fib[i] = fib[i-1] + fib[i-2] ;&#125;for (i=0; i&lt;num; i++)&#123; printf("兔子目前的总数为:%d\n", fib[i]);&#125; 逆推法案例 : 银行存款的提取利息假设第48个月,利息为1000元 12345678910111213141516171819#include &lt;stdio.h&gt;#define Fetch 1000#define Rate 0.0171int main()&#123; double month[49]; //每个月的本利 int i ; month[48] = (double)Fetch; for(i=47; i&gt;0; i--) //由第48月的利息来倒推处第一个月 &#123; month[i] = (month[i+1]+Fetch)/(1+Rate/12); &#125; for(i=48; i&gt;0; i--) &#123; printf("第%d月末的本利合计为:%.2f\n", i, month[i]); &#125; getch(); return 0;&#125;]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm step</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python数学分析]]></title>
    <url>%2F2018%2F06%2F28%2FPython%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90%2F</url>
    <content type="text"></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python数学分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux教程.md]]></title>
    <url>%2F2018%2F06%2F28%2FLinux%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[LINUX 初探 知识概念文件与用户的关系 所有者 u : 只有一个，但可以交换 用户组 g ： 只有一个，可以使用文件，但不是所有者 其他人 o ： 既不属于所有者，又不是用户组 格式 -： 表示文件 d： 表示目录 l : 表示软连接 例子 ：rw- r– r– rw- : 代表文件的所有者有读写的权限，代表最高权限，不一定需要赋予所有权限，够用就行 r– : 代表赋予用户组的权限 — : 代表赋予其他人的权限 软链接 类似 Windows快捷方式，不决定原文件的权限，只是符号链接 三种用户都有所有权限 rwx ， 文件为 l 开头 ，文件大小较小 硬链接 相当于拷贝 cp -p（保留属性） + 同步更新 一个i节点对应到了两个文件 注意 ： 硬链接不能跨分区 ，而且不能针对目录使用文件操作 r(读) w(写) x(执行) 文件覆盖 y Linux配置设置Linux的IP地址ifconfig eth0 ip地址 添加虚拟网卡 ifconfig eth0:1 198.168.1.1 操作技巧 文件部分名称+ tab ： 自动补全文件名 Ctrl shift = : 放大终端窗口的字体显示 Ctrl - : 缩小终端窗口的字体显示 向上/下箭头:查看历史输入命令 Linux命令查阅命令帮助信息help:command --help : 显示帮助信息man:man command : 查阅使用手册 空格:显示手册下一屏 Enter:下一行 b:回滚一屏 f:前滚一瓶 q:退出 /word:搜索word字符串 命令格式 命令 -选项 -参数 例子 ： ls -la /etc命令的选项可以同时使用，且不分顺序 文件处理命令 文件命令 作用 英文 ls 目录处理命令 list ls -a 查看目录所有文件（含隐藏文件） 可以添加目录参数 ls -l 查看文件的详细信息 ls -lh 人性化显示文件信息,更直观显示文件大小 ls -ld /etc 只示目录本身的信息 ls -i 查看文件的i节点 （即为文件的id信息） 说明 .开头为隐藏文件,需要-a参数查看或者Ubuntu进入目录，按ctrl h就能看见以点号开头的隐藏文件 .当前目录 ..上一级目录 目录命令 英文 作用 mkdir make directories 创建新目录 mkdir -p 递归创建新目录，并且在新目录在再进行创建，可同时创建多个 cd change directories 切换目录 . 代表当前目录 ..回到上一级目录 pwd print working directories 显示当前工作目录 rmdir remove directories 删除空目录 cp copy 拷贝目录或文件 cp -rp [原文件或目录] [目标目录] r为复制目录操作 p为保留文件属性 可以同时复制多个 mv move 目录剪切 移动 mv [绝对路径] [目标路径] 若是要剪切当前路径下的文件 可以直接 mv [文件名] [目标目录] rm remove 删除文件或名录 要慎重 rm -f 强制删除 rm -r 删除目录 rm -rf 直接删除目录 cd 补充 作用 cd ~ 切换到当前用户的主目录 cd . 保持在当前目录不变 cd .. 切换到上级目录 cd - 可以在最近两次工作目录之间来回切换 文件处理 作用 例子 touch 创建空文件 touch /root/book.list cat 浏览文件内容 可以加 -n 参数 cat -n /etc/issue tac cat 的倒序显示可以倒序显示文件内容 more 分页显示文件，适合查看长文件 less 分页浏览 head 查看文件的前n行,默认为10行 head -n 8 tail 查看文件的末尾n行 tail -f /var/log/message 动态显示问文件 链接处理 作用 例子 ln /etc/issue /tmp 默认创建硬链接 ln -s 软连接 注意事项: touch 若要创建带空格文件名的文件，可touch &quot;my love&quot;,即加上双引号 最好不要在Linux中创建带有特殊符号的文件名 cat 不太适合浏览含有非常多内容的文件 more 按 空格 ： 一页一页浏览 按 回车 ： 一行一行浏览 按 q : 退出浏览 cp cp -p : 该属性可以保持复制文件或目录的信息，如创建和修改的时间等 cp -r cp -r : 可以在复制文件或目录时，将文件名进行修改 mv mv 当前目录下的文件名 要修改成的名字 : 可以作为文件名修改命令 less 可以倒回去浏览内容 pageup : 一页一页往回翻 上箭头 : 一行一行往回翻 /service ： / 斜杠可以用来搜索，按 n 可以翻看下一页 权限管理命令命令名称： chmod 命令原意： change the permissions mode of a file 所在路径： /bin/chmod 功能描述： 改变文件或目录权限 可以更改权限的对象： root &amp; 所有者 语法 chmod [{ugoa}{+-=}{rwx}] [文件或目录][mode=421] [文件或目录] -R 递归修改 例子 ： chmod u+x myblog.md – 给所有者(u)赋予myblog文件的写(x)的权限 补充 ： 通过”+-=”来修改权限 一般通过权限的数字来表示： r–4 w–2 x–1 rwx : 7 ; rw- : 6 ; r–: 4 例子 ： chmod 640 myblog.md 注意： chmod 默认改变当前指定的文件或目录，对目录下的子目录不进行修改 若需要修改，则可以添加-R属性 正确理解目录rwx权限 注意：r+x 权限是同时出现的 w权限的说明： 对文件的删除是否能进行，是与用户在该文件所在目录被赋予的权限有关 若用户被给予W权限，则可以删除该文件 改变所有者命令 chown 命令名称 ： chown – change file ownership 命令所在路径 : /bin/chown 执行权限 ： root用户 功能描述 ： 改变文件或目录的所有者 语法- 基本语法 : chown [用户][文件或目录] 注意事项 只有root管理员身份才能修改所有者 修改所有者时，要确保新所有者用户存在 创建新用户 useradd 用户名 ,并且谁创建的文件，谁就是所有者 改变文件所有组 chgrp 命令名称 ： chgrp – change file group ownership 命令所在路径 ： /bin/chgrp 执行权限 ： 所有用户 语法 基本语法 ： chgrp [用户组][文件或目录] 范例 : $ chgrp newgroup doc : 将doc文件的所属组改为newgroup 创建新组 ： groupadd 新组名 设置新建文件的缺省权限 umask 命令名称 ： umask – the user file-creation mask 命令所在路径 ： Shell内置命令 执行权限 ： 所有用户 功能描述 ： 显示、设置文件的缺省权限 语法 基本语法 ： umask [-S] S : 以 rwx 形式显示新建文件的缺省权限 范例 ： $ uamsk -S 拓展语法 umask 023 含义 ：所有权限777 ,将 777 - 023 = 754 ,则为新设置的目录权限为 rwx–rx–r 注意 touch 创建新文件是不具有可执行权限的 注意事项目录：/proc/ /sys/ : 为系统内存和内核，只可读，写入的数据在重启时会清除，不要往内写入文件 /tmp : 临时目录，存放临时文件，建议不要存放重要文件，重启时最好清除 /var : 动态数据保存位置，注意保存缓存，日志已经软件运行产生的文件 /usr : 系统软件资源目录，为“Unix Software Resource”的缩写，用于存放系统软件资源的目录，系统安装的软件资源基本存放在此目录 服务器： 远程服务器不允许关机，只能重启 重启时应该关闭服务 不要在服务器访问高峰运行高负载命令 ，如对大数据的处理 远程配置防火墙（过滤作用）时，不要把自己踢出服务器 其他： 指定合理的密码规范并定期更新 合理分配权限 – 用户的权限越少越好 定期备份重要数据与日志，多处存储 Linux命令若未指定目录，则默认在当前目录里执行操作 Linux 新建的文件的 x(可执行)权限会自动去除]]></content>
      <categories>
        <category>LINUX</category>
      </categories>
      <tags>
        <tag>Linux初阶</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[乐理知识.md]]></title>
    <url>%2F2018%2F06%2F28%2F%E4%B9%90%E7%90%86%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[乐理入门 泛音 概念：物体局部振动产生的复合音的总和 以弦的振动来说，除了整个弦的振动，其二分之一，三分之一…各段都在振动，共同发音 作用：对音色具有决定性的作用，通过增减泛音的音量，可对音色有明显的改变 音阶 什么是音阶 调式中由高低次序（上下行），由主音到主音排列起来 音级概念乐音体系中的各个音，例如钢琴有88个不同音高的音，则音级为88 基本音级 从 do–si 七个独立音叫做基本音级，并通过字母或唱名标记 钢琴白键便是7个基本音级的循环重复 Do Re Mi Fa Sol La S 对应 C D E F G A B 两个相邻具有相同名称的音级叫做八度, 即相差一个八度，一个八度音阶共有7个基本音级和5个变化音级，共12个音组成（12平均音） 变化音级升高或者降低基本音级而获得的音，钢琴中用黑键表示 变化音级标注法 升 or “#” 降 or “b” 重升 or “x” 重降 or “bb” 其中音高相同而意义和记法不同的音叫做“等音” ，如#C , bD 乐音分组目的: 由于乐音体系中音级会循环出现，于是为了区分音名相同而音高不同，将其分组 以钢琴为例，最中央的12个音级叫做小字一组 音域及音区总音域概念: 指音列的总范围，乐器和人声的音域指能发生出的最高或最低音的范围 不同音区表现不同的音色/情感等特征 五线谱 概念: 通用的标准记谱法，由五条平行横线构成 音符通过在五线谱中记录在线上或间内 作用: 音符位置决定音的高低，形状决定音的长短 注意: 当五线不足以记录时，通过上加或下加线** 来解决 五线谱由自下而上计算，音高也由自下而上由低到高 多声部五线谱 多声部需要数行五线谱来记录，需要使用连谱号连接 连谱号: 包括起线（连接数行五线谱的垂直线）和括线（连接数行五线谱的括弧） 在总谱中，使用小节线连接同种类型的乐器连谱号括弧 花线 钢琴/风琴/手风琴/竖琴 直线 合奏/合唱乐队 有时在直线外还会加上辅助括线， 起线 位置在五线谱的开端，需连接全部的五线谱]]></content>
      <categories>
        <category>How to become a DJ</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[电音入门.md]]></title>
    <url>%2F2018%2F06%2F28%2F%E7%94%B5%E9%9F%B3%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[一入电音深似海引言 Can u feel the volume of my love for u 电音风格Techno – 高科技舞曲 理解 ： 重复动次打次 House music –舞蹈音乐 场景 ： 各大酒吧 风格 ： 类似Techno, 但高潮部分，会突然爆发不同的旋律 辨别 4/4拍 动次动次 动 ： 大姑 次 ： 镲 BPM(beats per minutes) : 118-135bpm ,最常见的为 128bpm Progressive House 辨别 ： 一层一层的堆叠感 拍数不断堆叠 内容 一定具有VOCAL(人声)，和弦等 Electric House 辨别 ： 电子制作 人造的音色 内容 与鼓点同步的Bass声音(sub) 类似 dong-en “咚-嗯” Big Room House 辨别 ： 单一洗脑 富有侵略性的旋律 内容 一串串 “叭叭叭”的声音 类似喇叭的声音 Melbourne Bounce 辨别 : 慢摇 缩放感 发出”嗯-嘚”的声音 Deep House 辨别 ： 结构稳定 情绪起伏小 速度较慢 120bpm Tropical House 辨别 : 热带感的乐器、音色 有种令人想跳舞的感觉 Future House 辨别 ： 常以 bassline 主旋律 有点空空的感觉 由一条bass的主旋律 Tech House 辨别 ： 碎拍、旋律不明确 打击乐特别多 次次次的声音特别多 Techno &amp; House Dubstep 风格 ： 偏向黑暗系， 嗡嗡嘭嘭感十足 Trap]]></content>
      <categories>
        <category>How to become a DJ</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多进程初探]]></title>
    <url>%2F2018%2F06%2F26%2F%E5%A4%9A%E8%BF%9B%E7%A8%8B%26%E5%A4%9A%E7%BA%BF%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[搞定多进程与多线程 多线程概念程序: 代码以文本的形式存入一个文档 进程: 程序运行的一个状态，包含地址空间、内存、数据栈等 每个进程由自己==完全独立==的运行环境，多进程共享数据 轻量化的进程 一个进程的多个线程间共享数据和上下文运行环境 共享、互斥问题 线程: 一个进程的独立运行片段，一个进程可以由多个线程 全局解释器锁(GIL) Python代码的执行是由python虚拟机进行控制 在主循环中有一个控制线程在执行 Python包thread： 有问题，不好用 python3： _thread* `import _thread as thread ` threading: 通行的包 直接利用threading.Thread生成Thread t = threading.Thread(target=xxx, args=()) t.start(): 启动多线程,可独立于主线程 t.join() : 等待多线程执行完成 守护线程 daemon子线程会在主线程结束后自动退出**，一般认为守护线程不重要或不允许离开主线程独立运行 设置守护线程–在t.start()前* `t.setDaemon(True)` 1234if __name__ == "__main__" main() while True: time.sleep(5) 启动线程–使用多线程执行某个函数thread.start_new_thread(loop,() 理解启动多线程: 相当于给多个工人分配任务，自己可以做别的事情，等自己事情做完了，工人也恰好完工（完成时间非常快） 注意事项 启动多线程函数为 ==start_new_thread== 参数为两个，一个是运行的==函数名==，另一个是==函数参数==作为元组使用，若为空，则使用空元组，若函数只有一个参数，则在参数后需要一个==逗号==，标识为元组启动多线程 ==一定要使用while语句==，因为启动多线程后本程序就作为主线程存在，如果主线程执行完毕，则子线程可能也会没执行完就终止 共享变量共享变量: 当多个线程同时访问一个相同变量时，会产生共享变量问题,即会产生冲突 解决变量锁(Lock)锁: 是一个标志，表示一个线程在占用一些资源 使用方法 上锁 可以放心使用共享资源 取消锁，释放锁 12345678import threadinglock = threading.Lock()# 上锁，申请锁lock.acquire()# 使用结束后，释放锁lock.release() 线程安全问题概念: 如果一个资源/变量，对于多线程来说，不用加锁也不会引起任何问题，则称为线程安全 类型 线程安全变量： queue 线程不安全变量： list 、 set 、 dict 生产者消费问题 一个模型，可以用来搭建消息队列 queue: 一个用来存放变量的数据结构，特点为先进先出，内部元素排队，可以理解为一个特殊的list 方法 queue.Queue() : 生成队列的实例 queue.qsize() : 计算队列的长度 queue.push() : 将数据放入队列中 queue.get() : 从queue中取出一个值 12345# python2from Queue import Queue# python3import queue 123456789101112131415161718import threadingimport time# 直接继承Thread方法class Producer(threading.Thread) def run(self): global queue count = 0 while True: # qsize计算队列的长度 if queue.qsize() &lt; 1000 for i in range(100): count = count + 1 msg = "生产产品" + str(count) # 将数据放入队列中 queue.put(msg) print(msg) time.sleep(0.5) 12345678910class Consumer(threading.Thread) def run(self): global queue while True: if queue.qsize() &gt; 100 for i in range(3): # get是从queue中取出一个值 msg = self.name + "消费了" + queue.get() print(msg) time.sleep(1) 解释: 对于继承Thread,必须重写run(self)函数，run(self)函数为调用Thread时，自动调用的函数 死锁现象解释 集合中的每一个进程都在等待只能由本集合中的其他进程才能引发的事件，那么该组进程是死锁的 例如，如果线程A锁住了记录1并等待记录2，而线程B锁住了记录2并等待记录1，这样两个线程就发生了死锁现象。 解决 对申请锁的内容设置超时时间 lock.acquire(timeout=2) semaphore 允许一个资源最多由几个多线程同时使用 semaphore = threading.Semaphore(3) : 设置最多3个线程同时使用资源 可重入锁 lock = threading.RLock()]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端深似海]]></title>
    <url>%2F2018%2F06%2F24%2FHTML%2F</url>
    <content type="text"><![CDATA[逐步学会HTML HTML基础标签 添加水平线 &lt;hr/&gt; 内容居中 align=&quot;center&quot; 换行 &lt;br/&gt; 注释 &lt;!-- --&gt; 背景颜色 bgcolor=&quot;blue&quot; 链接 &lt;a href=&quot;http://&quot; &gt; 图像 &lt;img src=&quot; &quot;&gt; 个性化设置HTML属性 style属性 background-color 属性为元素定义了背景颜色 实例：style=&quot;background-color:red&quot; font-family、color 以及 font-size 属性分别定义元素中文本的字体系列、颜色和字体尺寸 实例：style=&quot;font-family:arial;color:red;font-size:20px;&quot; text-align 属性规定了元素中文本的水平对齐方式 实例：style=&quot;text-align:center&quot; color 设置字体颜色 ： color: red 特殊用法 : color: rgb(100,200,500); rgb: red green blue text-decoration 设置文字修饰 例如 text-decoration: underline – 设置下划线 text-decoration: none –不设置任何文字修饰 HTML中的样式 stylesheet123456&lt;style type="text/css"&gt;h1 &#123;color: red&#125;p &#123;color: blue&#125;body &#123;background-color: red&#125;p &#123;margin-left: 20px&#125;&lt;/style&gt; 添加到部分的样式信息对 HTML 进行格式化 HTML的内容格式化1234&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=gb2312" /&gt;&lt;meta http-equiv="Content-Language" content="zh-cn" /&gt;&lt;/head&gt; 当特殊的样式需要应用到个别元素时，就可以使用内联样式123&lt;p style="color: red; margin-left: 20px"&gt;This is a paragraph&lt;/p&gt; 使用样式属性做一个没有下划线的链接1&lt;a href="/example/html/lastpage.html" style="text-decoration:none"&gt; 自定义下划线链接 text-decoration: underline &lt;link&gt; 标签链接到一个外部样式表12&lt;head&gt;&lt;link rel="stylesheet" type="text/css" href="/html/css"/&gt; 设置HTML的aside侧栏的边距1234aside ul &#123; list-style: none; padding-left: 0;&#125; 例子12345678910111213141516&lt;div class="wrap"&gt; &lt;h1&gt;mytest&lt;/h1&gt; &lt;p&gt;The cat was fast.&lt;/p&gt; &lt;div class="content"&gt; &lt;h2&gt;content&lt;/h2&gt; &lt;p&gt;paragraph&lt;/p&gt; &lt;/div&gt; &lt;aside&gt; &lt;h2&gt;mysidebar&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;about&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/aside&gt;&lt;/div&gt; 1234.wrap &#123; width: 600px; margin: auto;&#125; 注意： 为显示aside的侧边效果，首先要对aside所在的div中，设置div的属性 为使得页面更好的附和浏览器，可以设置宽度，高度为百分比，如width: 80% 设置样式元素的展示方式dispaly code function display : inline 将样式元素在一条线上显示 display : block 将样式元素块显示 拓展 :hover :hover 选择器鼠标指针在其上浮动的链接设置样式。 hover 选择器可用于 所有元素 ，不只是链接。 例：12345li a:hover&#123; text-decoration: underline color: #666; font-size: 60px;&#125; :link 选择器设置指向未被访问页面的链接的样式 :visited 选择器用于设置指向已被访问的页面的链接 :active 选择器用于活动链接。 注释：在 CSS 定义中，:hover 必须位于 :link 和 :visited 之后（如果存在的话），这样样式才能生效。 HTML文本实例化基础&lt;b&gt; 粗体 &lt;strong&gt; 字体加强 &lt;big&gt; 字体变大 &lt;em&gt; 字体强调 &lt;i&gt; 意大利斜体 &lt;small&gt; 字体减小 &lt;sub&gt; 字体下放 &lt;sup&gt;字体上放 &lt;del&gt; 删除字 &lt;ins&gt; 下划线 拓展 &lt;pre&gt; 预格式文本，可以很好的显示计算机代码，可以对空行和空格进行控制。 &lt;code&gt; &lt;var&gt; 常用于显示计算机/编程代码,变量 &lt;kbd&gt; 定义键盘代码 &lt;tt&gt; 定义打字机代码 &lt;font color=&quot;&quot;&gt; 设置字体颜色 &lt;address&gt; 可以在 HTML 文件中写地址 &lt;acronym title=&quot;World Wide Web&quot;&gt;WWW&lt;/acronym&gt; &lt;abbr title=&quot;etcetera&quot;&gt;etc.&lt;/abbr&gt; 可以将 title 里的内容缩写为自己定义的形式 并且首字母缩写 &lt;bdo dir=&quot;rtl&quot;&gt; 可以将 中的内容倒序输出 &lt;cite&gt; 定义引用、引证 &lt;dfn&gt; 定义一个定义项目 &lt;blockquote&gt; 可以进行文本的长引用 &lt;q&gt; 可以进行文本的短引用 * 使用 blockquote 元素的话，浏览器会插入换行和外边距 而 q 元素不会有任何特殊的呈现。 HTML链接实例3种基本方式 &lt;a href=&quot;/index.html&quot;&gt; 一个指向本网站中的一个页面的链接 &lt;a href=&quot;http://www.microsoft.com/&quot;&gt; 一个指向另一个页面的链接 &lt;a href=&quot; &quot;&gt;&lt;img src=&quot; &quot;/&gt;&lt;/a&gt; 将图像用来作链接 &lt;a href=&quot;mailto:someone@microsoft.com?subject=Hello%20again&quot;&gt;发送邮件&lt;/a&gt; 使用邮件链接，其中应该使用 ==%20== 来代替单词之间的空格 也可以在链接后面传值，即可以添加邮件的内容 &amp;subject=Summer%20Party &amp;body=You%20are%20invited%20to%20a%20big%20summer%20party! 超链接标签的属性 target=&quot;_blank&quot; 链接将在新窗口中打开，默认属性是在本窗口打开新网页 &lt;a href=&quot;#C4&quot;&gt; 链接将直接跳转至本页面的某个指定位置 图像 定义背景图像 &lt;body background=&quot;/i/eg_background.jpg&quot;&gt; 定义图像地图 map 替换文本属性（==Alt==） alt 属性用来为图像定义一串预备的可替换的文本。替换文本属性的值是用户定义的。 &lt;img src=&quot;boat.gif&quot; alt=&quot;Big Boat&quot;&gt; 浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息,如图 排列图像位置 通过改变&lt;img&gt;的align属性 bottom middle top 实例 ：&lt;img src=&quot;/i/eg_cute.gif&quot; align=&quot;bottom&quot;&gt; 浮动文本 ：align=&quot;left&quot; align=&quot;right&quot; 调整图像尺寸 ： width=&quot;200&quot; height=&quot;200&quot; 为图像添加链接属性 实例 ： 123&lt;a href="/example/html/lastpage.html"&gt;&lt;img border="0" src="/i/eg_buttonnext.gif" /&gt;&lt;/a&gt; 命名锚的语法：&lt;a name=&quot;label&quot;&gt;锚（显示在页面上的文本）&lt;/a&gt; 提示 锚的名称可以是任何你喜欢的名字。 您可以使用 id 属性来替代 name 属性，命名锚同样有效。 id适合对特定需求的进行锚定 class适合对一个组进行整体锚定 实例1234567891011121314&lt;!--首先，我们在 HTML 文档中对锚进行命名（创建一个书签）：--&gt;&lt;a name="tips"&gt;基本的注意事项 - 有用的提示&lt;/a&gt;&lt;!--然后，我们在同一个文档中创建指向该锚的链接：--&gt;&lt;a href="#tips"&gt;有用的提示&lt;/a&gt;&lt;!--您也可以在其他页面中创建指向该锚的链接：--&gt;&lt;a href="http://www.w3school.com.cn/html/html_links.asp#tips"&gt;有用的提示&lt;/a&gt;&lt;!--在上面的代码中，我们将 # 符号和锚名称添加到 URL 的末端，就可以直接链接到 tips 这个命名锚了。--&gt; HTML背景 背景颜色（Bgcolor） 背景颜色属性将背景设置为某种颜色。属性值可以是十六进制数、RGB 值或颜色名。 123&lt;body bgcolor="#000000"&gt;&lt;body bgcolor="rgb(0,0,0)"&gt;&lt;body bgcolor="black"&gt; 背景（Background）背景属性将背景设置为图像。 属性值可以为图像的URL，可可以是相对路径 gif 和 jpg 文件均可用作 HTML 背景 1&lt;body background="clouds.gif"&gt; 注意： 如果图像尺寸小于浏览器窗口，那么图像将在整个浏览器窗口进行复制。 使用背景图片应考虑是否增加了页面的加载速度，大小不应超过10kb 背景图片应与页面的各种元素搭配，如文字等 背景图片不应太华丽，可能会导致主次不分 HTML 列表 –可嵌套 种类 &lt;ur&gt; 无序列表 &lt;li&gt; 扩展 添加type属性 type =&quot;disc/circle/square&quot; &lt;ol&gt; 有序列表 1. 2. 扩展 添加type属性 type =&quot;a/A/I/i&quot; &lt;dl&gt; 自定义列表 &lt;dt&gt; : 项目的定义 definiton term &lt;dd&gt; : 自定义列表项的内容 definition detail 更多方法样式style中的技巧 li:nth-child(3){ color: red; } : 将每个li列表中的第3个的字体颜色修改为红色 注意： 此修改为对全体列表的第3个进行操作，若需要单独操作，可在代码前加上ul:first-of-type HTML块&amp;内联元素使用&lt;style&gt;定制样式12345678&lt;style&gt;.cities&#123; background-color:balck; color:white; margin:20px; padding:20px;&#125;&lt;/style&gt; 解释 .cites : 设置cities类的样式 margin : 设置页外边距 auto ： 设置页面左右间距相同 padding ： 设置页内边距 块级元素 –在前后显示折行block level element 块级 &lt;h1&gt; &lt;p&gt; &lt;ur&gt; &lt;table&gt; &lt;div&gt; : 如果与 CSS 一同使用，&lt;div&gt; 元素可用于对大的内容块设置样式属性 HTML&lt;div&gt;: 是块级元素。它能够用作其他 HTML 元素的容器。 设置 &lt;div&gt; 元素的类，使我们能够为相同的&lt;div&gt; 元素设置相同的类： 12345678&lt;div class="cities"&gt;&lt;h2&gt;London&lt;/h2&gt;&lt;p&gt;London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.&lt;/p&gt;&lt;/div&gt; div属性 min-width ： 设置最小页面宽度 注意： 为防止出现div标签中出现背景颜色的空白，可使用footer文档来解决另一方案：overflow: hidden#### footer定义和用法&lt;footer&gt; 标签定义文档或节的页脚。&lt;footer&gt; 元素应当含有其包含元素的信息。&gt;页脚通常包含文档的作者、版权信息、使用条款链接、联系信息等等。&gt;您可以在一个文档中使用多个 &lt;footer&gt; 元素。 footer样式属性 clean: both; : 可以去除div中的背景空隙解释—### 内联元素 –通常不以新行开始inline element 内联元素 &lt;b&gt; &lt;td&gt; &lt;a&gt; &lt;img&gt; &lt;span&gt; :当与 CSS 一同使用时，&lt;span&gt; 元素可用于为部分文本设置样式属性HTML &lt;span&gt;: 是行内元素，能够用作文本的容器。 设置 &lt;span&gt; 元素的类，能够为相同的 &lt;span&gt; 元素设置相同的样式。123456789101112&lt;style&gt;span.red &#123; color:red;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;我的&lt;span class="red"&gt;重要的&lt;/span&gt;标题&lt;/h1&gt;&lt;/body&gt;—## HTML表格 HTML | 用途—| —&lt;thead&gt;|表格的页眉&lt;tbody&gt; | 定义表格的主体 &lt;tfoot&gt;|定义表格的页脚 每个表格由 table 标签开始。 每个表格行由 tr 标签开始。 每个表格数据由 td 标签开始。 实例1234567891011&lt;!--两行两列表格--&gt;&lt;table border="1"&gt;&lt;tr&gt; &lt;td&gt;100&lt;/td&gt; &lt;td&gt;200&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;300&lt;/td&gt; &lt;td&gt;400&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 表格的背景颜色与图像 设置整个表格12345&lt;table border="1"bgcolor="red"&gt;&lt;table border="1"background=""&gt; 设置个别格子12345&lt;table&gt;&lt;tr&gt; &lt;td bgcolor="1"&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 表格和边框属性 border=&quot;&quot; 如果不定义边框属性，表格将不显示边框。有时这很有用，但是大多数时候，我们希望显示边框。 表格的标题 &lt;caption&gt;我的标题&lt;/caption&gt; 表格的表头 表格的表头使用 &lt;th&gt; 标签进行定义。 大多数浏览器会把表头显示为粗体居中的文本 实例12345&lt;table border="1"&gt;&lt;tr&gt; &lt;th&gt;这是表头&lt;/th&gt;&lt;/tr&gt;&lt;/table&gt;注意: 为了避免空的单元格的边框没有被显示出来。这种情况，在空单元格中添加一个空格占位符，就可以将边框显示出来。 &lt;td&gt;&amp;nbsp;&lt;/td&gt; 空格由和号开始 (“&amp;”)，然后是字符”nbsp”，并以分号结尾(“;”) 设置跨越多行或多列的表格 &lt;th colspan=&quot;2&quot;&gt; &lt;th rowspan=&quot;2&quot;&gt; 设置单元格内文字的位置 &lt;td align=&quot;left&quot;&gt; FIFT &lt;/td&gt; 表格内也可以设置标签 实例123456789101112131415161718192021222324252627282930&lt;table border="1"&gt;&lt;tr&gt; &lt;td&gt; &lt;p&gt;这是一个段落。&lt;/p&gt; &lt;p&gt;这是另一个段落。&lt;/p&gt; &lt;/td&gt; &lt;td&gt;这个单元包含一个表格： &lt;table border="1"&gt; &lt;tr&gt; &lt;td&gt;A&lt;/td&gt; &lt;td&gt;B&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C&lt;/td&gt; &lt;td&gt;D&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;这个单元包含一个列表： &lt;ul&gt; &lt;li&gt;苹果&lt;/li&gt; &lt;li&gt;香蕉&lt;/li&gt; &lt;li&gt;菠萝&lt;/li&gt; &lt;/ul&gt; &lt;/td&gt; &lt;td&gt;HELLO&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 创建单元格内容与其边框之间的空白 cellpadding 增加单元格之间的距离。 cellspacing1234567891011121314&lt;table border="1" cellpadding="10"&gt;&lt;tr&gt; &lt;td&gt;First&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt; &lt;table border="1" cellspacing="10"&gt;&lt;tr&gt; &lt;td&gt;First&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;—## HTML5的网站布局HTML5 提供的新语义元素来定义网页的不同部分：### HTML5布局语义元素| HTML5 | 语义元素 ||——-| ——–|| header | 定义文档或节的页眉|| nav | 定义导航链接的容器|| section | 定义文档中的节 ||article | 定义独立的自包含文章|| aside | 定义内容之外的内容（比如侧栏）|| footer | 定义文档或节的页脚|| details | 定义额外的细节|| summary | 定义 details 元素的标题|### 例子 可以直接配合样式定义块123456789101112&lt;style&gt;#header &#123; background-color:black; color:white; text-align:center; padding:5px;&#125;&lt;/style&gt;&lt;div id="header"&gt;&lt;h1&gt;City Gallery&lt;/h1&gt;&lt;/div&gt; 可以直接使用布局标签123456789101112&lt;style&gt; header &#123; background-color:black; color:white; text-align:center; padding:5px; &#125;&lt;/style&gt;&lt;header&gt;&lt;h1&gt;City Gallery&lt;/h1&gt;&lt;/header&gt;### 注意事项 &lt;table&gt; 元素不是作为布局工具而设计的。 &lt;table&gt;元素的作用是显示表格化的数据。### 提交列表#### 账号信息12345678&lt;form action="HTML_submit" method="get" &gt; &lt;label for="name"&gt;Enter your name&lt;/label&gt; &lt;input type="text" id="name" name="name" /&gt; &lt;textarea name="" id="" cols="30" rows="10"&gt; 这是文本输入框，可以输入内容 &lt;/textarea&gt; &lt;input type="submit"/&gt;&lt;/form&gt;解释 设置GET可以在URL中显示传值内容test.html?name=陈俊杰&amp;comment=这是测试&gt; 其中name、comment 均为id属性的内容 label : 标签 设置输入信息 属性 + for : 将label与input连接起来，可点击label直接选中输入框 input ： 输入框 - 类型type： - text : 文本输入 - submit : 提交框 - value : 设置文本值 - name : 规定 input 元素的名称。 textarea : 文本输入区域 + 可以输入文本 + rows cols 设置输入框的长宽 (同时也可以使用CSS来设置)优化123456789101112&lt;form action="" method="get"&gt; &lt;p&gt; &lt;label for="name"&gt;Enter Your Name&lt;/label&gt; &lt;input type="text" id="name" name="name" /&gt; &lt;/p&gt; &lt;p&gt; &lt;label for="comment"&gt;You Comment &lt;/label&gt; &lt;textarea id="comment" name="comment"&gt;&lt;/textarea&gt; &lt;/p&gt; &lt;p&gt;&lt;input type="submit" value="go" /&gt;&lt;/p&gt;&lt;/form&gt;12345678910111213&lt;form action="" method="get"&gt; &lt;ul&gt; &lt;li&gt; &lt;label for="name"&gt;Enter Your Name&lt;/label&gt; &lt;input type="text" id="name" name="name" /&gt; &lt;/li&gt; &lt;li&gt; &lt;label for="comment"&gt;You Comment &lt;/label&gt; &lt;textarea id="comment" name="comment" rows="10" cols="10"&gt;&lt;/textarea&gt; &lt;/li&gt; &lt;li&gt;&lt;input type="submit" value="go" /&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/form&gt;123456789101112form ul &#123; list-style: none; margin-bottom: 20px; padding-left: 0px;&#125;label &#123; display: block; cursor: pointer; color: #292929; font-family: sans-serif; padding-bottom: 8px;&#125;注释： 只有设置了 name 属性的表单元素才能在提交表单时传递它们的值。 name 属性用于对提交到服务器后的表单数据进行标识，或者在客户端通过 JavaScript 引用表单数据。 for - name - id 搭配使用 cursor 属性规定要显示的光标的类型（形状）。 cursor: pointer 光标呈现为指示链接的指针（一只手）#### 复选框123&lt;label for="css"&gt;Do You Like Css&lt;/label&gt;&lt;input type="checkbox" name="css" id="css" /&gt;&lt;input type="radio" name="css" id="css"/&gt;复选框类型 checkbox ： 方形 radio ： 圆形可以设置多个复选框123456789&lt;input type="radio" name="css" id="css"/&gt;HTML&lt;input type="radio" name="css" id="css"/&gt;CSS&lt;input type="radio" name="css" id="css"/&gt;PYTOHN&lt;!--这类复选框一旦选中，就不能取消--&gt;&lt;input type="radio" /&gt;HTML&lt;input type="radio"/&gt;CSS&lt;input type="radio" /&gt;PYTOHN—## HTML 脚本&gt; JavaScript 使 HTML 页面具有更强的动态和交互性。。 语法 基本语法 ： &lt;script type=&quot;text/javascript&quot;&gt; 对于不支持Javascript的浏览器 ： &lt;noscript&gt;&lt;/noscript&gt; 解释 &lt;script&gt;标签用于定义客户端脚本，可以包含脚本语言，也可以通过src属性指向外部脚本文件 只有在浏览器不支持脚本或者禁用脚本时，才会显示 noscript 元素中的内容范例123&lt;script type="text/javascript"&gt;document.write("Hello World!")&lt;/script&gt;注意如何应付老式的浏览器&gt;如果浏览器无法识别 &lt;script&gt;标签，那么&lt;script&gt;标签所包含的内容将以文本方式显示在页面上。 解决办法：将脚本隐藏在注释标签当中。 解释： 对于无法识别 &lt;script&gt; 标签的浏览器将忽略这些注释，所以不会将标签的内容显示到页面上。而那些新的浏览器将读懂这些脚本并执行它们，即使代码被嵌套在注释标签内。范例12345&lt;script type="text/javascript"&gt;&lt;!--document.write("Hello World!")//--&gt;&lt;/script&gt;—## HTML 框架### 框架理解框架通过使用框架，你可以在同一个浏览器窗口中显示不止一个页面。每份HTML文档称为一个框架，并且每个框架都独立于其他的框架。 使用框架的坏处： 开发人员必须同时跟踪更多的HTML文档 很难打印整张页面 框架相关标签 frameset 标签也被某些文章和书籍译为框架集 框架结构标签（&lt;frameset&gt;） 定义如何将窗口分割为框架 注意不能将 &lt;body&gt;&lt;/body&gt; 标签与 &lt;frameset&gt;&lt;/frameset&gt; 标签同时使用！ 框架标签（frame） Frame 标签定义了放置在每个框架中的 HTML 文档。 注意为了避免框架有可见边框,用户可以拖动边框来改变它的大小 在 &lt;frame&gt; 标签中加入：noresize=&quot;noresize&quot; 实例123&lt;frameset cols="50%,*,25%"&gt; &lt;frame src="/example/html/frame_a.html" noresize="noresize" /&gt;&lt;/frameset&gt; 框架类型垂直框架1234&lt;frameset cols="25%,50%,25%"&gt; &lt;frame src="/example/html/frame_a.html"&gt; &lt;frame src="/example/html/frame_b.html"&gt; &lt;frame src="/example/html/frame_c.html"&gt; 水平框架1234&lt;frameset rows="25%,50%,25%"&gt; &lt;frame src="/example/html/frame_a.html"&gt; &lt;frame src="/example/html/frame_b.html"&gt; &lt;frame src="/example/html/frame_c.html"&gt; noframes框架noframes 元素可为那些不支持框架的浏览器显示文本。 noframes 元素位于 frameset 元素内部。 重要事项：如果您希望 frameset 添加 &lt;noframes&gt; 标签，就必须把其中的文本包装在&lt;body&gt;&lt;/body&gt;标签中！ 实例 12345678910&lt;frameset cols="25%,50%,25%"&gt; &lt;frame src="/example/html/frame_a.html"&gt; &lt;frame src="/example/html/frame_b.html"&gt; &lt;frame src="/example/html/frame_c.html"&gt;&lt;noframes&gt;&lt;body&gt;您的浏览器无法处理框架！&lt;/body&gt;&lt;/noframes&gt;&lt;/frameset&gt; 混合框架实例 12345678910&lt;frameset rows="50%,50%"&gt;&lt;frame src="/example/html/frame_a.html"&gt;&lt;frameset cols="25%,75%"&gt;&lt;frame src="/example/html/frame_b.html"&gt;&lt;frame src="/example/html/frame_c.html"&gt;&lt;/frameset&gt;&lt;/frameset&gt; 导航框架实例 导航框架包含一个将第二个框架作为目标的链接列表。123456&lt;frameset cols="120,*"&gt; &lt;frame src="/example/html/html_contents.html"&gt; &lt;frame src="/example/html/frame_a.html" name="showframe"&gt;&lt;/frameset&gt; 内联框架（HTML 页中的框架） 应用 ： iframe 用于在网页内显示网页 语法 ： &lt;iframe src=&quot;URL&gt;&lt;/frame&gt; 其中URL指向隔离页面的位置 拓展属性 height=&quot;200&quot; width=&quot;200 : 定义iframe的高度与宽度，默认单位为像素 frameborder=&quot;0 : 用于规定是否显示iframe周围的边框，为”0”即可移除边框 实例1&lt;iframe src="/html/index.asp" height="300px" width="99%" style="margin-top:15px;"&gt;&lt;/iframe&gt; 使用 iframe 作为链接的目标iframe 可用作链接的目标（target）。 链接的 target 属性必须引用 iframe 的 name 属性 实例12&lt;iframe src="demo_iframe.html" name="iframe_a"&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href="http://www.w3school.com.cn" target="iframe_a"&gt;w3school&lt;/a&gt;&lt;/p&gt; 解释 使用iframe的name属性，与a的target关联，使其指向a中的超链接 表格中的框架 分别设置 上 ， 下 ，上下 ，两侧 的表格框线 1234567891011&lt;table frame="above"&gt;&lt;tableframe="below"&gt;&lt;tableframe="hsides"&gt;&lt;table frame="vsides"&gt; 框架属性 noresize=&quot;noresize&quot; 添加该属性后，框架是不可调整尺寸的 设置指向另一个文件内指定的节的链接 &lt;frame src=&quot;/example/html/link.html#C6&quot;&gt; 使用框架导航跳转至指定的节 123456&lt;frameset cols="180,*"&gt;&lt;frame src="/example/html/content.html"&gt;&lt;frame src="/example/html/link.html" name="showframe"&gt;&lt;/frameset&gt; target=&quot;_top&quot; ：跳出被锁定的框架 HTML响应式WEB设计概念 什么是响应式 Web 设计？RWD 指的是响应式 Web 设计（Responsive Web Design） RWD 能够以可变尺寸传递网页 RWD 对于平板和移动设备是必需的 创建方法 手工搭建，设置样式 使用现成的 CSS 框架使用 Bootstrap Bootstrap 是最流行的开发响应式 web 的 HTML, CSS, 和 JS 框架。Bootstrap 帮助您开发在任何尺寸都外观出众的站点：显示器、笔记本电脑、平板电脑或手机 FAQ HTML 的框架是什么? —见HTML框架 如何解决使用div时，设置背景出现空白间隙？ —见块级元素的div]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python进阶]]></title>
    <url>%2F2018%2F06%2F24%2F%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[函数式编程 原则写代码要遵循==开发封闭==原则，虽然这个原则是用的面向对象开发，但是也适用于函数式编程，简单来说，它规定已经实现的功能代码不允许被修改，但可以被扩展，即： 封闭：已实现的功能代码块 开放：对扩展开发 内容装饰器12345678910def w1(func): def inner(): # 验证1 # 验证2 # 验证3 return func() return inner@w1 # 相当于执行了 w1(f1())def f1(): print('f1') 当写完这段代码后（函数未被执行、未被执行、未被执行），python解释器就会从上到下解释代码，步骤如下：12def w1(func): ==&gt;将w1函数加载到内存@w1 没错，从表面上看解释器仅仅会解释这两句代码，因为函数在没有被调用之前其内部代码不会被执行。 从表面上看解释器着实会执行这两句，但是 @w1 这一句代码里却有大文章 @函数名 : 是python的一种语法糖。 如上例 @w1内部会执行以下操作: 执行w1函数，并将 @w1 下面的 函数 作为 w1 函数的参数即：@w1 等价于 w1(f1)。 所以，内部就会去执行：1234567891011121314151617def inner: #验证 return f1() # func是参数，此时 func 等于 f1return inner # 返回的 inner，inner代表的是函数，非执行函数# 其实就是将原来的 f1 函数塞进另外一个函数中。# 将执行完的 w1 函数返回值赋值给@w1下面的函数的函数名# w1函数的返回值是： def inner: #验证 return 原来f1() # 此处的 f1 表示原来的f1函数# 然后，将此返回值再重新赋值给 f1，即：new_f1 = def inner: #验证 return 原来f1() 如此一来， 即执行了验证的功能，又执行了原来 f 函数的内容，并将原 f1 函数返回值, 返回给业务调用着。 参数传递12345678910111213141516171819202122232425 # 一个参数：def w1(func): def inner(arg): # 验证1 # 验证2 # 验证3 return func(arg) return inner@w1def f1(arg): print('f1')# 两个参数：def w1(func): def inner(arg1,arg2): # 验证1 # 验证2 # 验证3 return func(arg1,arg2) return inner@w1def f1(arg1,arg2): print('f1') 问题: 装饰具有处理n个参数的函数的装饰器？12345678910def w1(func): def inner(*args,**kwargs): # 验证1 # 验证2 # 验证3 return func(*args,**kwargs) return inner@w1def f1(arg1,arg2,arg3): print('f1') 问题：一个函数可以被多个装饰器装饰吗？123456789101112131415161718def w1(func): def inner(*args,**kwargs): # 验证1 # 验证2 # 验证3 return func(*args,**kwargs) return innerdef w2(func): def inner(*args,**kwargs): # 验证1 # 验证2 # 验证3 return func(*args,**kwargs) return inner@w1@w2def f1(arg1,arg2,arg3): print('f1') Lambda函数（匿名函数） 函数 ： 最大程度地复用代码 存在问题：若函数很小，很短，则会造成啰嗦，不方便阅读代码 lambda表达式 一个表达式，函数体相对简单 用法 以lambda开头 紧跟一定的参数 参数后面用冒号和表达式主题分开 只是一个表达式，没有return 实例 stm = lambda x: 100 * x stm(89) ==&gt;8900 高阶函数 定义 ： 把函数作为参数使用的函数 注意 函数名称就是一个变量，即函数可以作为参数 举例12345def funA(n): return n * 100def funB(n): return funA(n) * 3 map函数 对队列里的每个元素进行操作，即映射操作 map函数是系统提供的具有映射功能的函数，返回值是一个迭代对象,类型为map类 注意：若用列表生成式得到的结果为空 格式： map(func, *iterables) 12345678910111213141516# map举例# 列表里的每个元素都乘以10l1 = [ i for i in range(10)]print(l1)for i in li: l2.append(i*10)# 利用map来实现def multen(n): return n*10l2 = map(multen, l1 ) # multen函数作为map函数的一个参数for x in l2: print(l2) reduce函数 作用： 归并，缩减 ，把可迭代对象最后归并为一个结果 作为参数的函数要求： 必须有两个参数 必须有返回结果 理解 ：reduce([1,2,3]) == f(f(f(1),2),3) 即函数嵌套 注意： reduce需要导入functools包 1234567891011from functools import reduce# 定义一个操作函数# 加入操作函数来相加def add(x,y): return x + y## 对列表[1,2,3]执行add的reduce操作rst = reduce(add, [1,2,3])print(rst)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jedieal]]></title>
    <url>%2F2018%2F06%2F23%2FJedieal%2F</url>
    <content type="text"><![CDATA[Python学习 Python爬虫]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
